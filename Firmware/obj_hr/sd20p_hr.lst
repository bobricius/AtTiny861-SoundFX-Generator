
obj_hr/sd20p_hr.elf:     file format elf32-avr

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00001962  00000000  00000000  00000074  2**1
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .bss          0000015c  00800060  00800060  000019d6  2**0
                  ALLOC
  2 .debug_aranges 00000080  00000000  00000000  000019d8  2**3
                  CONTENTS, READONLY, DEBUGGING
  3 .debug_pubnames 00000129  00000000  00000000  00001a58  2**0
                  CONTENTS, READONLY, DEBUGGING
  4 .debug_info   00001568  00000000  00000000  00001b81  2**0
                  CONTENTS, READONLY, DEBUGGING
  5 .debug_abbrev 00000599  00000000  00000000  000030e9  2**0
                  CONTENTS, READONLY, DEBUGGING
  6 .debug_line   00001031  00000000  00000000  00003682  2**0
                  CONTENTS, READONLY, DEBUGGING
  7 .debug_frame  00000170  00000000  00000000  000046b4  2**2
                  CONTENTS, READONLY, DEBUGGING
  8 .debug_str    0000036f  00000000  00000000  00004824  2**0
                  CONTENTS, READONLY, DEBUGGING
  9 .debug_loc    00001570  00000000  00000000  00004b93  2**0
                  CONTENTS, READONLY, DEBUGGING
 10 .debug_ranges 00000168  00000000  00000000  00006103  2**0
                  CONTENTS, READONLY, DEBUGGING

Disassembly of section .text:

00000000 <__vectors>:
       0:	19 c0       	rjmp	.+50     	; 0x34 <__ctors_end>
       2:	28 c0       	rjmp	.+80     	; 0x54 <__bad_interrupt>
       4:	e5 c0       	rjmp	.+458    	; 0x1d0 <__vector_2>
       6:	26 c0       	rjmp	.+76     	; 0x54 <__bad_interrupt>
       8:	25 c0       	rjmp	.+74     	; 0x54 <__bad_interrupt>
       a:	24 c0       	rjmp	.+72     	; 0x54 <__bad_interrupt>
       c:	23 c0       	rjmp	.+70     	; 0x54 <__bad_interrupt>
       e:	22 c0       	rjmp	.+68     	; 0x54 <__bad_interrupt>
      10:	21 c0       	rjmp	.+66     	; 0x54 <__bad_interrupt>
      12:	20 c0       	rjmp	.+64     	; 0x54 <__bad_interrupt>
      14:	1f c0       	rjmp	.+62     	; 0x54 <__bad_interrupt>
      16:	1e c0       	rjmp	.+60     	; 0x54 <__bad_interrupt>
      18:	1d c0       	rjmp	.+58     	; 0x54 <__bad_interrupt>
      1a:	1c c0       	rjmp	.+56     	; 0x54 <__bad_interrupt>
      1c:	bc c0       	rjmp	.+376    	; 0x196 <__vector_14>
      1e:	1a c0       	rjmp	.+52     	; 0x54 <__bad_interrupt>
      20:	19 c0       	rjmp	.+50     	; 0x54 <__bad_interrupt>
      22:	18 c0       	rjmp	.+48     	; 0x54 <__bad_interrupt>
      24:	17 c0       	rjmp	.+46     	; 0x54 <__bad_interrupt>

00000026 <__c.1607>:
      26:	30 30 30 2e 54 58 54 00                             000.TXT.

0000002e <__c.1557>:
      2e:	2e 57 41 56 00 00                                   .WAV..

00000034 <__ctors_end>:
      34:	11 24       	eor	r1, r1
      36:	1f be       	out	0x3f, r1	; 63
      38:	cf e5       	ldi	r28, 0x5F	; 95
      3a:	d2 e0       	ldi	r29, 0x02	; 2
      3c:	de bf       	out	0x3e, r29	; 62
      3e:	cd bf       	out	0x3d, r28	; 61

00000040 <__do_clear_bss>:
      40:	11 e0       	ldi	r17, 0x01	; 1
      42:	a0 e6       	ldi	r26, 0x60	; 96
      44:	b0 e0       	ldi	r27, 0x00	; 0
      46:	01 c0       	rjmp	.+2      	; 0x4a <.do_clear_bss_start>

00000048 <.do_clear_bss_loop>:
      48:	1d 92       	st	X+, r1

0000004a <.do_clear_bss_start>:
      4a:	ac 3b       	cpi	r26, 0xBC	; 188
      4c:	b1 07       	cpc	r27, r17
      4e:	e1 f7       	brne	.-8      	; 0x48 <.do_clear_bss_loop>
      50:	10 d1       	rcall	.+544    	; 0x272 <main>
      52:	85 cc       	rjmp	.-1782   	; 0xfffff95e <__eeprom_end+0xff7ef95e>

00000054 <__bad_interrupt>:
      54:	d5 cf       	rjmp	.-86     	; 0x0 <__vectors>

00000056 <delay_ms>:
; void delay_us(WORD us);

.global delay_ms
.func delay_ms
delay_ms:
	wdr			; Reset WDT
      56:	a8 95       	wdr
	sbiw	r24, 1		; if (ms-- == 0) return;
      58:	01 97       	sbiw	r24, 0x01	; 1
	brcs	9f		; /
      5a:	28 f0       	brcs	.+10     	; 0x66 <delay_ms+0x10>
	ldi	ZL, lo8(4000)	; 1ms delay (16MHz)
      5c:	e0 ea       	ldi	r30, 0xA0	; 160
	ldi	ZH, hi8(4000)	; 
      5e:	ff e0       	ldi	r31, 0x0F	; 15
1:	sbiw	ZL, 1		; 
      60:	31 97       	sbiw	r30, 0x01	; 1
	brne	1b		; /
      62:	f1 f7       	brne	.-4      	; 0x60 <delay_ms+0xa>
	rjmp	delay_ms
      64:	f8 cf       	rjmp	.-16     	; 0x56 <delay_ms>
9:	ret
      66:	08 95       	ret

00000068 <delay_us>:


.global delay_us
.func delay_us
delay_us:
	ldi	r23, 2
      68:	72 e0       	ldi	r23, 0x02	; 2
1:	dec	r23
      6a:	7a 95       	dec	r23
	brne	1b
      6c:	f1 f7       	brne	.-4      	; 0x6a <delay_us+0x2>
	sbiw	r24, 1
      6e:	01 97       	sbiw	r24, 0x01	; 1
	brne	delay_us
      70:	d9 f7       	brne	.-10     	; 0x68 <delay_us>
	wdr
      72:	a8 95       	wdr
	ret
      74:	08 95       	ret

00000076 <rcv_spi>:
; BYTE rcv_spi (void);

.global rcv_spi
.func rcv_spi
rcv_spi:
	ldi	r24, _BV(2)			;SCK(PA2)
      76:	84 e0       	ldi	r24, 0x04	; 4
	.rept 16				;Toggle SCK 16 times
	out	_SFR_IO_ADDR(PINA), r24		;
	.endr					;/
      78:	89 bb       	out	0x19, r24	; 25
      7a:	89 bb       	out	0x19, r24	; 25
      7c:	89 bb       	out	0x19, r24	; 25
      7e:	89 bb       	out	0x19, r24	; 25
      80:	89 bb       	out	0x19, r24	; 25
      82:	89 bb       	out	0x19, r24	; 25
      84:	89 bb       	out	0x19, r24	; 25
      86:	89 bb       	out	0x19, r24	; 25
      88:	89 bb       	out	0x19, r24	; 25
      8a:	89 bb       	out	0x19, r24	; 25
      8c:	89 bb       	out	0x19, r24	; 25
      8e:	89 bb       	out	0x19, r24	; 25
      90:	89 bb       	out	0x19, r24	; 25
      92:	89 bb       	out	0x19, r24	; 25
      94:	89 bb       	out	0x19, r24	; 25
      96:	89 bb       	out	0x19, r24	; 25
	nop					;Read shift register
      98:	00 00       	nop
	in	r24, _SFR_IO_ADDR(USIDR)	;/
      9a:	8f b1       	in	r24, 0x0f	; 15
	ret
      9c:	08 95       	ret

0000009e <xmit_spi>:
; void xmit_spi (BYTE);

.global xmit_spi
.func xmit_spi
xmit_spi:
	ldi	r25, _BV(2)			; SCK(PA2)
      9e:	94 e0       	ldi	r25, 0x04	; 4
	in	r22, _SFR_IO_ADDR(PORTA)
      a0:	6b b3       	in	r22, 0x1b	; 27

	ldi	r23, 8
      a2:	78 e0       	ldi	r23, 0x08	; 8
1:	bst	r24, 7				;DO(PA1) = data bit to be sent
      a4:	87 fb       	bst	r24, 7
	bld	r22, 1				;
      a6:	61 f9       	bld	r22, 1
	out	_SFR_IO_ADDR(PORTA), r22	;/
      a8:	6b bb       	out	0x1b, r22	; 27
	lsl	r24				;Next bit
      aa:	88 0f       	add	r24, r24
	out	_SFR_IO_ADDR(PINA), r25		;SCK(PA2) = H
      ac:	99 bb       	out	0x19, r25	; 25
	out	_SFR_IO_ADDR(PINA), r25		;SCK(PA2) = L
      ae:	99 bb       	out	0x19, r25	; 25
	dec	r23				;while(--r23)
      b0:	7a 95       	dec	r23
	brne	1b				;/
      b2:	c1 f7       	brne	.-16     	; 0xa4 <xmit_spi+0x6>

	sbi	_SFR_IO_ADDR(PORTA), 1		;DO(PA1) = H
      b4:	d9 9a       	sbi	0x1b, 1	; 27
	ret
      b6:	08 95       	ret

000000b8 <fwd_blk_part>:
; void fwd_blk_part (void*, WORD, WORD);

.global fwd_blk_part
.func fwd_blk_part
fwd_blk_part:
	movw	XL, r24			;X = R25:R24 (memory address)
      b8:	dc 01       	movw	r26, r24
	movw	ZL, r22			;Z = R23:R22 (byte offset in the sector)
      ba:	fb 01       	movw	r30, r22

	ldi	r18, lo8(514)		;R19:R18 = 514, Number of bytes to receive
      bc:	22 e0       	ldi	r18, 0x02	; 2
	ldi	r19, hi8(514)		;/
      be:	32 e0       	ldi	r19, 0x02	; 2
	sub	r18, ZL			;R19:R18 -= Z
      c0:	2e 1b       	sub	r18, r30
	sbc	r19, ZH			;/
      c2:	3f 0b       	sbc	r19, r31
	sub	r18, r20		;R19:R18 -= R21:R20
      c4:	24 1b       	sub	r18, r20
	sbc	r19, r21		;/
      c6:	35 0b       	sbc	r19, r21
	; Skip leading data bytes
	ldi	r24, _BV(2)		;SCK(PA2)
      c8:	84 e0       	ldi	r24, 0x04	; 4
1:	sbiw	ZL, 1			;Skip leading data...
      ca:	31 97       	sbiw	r30, 0x01	; 1
	brcs	2f			;
      cc:	88 f0       	brcs	.+34     	; 0xf0 <fwd_blk_part+0x38>
	.rept 16			;Discard a byte on USI
	out	_SFR_IO_ADDR(PINA), r24	;
	.endr				;/
      ce:	89 bb       	out	0x19, r24	; 25
      d0:	89 bb       	out	0x19, r24	; 25
      d2:	89 bb       	out	0x19, r24	; 25
      d4:	89 bb       	out	0x19, r24	; 25
      d6:	89 bb       	out	0x19, r24	; 25
      d8:	89 bb       	out	0x19, r24	; 25
      da:	89 bb       	out	0x19, r24	; 25
      dc:	89 bb       	out	0x19, r24	; 25
      de:	89 bb       	out	0x19, r24	; 25
      e0:	89 bb       	out	0x19, r24	; 25
      e2:	89 bb       	out	0x19, r24	; 25
      e4:	89 bb       	out	0x19, r24	; 25
      e6:	89 bb       	out	0x19, r24	; 25
      e8:	89 bb       	out	0x19, r24	; 25
      ea:	89 bb       	out	0x19, r24	; 25
      ec:	89 bb       	out	0x19, r24	; 25
	rjmp	1b			;
      ee:	ed cf       	rjmp	.-38     	; 0xca <fwd_blk_part+0x12>
2:	sbiw	XL, 0			;Destination?
      f0:	10 97       	sbiw	r26, 0x00	; 0
	breq	fb_wave
      f2:	31 f0       	breq	.+12     	; 0x100 <fb_wave>

000000f4 <fb_mem>:

fb_mem:	; Store intermediate data bytes to the memory
	rcall	rcv_spi			;do
      f4:	c0 df       	rcall	.-128    	; 0x76 <rcv_spi>
	st	X+, r24			; *X++ = rcv_spi()
      f6:	8d 93       	st	X+, r24
	subi	r20, 1			;while (--r21:r20)
      f8:	41 50       	subi	r20, 0x01	; 1
	sbci	r21, 0			;
      fa:	50 40       	sbci	r21, 0x00	; 0
	brne	fb_mem			;/
      fc:	d9 f7       	brne	.-10     	; 0xf4 <fb_mem>
	rjmp	fb_exit
      fe:	36 c0       	rjmp	.+108    	; 0x16c <fb_exit>

00000100 <fb_wave>:

fb_wave: ; Forward intermediate data bytes to the wave FIFO
	sbic	_FLAGS, 4		;if (16bit data) R21:R20 /= 2;
     100:	54 99       	sbic	0x0a, 4	; 10
	lsr	r21			;
     102:	56 95       	lsr	r21
	sbic	_FLAGS, 4		;
     104:	54 99       	sbic	0x0a, 4	; 10
	ror	r20			;/
     106:	47 95       	ror	r20
	sbic	_FLAGS, 1		;if (Stereo data) R21:R20 /= 2;
     108:	51 99       	sbic	0x0a, 1	; 10
	lsr	r21			;
     10a:	56 95       	lsr	r21
	sbic	_FLAGS, 1		;
     10c:	51 99       	sbic	0x0a, 1	; 10
	ror	r20			;/
     10e:	47 95       	ror	r20
	lds	r22, FifoWi		;r22 = FIFO write index
     110:	60 91 64 00 	lds	r22, 0x0064

3:	ldi	XL, lo8(Buff)		;X = Buff + R22
     114:	af e7       	ldi	r26, 0x7F	; 127
	ldi	XH, hi8(Buff)		;
     116:	b0 e0       	ldi	r27, 0x00	; 0
	add	XL, r22			;
     118:	a6 0f       	add	r26, r22
	adc	XH, r1			;/
     11a:	b1 1d       	adc	r27, r1
4:	lds	r24, FifoCt		;wait while FIFO full
     11c:	80 91 90 01 	lds	r24, 0x0190
	cpi	r24, 252		;
     120:	8c 3f       	cpi	r24, 0xFC	; 252
	brcc	4b			;/
     122:	e0 f7       	brcc	.-8      	; 0x11c <fb_wave+0x1c>
#if MODE == 2	// Mono Hi-Res
	rcall	rcv_spi			;Get L-ch/Mono data into Z
     124:	a8 df       	rcall	.-176    	; 0x76 <rcv_spi>
	clr	ZL			;
     126:	ee 27       	eor	r30, r30
	sbis	_FLAGS, 4		;
     128:	54 9b       	sbis	0x0a, 4	; 10
	rjmp	5f			;
     12a:	03 c0       	rjmp	.+6      	; 0x132 <fb_wave+0x32>
	mov	ZL, r24			;
     12c:	e8 2f       	mov	r30, r24
	rcall	rcv_spi			;
     12e:	a3 df       	rcall	.-186    	; 0x76 <rcv_spi>
	subi	r24, 0x80		;
     130:	80 58       	subi	r24, 0x80	; 128
5:	mov	ZH, r24			;/
     132:	f8 2f       	mov	r31, r24
	sbis	_FLAGS, 1		;if Mono file, do not process R-ch data
     134:	51 9b       	sbis	0x0a, 1	; 10
	rjmp	8f			;/
     136:	0b c0       	rjmp	.+22     	; 0x14e <fb_wave+0x4e>
	rcall	rcv_spi			;Get R-ch data and mix it to Z
     138:	9e df       	rcall	.-196    	; 0x76 <rcv_spi>
	clr	r25			;
     13a:	99 27       	eor	r25, r25
	sbis	_FLAGS, 4		;
     13c:	54 9b       	sbis	0x0a, 4	; 10
	rjmp	6f			;
     13e:	03 c0       	rjmp	.+6      	; 0x146 <fb_wave+0x46>
	mov	r25, r24		;
     140:	98 2f       	mov	r25, r24
	rcall	rcv_spi			;
     142:	99 df       	rcall	.-206    	; 0x76 <rcv_spi>
	subi	r24, 0x80		;
     144:	80 58       	subi	r24, 0x80	; 128
6:	add	ZL, r25			;
     146:	e9 0f       	add	r30, r25
	adc	ZH, r24			;
     148:	f8 1f       	adc	r31, r24
	ror	ZH			;
     14a:	f7 95       	ror	r31
	ror	ZL			;/
     14c:	e7 95       	ror	r30
	add	ZH, r24			;
	ror	ZH			;/
5:	mov	ZL, ZH			;ZL = -ZH
	com	ZL			;/
#endif
8:	st	X+, ZL			;Store -/Rch/LSB data
     14e:	ed 93       	st	X+, r30
	st	X+, ZH			;Store +/Lch/MSB data
     150:	fd 93       	st	X+, r31
	cli				;
     152:	f8 94       	cli
	lds	r24, FifoCt		;
     154:	80 91 90 01 	lds	r24, 0x0190
	subi	r24, -2			;
     158:	8e 5f       	subi	r24, 0xFE	; 254
	sts	FifoCt, r24		;
     15a:	80 93 90 01 	sts	0x0190, r24
	sei				;
     15e:	78 94       	sei
	subi	r22, -2			;/
     160:	6e 5f       	subi	r22, 0xFE	; 254

	subi	r20, lo8(1)		;while(--R21:R20)
     162:	41 50       	subi	r20, 0x01	; 1
	sbci	r21, hi8(1)		;
     164:	50 40       	sbci	r21, 0x00	; 0
	brne	3b			;/
     166:	b1 f6       	brne	.-84     	; 0x114 <fb_wave+0x14>
	sts	FifoWi, r22		;Save FIFO write index
     168:	60 93 64 00 	sts	0x0064, r22

0000016c <fb_exit>:

fb_exit:
	ldi	r24, _BV(2)		;SCK(PA2)
     16c:	84 e0       	ldi	r24, 0x04	; 4
9:	.rept 16			;Discard a byte on USI
	out	_SFR_IO_ADDR(PINA), r24	;
	.endr				;/
     16e:	89 bb       	out	0x19, r24	; 25
     170:	89 bb       	out	0x19, r24	; 25
     172:	89 bb       	out	0x19, r24	; 25
     174:	89 bb       	out	0x19, r24	; 25
     176:	89 bb       	out	0x19, r24	; 25
     178:	89 bb       	out	0x19, r24	; 25
     17a:	89 bb       	out	0x19, r24	; 25
     17c:	89 bb       	out	0x19, r24	; 25
     17e:	89 bb       	out	0x19, r24	; 25
     180:	89 bb       	out	0x19, r24	; 25
     182:	89 bb       	out	0x19, r24	; 25
     184:	89 bb       	out	0x19, r24	; 25
     186:	89 bb       	out	0x19, r24	; 25
     188:	89 bb       	out	0x19, r24	; 25
     18a:	89 bb       	out	0x19, r24	; 25
     18c:	89 bb       	out	0x19, r24	; 25
	subi	r18, lo8(1)		;Repeat r19:r18 times
     18e:	21 50       	subi	r18, 0x01	; 1
	sbci	r19, hi8(1)		;
     190:	30 40       	sbci	r19, 0x00	; 0
	brne	9b			;/
     192:	69 f7       	brne	.-38     	; 0x16e <fb_exit+0x2>

	ret
     194:	08 95       	ret

00000196 <__vector_14>:
; Pop an audio sample from FIFO and put it to the DAC.

.global TIMER0_COMPA_vect
.func TIMER0_COMPA_vect
TIMER0_COMPA_vect:
	push	r24				;Save regs.
     196:	8f 93       	push	r24
	in	r24, _SFR_IO_ADDR(SREG)		;
     198:	8f b7       	in	r24, 0x3f	; 63
	push	r24				;
     19a:	8f 93       	push	r24
	push	ZL				;
     19c:	ef 93       	push	r30
	push	ZH				;/
     19e:	ff 93       	push	r31

	lds	r24, FifoCt			;Load FIFO data counter
     1a0:	80 91 90 01 	lds	r24, 0x0190
	subi	r24, 2				;Check if a sample is available
     1a4:	82 50       	subi	r24, 0x02	; 2
	brcs	9f				; If not, exit function
     1a6:	70 f0       	brcs	.+28     	; 0x1c4 <__vector_14+0x2e>
	sts	FifoCt, r24			;Save FIFO data counter
     1a8:	80 93 90 01 	sts	0x0190, r24
	lds	ZL, FifoRi			;Get FIFO read index
     1ac:	e0 91 65 00 	lds	r30, 0x0065
	clr	ZH				;Z = pointer to the top of FIFO
     1b0:	ff 27       	eor	r31, r31
	subi	ZL, lo8(-(Buff))		;
     1b2:	e1 58       	subi	r30, 0x81	; 129
	sbci	ZH, hi8(-(Buff))		;/
     1b4:	ff 4f       	sbci	r31, 0xFF	; 255
	ld	r24, Z+				;Send -/Rch/LSB data to OC1A
     1b6:	81 91       	ld	r24, Z+
	out	_SFR_IO_ADDR(OCR1B), r24	;/
     1b8:	8c bd       	out	0x2c, r24	; 44
	ld	r24, Z+				;Send +/Lch/MSB data to OC1B
     1ba:	81 91       	ld	r24, Z+
	out	_SFR_IO_ADDR(OCR1A), r24	;/
     1bc:	8d bd       	out	0x2d, r24	; 45
	subi	ZL, lo8(Buff)			;Save FIFO read index
     1be:	ef 57       	subi	r30, 0x7F	; 127
	sts	FifoRi, ZL			;/
     1c0:	e0 93 65 00 	sts	0x0065, r30
9:
	pop	ZH				;Restore regs.
     1c4:	ff 91       	pop	r31
	pop	ZL				;
     1c6:	ef 91       	pop	r30
	pop	r24				;
     1c8:	8f 91       	pop	r24
	out	_SFR_IO_ADDR(SREG), r24		;
     1ca:	8f bf       	out	0x3f, r24	; 63
	pop	r24				;/
     1cc:	8f 91       	pop	r24
	reti
     1ce:	18 95       	reti

000001d0 <__vector_2>:
#define LED_OFF()	PORTB &= ~_BV(2)

void delay_ms (WORD);	/* Defined in asmfunc.S */
void delay_us (WORD);	/* Defined in asmfunc.S */

EMPTY_INTERRUPT(PCINT_vect);
     1d0:	18 95       	reti

000001d2 <chk_input>:
{
	BYTE k, n;
	static BYTE pk, nk;


	wdt_reset();
     1d2:	a8 95       	wdr

	k = ~((PINA & 0xF8) | ((PINB >> 4) & 0x07));
     1d4:	89 b3       	in	r24, 0x19	; 25
     1d6:	96 b3       	in	r25, 0x16	; 22
     1d8:	92 95       	swap	r25
     1da:	97 70       	andi	r25, 0x07	; 7
     1dc:	88 7f       	andi	r24, 0xF8	; 248
     1de:	98 2b       	or	r25, r24
     1e0:	90 95       	com	r25
	GIFR = _BV(PCIF);
     1e2:	80 e2       	ldi	r24, 0x20	; 32
     1e4:	8a bf       	out	0x3a, r24	; 58
	n = nk; nk = k;
     1e6:	20 91 60 00 	lds	r18, 0x0060
     1ea:	90 93 60 00 	sts	0x0060, r25
	if (n != k || pk == k) return 0;
     1ee:	29 17       	cp	r18, r25
     1f0:	51 f4       	brne	.+20     	; 0x206 <chk_input+0x34>
     1f2:	80 91 61 00 	lds	r24, 0x0061
     1f6:	82 17       	cp	r24, r18
     1f8:	31 f0       	breq	.+12     	; 0x206 <chk_input+0x34>

	pk = k; Cmd = k;
     1fa:	20 93 61 00 	sts	0x0061, r18
     1fe:	20 93 8f 01 	sts	0x018F, r18
     202:	81 e0       	ldi	r24, 0x01	; 1
     204:	08 95       	ret

	return 1;
     206:	80 e0       	ldi	r24, 0x00	; 0
}
     208:	08 95       	ret

0000020a <led_sign>:

static
void led_sign (
	BYTE ct		/* Number of flashes */
)
{
     20a:	1f 93       	push	r17
     20c:	18 2f       	mov	r17, r24
	do {
		delay_ms(200);
     20e:	88 ec       	ldi	r24, 0xC8	; 200
     210:	90 e0       	ldi	r25, 0x00	; 0
     212:	21 df       	rcall	.-446    	; 0x56 <delay_ms>
		LED_ON();
     214:	c2 9a       	sbi	0x18, 2	; 24
		delay_ms(100);
     216:	84 e6       	ldi	r24, 0x64	; 100
     218:	90 e0       	ldi	r25, 0x00	; 0
     21a:	1d df       	rcall	.-454    	; 0x56 <delay_ms>
		LED_OFF();
     21c:	c2 98       	cbi	0x18, 2	; 24
	} while (--ct);
     21e:	11 50       	subi	r17, 0x01	; 1
     220:	b1 f7       	brne	.-20     	; 0x20e <led_sign+0x4>
	delay_ms(1000);
     222:	88 ee       	ldi	r24, 0xE8	; 232
     224:	93 e0       	ldi	r25, 0x03	; 3
     226:	17 df       	rcall	.-466    	; 0x56 <delay_ms>
}
     228:	1f 91       	pop	r17
     22a:	08 95       	ret

0000022c <ramp>:

static
void ramp (		/* Ramp-up/down audio output (anti-pop feature) */
	int dir		/* 0:Ramp-down, 1:Ramp-up */
)
{
     22c:	ff 92       	push	r15
     22e:	0f 93       	push	r16
     230:	1f 93       	push	r17
#if MODE != 0	/* This function is enebled on non-OCL output cfg. */
	BYTE v, d, n;


	if (dir) {
     232:	89 2b       	or	r24, r25
     234:	21 f4       	brne	.+8      	; 0x23e <ramp+0x12>
     236:	00 e8       	ldi	r16, 0x80	; 128
     238:	ff 24       	eor	r15, r15
     23a:	fa 94       	dec	r15
     23c:	03 c0       	rjmp	.+6      	; 0x244 <ramp+0x18>
     23e:	00 e0       	ldi	r16, 0x00	; 0
     240:	ff 24       	eor	r15, r15
     242:	f3 94       	inc	r15
     244:	10 e8       	ldi	r17, 0x80	; 128
		v = 128; d = 0xFF;
	}

	n = 128;
	do {
		v += d;
     246:	0f 0d       	add	r16, r15
		OCR1A = v; OCR1B = v;
     248:	0d bd       	out	0x2d, r16	; 45
     24a:	0c bd       	out	0x2c, r16	; 44
		delay_us(100);
     24c:	84 e6       	ldi	r24, 0x64	; 100
     24e:	90 e0       	ldi	r25, 0x00	; 0
     250:	0b df       	rcall	.-490    	; 0x68 <delay_us>
	} while (--n);
     252:	11 50       	subi	r17, 0x01	; 1
     254:	c1 f7       	brne	.-16     	; 0x246 <ramp+0x1a>
#endif
}
     256:	1f 91       	pop	r17
     258:	0f 91       	pop	r16
     25a:	ff 90       	pop	r15
     25c:	08 95       	ret

0000025e <audio_off>:


static
void audio_off (void)	/* Disable audio output functions */
{
	if (TCCR0B) {
     25e:	83 b7       	in	r24, 0x33	; 51
     260:	88 23       	and	r24, r24
     262:	31 f0       	breq	.+12     	; 0x270 <__stack+0x11>
		TCCR0B = 0;				/* Stop audio timer */
     264:	13 be       	out	0x33, r1	; 51
		ramp(0);				/* Ramp-down to GND level */
     266:	80 e0       	ldi	r24, 0x00	; 0
     268:	90 e0       	ldi	r25, 0x00	; 0
     26a:	e0 df       	rcall	.-64     	; 0x22c <ramp>
		TCCR1A = 0;	TCCR1B = 0;	/* Stop PWM */
     26c:	10 be       	out	0x30, r1	; 48
     26e:	1f bc       	out	0x2f, r1	; 47
     270:	08 95       	ret

00000272 <main>:

/*-----------------------------------------------------------------------*/
/* Main                                                                  */

int main (void)
{
     272:	a0 e0       	ldi	r26, 0x00	; 0
     274:	b0 e0       	ldi	r27, 0x00	; 0
     276:	ee e3       	ldi	r30, 0x3E	; 62
     278:	f1 e0       	ldi	r31, 0x01	; 1
     27a:	33 cb       	rjmp	.-2458   	; 0xfffff8e2 <__eeprom_end+0xff7ef8e2>
	BYTE rc;


	MCUSR = 0;								/* Clear reset status */
     27c:	14 be       	out	0x34, r1	; 52
	WDTCR = _BV(WDE) | 0b110;				/* Enable WDT (1s) */
     27e:	8e e0       	ldi	r24, 0x0E	; 14
     280:	81 bd       	out	0x21, r24	; 33
	set_sleep_mode(SLEEP_MODE_PWR_DOWN);	/* Select power down mode for sleep */
     282:	85 b7       	in	r24, 0x35	; 53
     284:	87 7e       	andi	r24, 0xE7	; 231
     286:	80 61       	ori	r24, 0x10	; 16
     288:	85 bf       	out	0x35, r24	; 53
	PCMSK0 = 0b11111000;					/* Select pin change interrupt pins (SW1..SW8) */
     28a:	88 ef       	ldi	r24, 0xF8	; 248
     28c:	83 bd       	out	0x23, r24	; 35
	PCMSK1 = 0b01110000;
     28e:	80 e7       	ldi	r24, 0x70	; 112
     290:	82 bd       	out	0x22, r24	; 34

	/* Initialize ports */
	PORTA = 0b11111011;		/* PORTA [pppppLHp]*/
     292:	8b ef       	ldi	r24, 0xFB	; 251
     294:	8b bb       	out	0x1b, r24	; 27
	DDRA  = 0b00000110;
     296:	86 e0       	ldi	r24, 0x06	; 6
     298:	8a bb       	out	0x1a, r24	; 26
	PORTB = 0b01110001;		/* PORTB [-pppLLLH] */
     29a:	81 e7       	ldi	r24, 0x71	; 113
     29c:	88 bb       	out	0x18, r24	; 24
	DDRB  = 0b00001111;
     29e:	8f e0       	ldi	r24, 0x0F	; 15
     2a0:	87 bb       	out	0x17, r24	; 23

	sei();
     2a2:	78 94       	sei

	for (;;) {
		if (pf_mount(&Fs) == FR_OK) {	/* Initialize FS */
     2a4:	81 e9       	ldi	r24, 0x91	; 145
     2a6:	91 e0       	ldi	r25, 0x01	; 1
     2a8:	c8 d8       	rcall	.-3696   	; 0xfffff43a <__eeprom_end+0xff7ef43a>
     2aa:	89 2b       	or	r24, r25
     2ac:	09 f0       	breq	.+2      	; 0x2b0 <main+0x3e>
     2ae:	43 c2       	rjmp	.+1158   	; 0x736 <main+0x4c4>

			/* Load command input mode (if not exist, use mode 0 as default) */
			strcpy_P((char*)Buff, PSTR("000.TXT"));
     2b0:	8f e7       	ldi	r24, 0x7F	; 127
     2b2:	90 e0       	ldi	r25, 0x00	; 0
     2b4:	66 e2       	ldi	r22, 0x26	; 38
     2b6:	70 e0       	ldi	r23, 0x00	; 0
     2b8:	4b db       	rcall	.-2410   	; 0xfffff950 <__eeprom_end+0xff7ef950>
			if (pf_open((char*)Buff) == FR_OK) {
     2ba:	8f e7       	ldi	r24, 0x7F	; 127
     2bc:	90 e0       	ldi	r25, 0x00	; 0
     2be:	3e d7       	rcall	.+3708   	; 0x113c <pf_open>
     2c0:	89 2b       	or	r24, r25
     2c2:	61 f4       	brne	.+24     	; 0x2dc <main+0x6a>
				pf_read(&InMode, 1, &rb);
     2c4:	8e e7       	ldi	r24, 0x7E	; 126
     2c6:	90 e0       	ldi	r25, 0x00	; 0
     2c8:	61 e0       	ldi	r22, 0x01	; 1
     2ca:	70 e0       	ldi	r23, 0x00	; 0
     2cc:	4c e7       	ldi	r20, 0x7C	; 124
     2ce:	50 e0       	ldi	r21, 0x00	; 0
     2d0:	89 d7       	rcall	.+3858   	; 0x11e4 <pf_read>
				InMode -= '0';
     2d2:	80 91 7e 00 	lds	r24, 0x007E
     2d6:	80 53       	subi	r24, 0x30	; 48
     2d8:	80 93 7e 00 	sts	0x007E, r24
				}
			}
		} while (!rc && rb == 1024);	/* Repeat until all data read or code change */

		if (rc || !Cmd || InMode >= 2) break;
		if (pf_lseek(spa) != FR_OK) {	/* Return top of audio data */
     2dc:	22 24       	eor	r2, r2
     2de:	23 94       	inc	r2
void wait_status (void)	/* Wait for a code change */
{
	BYTE n;


	if (Cmd) return;
     2e0:	80 91 8f 01 	lds	r24, 0x018F
     2e4:	88 23       	and	r24, r24
     2e6:	19 f5       	brne	.+70     	; 0x32e <main+0xbc>

	audio_off();	/* Disable audio output */
     2e8:	ba df       	rcall	.-140    	; 0x25e <audio_off>
     2ea:	1a e0       	ldi	r17, 0x0A	; 10

	for (;;) {
		n = 10;				/* Wait for a code change at active mode (100ms max) */
		do {
			delay_ms(10);
     2ec:	8a e0       	ldi	r24, 0x0A	; 10
     2ee:	90 e0       	ldi	r25, 0x00	; 0
     2f0:	b2 de       	rcall	.-668    	; 0x56 <delay_ms>
			chk_input();
     2f2:	6f df       	rcall	.-290    	; 0x1d2 <chk_input>
		} while (--n && !Cmd);
     2f4:	11 50       	subi	r17, 0x01	; 1
     2f6:	21 f0       	breq	.+8      	; 0x300 <main+0x8e>
     2f8:	80 91 8f 01 	lds	r24, 0x018F
     2fc:	88 23       	and	r24, r24
     2fe:	b1 f3       	breq	.-20     	; 0x2ec <main+0x7a>
		if (Cmd) break;		/* Return if any code change is detected within 100ms */
     300:	80 91 8f 01 	lds	r24, 0x018F
     304:	88 23       	and	r24, r24
     306:	99 f4       	brne	.+38     	; 0x32e <main+0xbc>

		cli();							/* Enable pin change interrupt */
     308:	f8 94       	cli
		GIMSK = _BV(PCIE1);
     30a:	20 e2       	ldi	r18, 0x20	; 32
     30c:	2b bf       	out	0x3b, r18	; 59
		WDTCR = _BV(WDE) | _BV(WDCE);	/* Disable WDT */
     30e:	68 e1       	ldi	r22, 0x18	; 24
     310:	61 bd       	out	0x21, r22	; 33
		WDTCR = 0;
     312:	11 bc       	out	0x21, r1	; 33
		sleep_enable();					/* Wait for a code change at power-down mode */
     314:	85 b7       	in	r24, 0x35	; 53
     316:	80 62       	ori	r24, 0x20	; 32
     318:	85 bf       	out	0x35, r24	; 53
		sei();
     31a:	78 94       	sei
		sleep_cpu();
     31c:	88 95       	sleep
		sleep_disable();
     31e:	85 b7       	in	r24, 0x35	; 53
     320:	8f 7d       	andi	r24, 0xDF	; 223
     322:	85 bf       	out	0x35, r24	; 53
		wdt_reset();					/* Enable WDT (1s) */
     324:	a8 95       	wdr
		WDTCR = _BV(WDE) | 0b110;
     326:	8e e0       	ldi	r24, 0x0E	; 14
     328:	81 bd       	out	0x21, r24	; 33
		GIMSK = 0;						/* Disable pin change interrupt */
     32a:	1b be       	out	0x3b, r1	; 59
     32c:	de cf       	rjmp	.-68     	; 0x2ea <main+0x78>
			}

			/* Main loop */
			do {
				wait_status();				/* Wait for any valid code */
				rc = play(Cmd);				/* Play corresponding audio file */
     32e:	30 90 8f 01 	lds	r3, 0x018F
	FRESULT res;
	WORD btr;
	BYTE n, i, rc;


	if (InMode >= 2) Cmd = 0;	/* Clear command code (Edge triggered) */
     332:	80 91 7e 00 	lds	r24, 0x007E
     336:	82 30       	cpi	r24, 0x02	; 2
     338:	10 f0       	brcs	.+4      	; 0x33e <main+0xcc>
     33a:	10 92 8f 01 	sts	0x018F, r1

	/* Open an audio file "nnn.WAV" (nnn=001..255) */
	i = 2; n = fn;
	do {
		Buff[i] = (BYTE)(n % 10) + '0'; n /= 10;
     33e:	83 2d       	mov	r24, r3
     340:	6a e0       	ldi	r22, 0x0A	; 10
     342:	a1 da       	rcall	.-2750   	; 0xfffff886 <__eeprom_end+0xff7ef886>
     344:	90 5d       	subi	r25, 0xD0	; 208
     346:	90 93 81 00 	sts	0x0081, r25
     34a:	83 2d       	mov	r24, r3
     34c:	9c da       	rcall	.-2760   	; 0xfffff886 <__eeprom_end+0xff7ef886>
     34e:	28 2f       	mov	r18, r24
     350:	9a da       	rcall	.-2764   	; 0xfffff886 <__eeprom_end+0xff7ef886>
     352:	90 5d       	subi	r25, 0xD0	; 208
     354:	90 93 80 00 	sts	0x0080, r25
     358:	82 2f       	mov	r24, r18
     35a:	95 da       	rcall	.-2774   	; 0xfffff886 <__eeprom_end+0xff7ef886>
     35c:	94 da       	rcall	.-2776   	; 0xfffff886 <__eeprom_end+0xff7ef886>
     35e:	90 5d       	subi	r25, 0xD0	; 208
     360:	90 93 7f 00 	sts	0x007F, r25
	} while (i--);
	strcpy_P((char*)&Buff[3], PSTR(".WAV"));
     364:	82 e8       	ldi	r24, 0x82	; 130
     366:	90 e0       	ldi	r25, 0x00	; 0
     368:	6e e2       	ldi	r22, 0x2E	; 46
     36a:	70 e0       	ldi	r23, 0x00	; 0
     36c:	f1 da       	rcall	.-2590   	; 0xfffff950 <__eeprom_end+0xff7ef950>
	res = pf_open((char*)Buff);
     36e:	8f e7       	ldi	r24, 0x7F	; 127
     370:	90 e0       	ldi	r25, 0x00	; 0
     372:	e4 d6       	rcall	.+3528   	; 0x113c <pf_open>
	if (res == FR_NO_FILE) return 3;
     374:	83 30       	cpi	r24, 0x03	; 3
     376:	91 05       	cpc	r25, r1
     378:	11 f4       	brne	.+4      	; 0x37e <main+0x10c>
     37a:	13 e0       	ldi	r17, 0x03	; 3
     37c:	cf c1       	rjmp	.+926    	; 0x71c <main+0x4aa>
	if (res != FR_OK) return 2;
     37e:	89 2b       	or	r24, r25
     380:	09 f0       	breq	.+2      	; 0x384 <main+0x112>
     382:	e8 c1       	rjmp	.+976    	; 0x754 <main+0x4e2>
	DWORD sz, f;
	BYTE b, al = 0;


	/* Check RIFF-WAVE file header */
	if (pf_read(Buff, 12, &rb)) return 2;
     384:	8f e7       	ldi	r24, 0x7F	; 127
     386:	90 e0       	ldi	r25, 0x00	; 0
     388:	6c e0       	ldi	r22, 0x0C	; 12
     38a:	70 e0       	ldi	r23, 0x00	; 0
     38c:	4c e7       	ldi	r20, 0x7C	; 124
     38e:	50 e0       	ldi	r21, 0x00	; 0
     390:	29 d7       	rcall	.+3666   	; 0x11e4 <pf_read>
     392:	89 2b       	or	r24, r25
     394:	09 f0       	breq	.+2      	; 0x398 <main+0x126>
     396:	d2 c1       	rjmp	.+932    	; 0x73c <main+0x4ca>
	if (rb != 12 || LD_DWORD(Buff+8) != FCC('W','A','V','E')) return 4;
     398:	80 91 7c 00 	lds	r24, 0x007C
     39c:	90 91 7d 00 	lds	r25, 0x007D
     3a0:	0c 97       	sbiw	r24, 0x0c	; 12
     3a2:	09 f0       	breq	.+2      	; 0x3a6 <main+0x134>
     3a4:	d1 c1       	rjmp	.+930    	; 0x748 <main+0x4d6>
     3a6:	80 91 87 00 	lds	r24, 0x0087
     3aa:	90 91 88 00 	lds	r25, 0x0088
     3ae:	a0 91 89 00 	lds	r26, 0x0089
     3b2:	b0 91 8a 00 	lds	r27, 0x008A
     3b6:	87 55       	subi	r24, 0x57	; 87
     3b8:	91 44       	sbci	r25, 0x41	; 65
     3ba:	a6 45       	sbci	r26, 0x56	; 86
     3bc:	b5 44       	sbci	r27, 0x45	; 69
     3be:	09 f0       	breq	.+2      	; 0x3c2 <main+0x150>
     3c0:	c3 c1       	rjmp	.+902    	; 0x748 <main+0x4d6>
     3c2:	dd 24       	eor	r13, r13

	for (;;) {
		if (pf_read(Buff, 8, &rb)) return 2;		/* Get Chunk ID and size */
     3c4:	8f e7       	ldi	r24, 0x7F	; 127
     3c6:	90 e0       	ldi	r25, 0x00	; 0
     3c8:	68 e0       	ldi	r22, 0x08	; 8
     3ca:	70 e0       	ldi	r23, 0x00	; 0
     3cc:	4c e7       	ldi	r20, 0x7C	; 124
     3ce:	50 e0       	ldi	r21, 0x00	; 0
     3d0:	09 d7       	rcall	.+3602   	; 0x11e4 <pf_read>
     3d2:	89 2b       	or	r24, r25
     3d4:	09 f0       	breq	.+2      	; 0x3d8 <main+0x166>
     3d6:	b2 c1       	rjmp	.+868    	; 0x73c <main+0x4ca>
		if (rb != 8) return 4;
     3d8:	80 91 7c 00 	lds	r24, 0x007C
     3dc:	90 91 7d 00 	lds	r25, 0x007D
     3e0:	08 97       	sbiw	r24, 0x08	; 8
     3e2:	09 f0       	breq	.+2      	; 0x3e6 <main+0x174>
     3e4:	b1 c1       	rjmp	.+866    	; 0x748 <main+0x4d6>
		sz = LD_DWORD(&Buff[4]);		/* Chunk size */
     3e6:	e0 90 83 00 	lds	r14, 0x0083
     3ea:	f0 90 84 00 	lds	r15, 0x0084
     3ee:	00 91 85 00 	lds	r16, 0x0085
     3f2:	10 91 86 00 	lds	r17, 0x0086

		switch (LD_DWORD(&Buff[0])) {	/* Switch by chunk type */
     3f6:	80 91 7f 00 	lds	r24, 0x007F
     3fa:	90 91 80 00 	lds	r25, 0x0080
     3fe:	a0 91 81 00 	lds	r26, 0x0081
     402:	b0 91 82 00 	lds	r27, 0x0082
     406:	8c 34       	cpi	r24, 0x4C	; 76
     408:	69 e4       	ldi	r22, 0x49	; 73
     40a:	96 07       	cpc	r25, r22
     40c:	63 e5       	ldi	r22, 0x53	; 83
     40e:	a6 07       	cpc	r26, r22
     410:	64 e5       	ldi	r22, 0x54	; 84
     412:	b6 07       	cpc	r27, r22
     414:	09 f4       	brne	.+2      	; 0x418 <main+0x1a6>
     416:	b4 c0       	rjmp	.+360    	; 0x580 <main+0x30e>
     418:	8d 34       	cpi	r24, 0x4D	; 77
     41a:	29 e4       	ldi	r18, 0x49	; 73
     41c:	92 07       	cpc	r25, r18
     41e:	23 e5       	ldi	r18, 0x53	; 83
     420:	a2 07       	cpc	r26, r18
     422:	24 e5       	ldi	r18, 0x54	; 84
     424:	b2 07       	cpc	r27, r18
     426:	78 f4       	brcc	.+30     	; 0x446 <main+0x1d4>
     428:	86 36       	cpi	r24, 0x66	; 102
     42a:	6d e6       	ldi	r22, 0x6D	; 109
     42c:	96 07       	cpc	r25, r22
     42e:	64 e7       	ldi	r22, 0x74	; 116
     430:	a6 07       	cpc	r26, r22
     432:	60 e2       	ldi	r22, 0x20	; 32
     434:	b6 07       	cpc	r27, r22
     436:	b9 f0       	breq	.+46     	; 0x466 <main+0x1f4>
     438:	84 54       	subi	r24, 0x44	; 68
     43a:	99 44       	sbci	r25, 0x49	; 73
     43c:	a3 45       	sbci	r26, 0x53	; 83
     43e:	b0 45       	sbci	r27, 0x50	; 80
     440:	09 f0       	breq	.+2      	; 0x444 <main+0x1d2>
     442:	82 c1       	rjmp	.+772    	; 0x748 <main+0x4d6>
     444:	9d c0       	rjmp	.+314    	; 0x580 <main+0x30e>
     446:	84 36       	cpi	r24, 0x64	; 100
     448:	61 e6       	ldi	r22, 0x61	; 97
     44a:	96 07       	cpc	r25, r22
     44c:	64 e7       	ldi	r22, 0x74	; 116
     44e:	a6 07       	cpc	r26, r22
     450:	61 e6       	ldi	r22, 0x61	; 97
     452:	b6 07       	cpc	r27, r22
     454:	09 f4       	brne	.+2      	; 0x458 <main+0x1e6>
     456:	61 c0       	rjmp	.+194    	; 0x51a <main+0x2a8>
     458:	86 56       	subi	r24, 0x66	; 102
     45a:	91 46       	sbci	r25, 0x61	; 97
     45c:	a3 46       	sbci	r26, 0x63	; 99
     45e:	b4 47       	sbci	r27, 0x74	; 116
     460:	09 f0       	breq	.+2      	; 0x464 <main+0x1f2>
     462:	72 c1       	rjmp	.+740    	; 0x748 <main+0x4d6>
     464:	8d c0       	rjmp	.+282    	; 0x580 <main+0x30e>
		case FCC('f','m','t',' ') :		/* 'fmt ' chunk */
			if (sz & 1) sz++;
     466:	c7 01       	movw	r24, r14
     468:	81 70       	andi	r24, 0x01	; 1
     46a:	90 70       	andi	r25, 0x00	; 0
     46c:	89 2b       	or	r24, r25
     46e:	29 f0       	breq	.+10     	; 0x47a <main+0x208>
     470:	08 94       	sec
     472:	e1 1c       	adc	r14, r1
     474:	f1 1c       	adc	r15, r1
     476:	01 1d       	adc	r16, r1
     478:	11 1d       	adc	r17, r1
			if (sz > 128 || sz < 16) return 4;		/* Check chunk size */
     47a:	d8 01       	movw	r26, r16
     47c:	c7 01       	movw	r24, r14
     47e:	40 97       	sbiw	r24, 0x10	; 16
     480:	a1 09       	sbc	r26, r1
     482:	b1 09       	sbc	r27, r1
     484:	81 37       	cpi	r24, 0x71	; 113
     486:	91 05       	cpc	r25, r1
     488:	a1 05       	cpc	r26, r1
     48a:	b1 05       	cpc	r27, r1
     48c:	08 f0       	brcs	.+2      	; 0x490 <main+0x21e>
     48e:	5c c1       	rjmp	.+696    	; 0x748 <main+0x4d6>
			if (pf_read(Buff, sz, &rb)) return 2;	/* Get the chunk content */
     490:	8f e7       	ldi	r24, 0x7F	; 127
     492:	90 e0       	ldi	r25, 0x00	; 0
     494:	b7 01       	movw	r22, r14
     496:	4c e7       	ldi	r20, 0x7C	; 124
     498:	50 e0       	ldi	r21, 0x00	; 0
     49a:	a4 d6       	rcall	.+3400   	; 0x11e4 <pf_read>
     49c:	89 2b       	or	r24, r25
     49e:	09 f0       	breq	.+2      	; 0x4a2 <main+0x230>
     4a0:	4d c1       	rjmp	.+666    	; 0x73c <main+0x4ca>
			if (rb != sz) return 4;
     4a2:	80 91 7c 00 	lds	r24, 0x007C
     4a6:	90 91 7d 00 	lds	r25, 0x007D
     4aa:	a0 e0       	ldi	r26, 0x00	; 0
     4ac:	b0 e0       	ldi	r27, 0x00	; 0
     4ae:	8e 15       	cp	r24, r14
     4b0:	9f 05       	cpc	r25, r15
     4b2:	a0 07       	cpc	r26, r16
     4b4:	b1 07       	cpc	r27, r17
     4b6:	09 f0       	breq	.+2      	; 0x4ba <main+0x248>
     4b8:	47 c1       	rjmp	.+654    	; 0x748 <main+0x4d6>
			if (Buff[0] != 1) return 4;				/* Check coding type (1: LPCM) */
     4ba:	80 91 7f 00 	lds	r24, 0x007F
     4be:	81 30       	cpi	r24, 0x01	; 1
     4c0:	09 f0       	breq	.+2      	; 0x4c4 <main+0x252>
     4c2:	42 c1       	rjmp	.+644    	; 0x748 <main+0x4d6>
			b = Buff[2];
     4c4:	d0 90 81 00 	lds	r13, 0x0081
			if (b < 1 && b > 2) return 4; 			/* Check channels (1/2: Mono/Stereo) */
			GPIOR0 = al = b;						/* Save channel flag */
     4c8:	da b8       	out	0x0a, r13	; 10
			b = Buff[14];
     4ca:	90 91 8d 00 	lds	r25, 0x008D
			if (b != 8 && b != 16) return 4;		/* Check resolution (8/16 bit) */
     4ce:	98 30       	cpi	r25, 0x08	; 8
     4d0:	19 f0       	breq	.+6      	; 0x4d8 <main+0x266>
     4d2:	90 31       	cpi	r25, 0x10	; 16
     4d4:	09 f0       	breq	.+2      	; 0x4d8 <main+0x266>
     4d6:	38 c1       	rjmp	.+624    	; 0x748 <main+0x4d6>
			GPIOR0 |= b;							/* Save resolution flag */
     4d8:	8a b1       	in	r24, 0x0a	; 10
     4da:	89 2b       	or	r24, r25
     4dc:	8a b9       	out	0x0a, r24	; 10
			if (b & 16) al <<= 1;
     4de:	94 fd       	sbrc	r25, 4
     4e0:	dd 0c       	add	r13, r13
			f = LD_DWORD(&Buff[4]);					/* Check sampling freqency (8k-48k) */
     4e2:	20 91 83 00 	lds	r18, 0x0083
     4e6:	30 91 84 00 	lds	r19, 0x0084
     4ea:	40 91 85 00 	lds	r20, 0x0085
     4ee:	50 91 86 00 	lds	r21, 0x0086
			if (f < 8000 || f > 48000) return 4;
     4f2:	da 01       	movw	r26, r20
     4f4:	c9 01       	movw	r24, r18
     4f6:	80 54       	subi	r24, 0x40	; 64
     4f8:	9f 41       	sbci	r25, 0x1F	; 31
     4fa:	a0 40       	sbci	r26, 0x00	; 0
     4fc:	b0 40       	sbci	r27, 0x00	; 0
     4fe:	81 54       	subi	r24, 0x41	; 65
     500:	9c 49       	sbci	r25, 0x9C	; 156
     502:	a0 40       	sbci	r26, 0x00	; 0
     504:	b0 40       	sbci	r27, 0x00	; 0
     506:	08 f0       	brcs	.+2      	; 0x50a <main+0x298>
     508:	1f c1       	rjmp	.+574    	; 0x748 <main+0x4d6>
			OCR0A = (BYTE)(16000000UL/8/f) - 1;		/* Set interval timer (sampling period) */
     50a:	60 e8       	ldi	r22, 0x80	; 128
     50c:	74 e8       	ldi	r23, 0x84	; 132
     50e:	8e e1       	ldi	r24, 0x1E	; 30
     510:	90 e0       	ldi	r25, 0x00	; 0
     512:	c5 d9       	rcall	.-3190   	; 0xfffff89e <__eeprom_end+0xff7ef89e>
     514:	21 50       	subi	r18, 0x01	; 1
     516:	23 bb       	out	0x13, r18	; 19
     518:	55 cf       	rjmp	.-342    	; 0x3c4 <main+0x152>
			break;

		case FCC('d','a','t','a') :		/* 'data' chunk (start to play) */
			if (!al) return 4;							/* Check if format valid */
     51a:	dd 20       	and	r13, r13
     51c:	09 f4       	brne	.+2      	; 0x520 <main+0x2ae>
     51e:	14 c1       	rjmp	.+552    	; 0x748 <main+0x4d6>
			if (sz < 1024 || (sz & (al - 1))) return 4;	/* Check size */
     520:	80 e0       	ldi	r24, 0x00	; 0
     522:	e8 16       	cp	r14, r24
     524:	84 e0       	ldi	r24, 0x04	; 4
     526:	f8 06       	cpc	r15, r24
     528:	80 e0       	ldi	r24, 0x00	; 0
     52a:	08 07       	cpc	r16, r24
     52c:	80 e0       	ldi	r24, 0x00	; 0
     52e:	18 07       	cpc	r17, r24
     530:	08 f4       	brcc	.+2      	; 0x534 <main+0x2c2>
     532:	0a c1       	rjmp	.+532    	; 0x748 <main+0x4d6>
     534:	8d 2d       	mov	r24, r13
     536:	90 e0       	ldi	r25, 0x00	; 0
     538:	01 97       	sbiw	r24, 0x01	; 1
     53a:	9c 01       	movw	r18, r24
     53c:	44 27       	eor	r20, r20
     53e:	37 fd       	sbrc	r19, 7
     540:	40 95       	com	r20
     542:	54 2f       	mov	r21, r20
     544:	da 01       	movw	r26, r20
     546:	c9 01       	movw	r24, r18
     548:	8e 21       	and	r24, r14
     54a:	9f 21       	and	r25, r15
     54c:	a0 23       	and	r26, r16
     54e:	b1 23       	and	r27, r17
     550:	00 97       	sbiw	r24, 0x00	; 0
     552:	a1 05       	cpc	r26, r1
     554:	b1 05       	cpc	r27, r1
     556:	09 f0       	breq	.+2      	; 0x55a <main+0x2e8>
     558:	f7 c0       	rjmp	.+494    	; 0x748 <main+0x4d6>
			if (Fs.fptr & (al - 1)) return 4;			/* Check offset */
     55a:	80 91 a7 01 	lds	r24, 0x01A7
     55e:	90 91 a8 01 	lds	r25, 0x01A8
     562:	a0 91 a9 01 	lds	r26, 0x01A9
     566:	b0 91 aa 01 	lds	r27, 0x01AA
     56a:	28 23       	and	r18, r24
     56c:	39 23       	and	r19, r25
     56e:	4a 23       	and	r20, r26
     570:	5b 23       	and	r21, r27
     572:	21 15       	cp	r18, r1
     574:	31 05       	cpc	r19, r1
     576:	41 05       	cpc	r20, r1
     578:	51 05       	cpc	r21, r1
     57a:	09 f0       	breq	.+2      	; 0x57e <main+0x30c>
     57c:	e5 c0       	rjmp	.+458    	; 0x748 <main+0x4d6>
     57e:	1d c0       	rjmp	.+58     	; 0x5ba <main+0x348>
			return sz;

		case FCC('D','I','S','P') :		/* 'DISP' chunk (skip) */
		case FCC('f','a','c','t') :		/* 'fact' chunk (skip) */
		case FCC('L','I','S','T') :		/* 'LIST' chunk (skip) */
			if (sz & 1) sz++;
     580:	c7 01       	movw	r24, r14
     582:	81 70       	andi	r24, 0x01	; 1
     584:	90 70       	andi	r25, 0x00	; 0
     586:	89 2b       	or	r24, r25
     588:	29 f0       	breq	.+10     	; 0x594 <main+0x322>
     58a:	08 94       	sec
     58c:	e1 1c       	adc	r14, r1
     58e:	f1 1c       	adc	r15, r1
     590:	01 1d       	adc	r16, r1
     592:	11 1d       	adc	r17, r1
			if (pf_lseek(Fs.fptr + sz)) return 2;
     594:	80 91 a7 01 	lds	r24, 0x01A7
     598:	90 91 a8 01 	lds	r25, 0x01A8
     59c:	a0 91 a9 01 	lds	r26, 0x01A9
     5a0:	b0 91 aa 01 	lds	r27, 0x01AA
     5a4:	e8 0e       	add	r14, r24
     5a6:	f9 1e       	adc	r15, r25
     5a8:	0a 1f       	adc	r16, r26
     5aa:	1b 1f       	adc	r17, r27
     5ac:	c8 01       	movw	r24, r16
     5ae:	b7 01       	movw	r22, r14
     5b0:	c1 d2       	rcall	.+1410   	; 0xb34 <pf_lseek>
     5b2:	89 2b       	or	r24, r25
     5b4:	09 f4       	brne	.+2      	; 0x5b8 <main+0x346>
     5b6:	06 cf       	rjmp	.-500    	; 0x3c4 <main+0x152>
     5b8:	c1 c0       	rjmp	.+386    	; 0x73c <main+0x4ca>
	if (res == FR_NO_FILE) return 3;
	if (res != FR_OK) return 2;

	/* Get file parameters */
	sz = load_header();
	if (sz <= 4) return (BYTE)sz;	/* Invalid format */
     5ba:	25 e0       	ldi	r18, 0x05	; 5
     5bc:	e2 16       	cp	r14, r18
     5be:	f1 04       	cpc	r15, r1
     5c0:	01 05       	cpc	r16, r1
     5c2:	11 05       	cpc	r17, r1
     5c4:	10 f4       	brcc	.+4      	; 0x5ca <main+0x358>
     5c6:	1e 2d       	mov	r17, r14
     5c8:	a7 c0       	rjmp	.+334    	; 0x718 <main+0x4a6>
	spa = Fs.fptr; sza = sz;		/* Save offset and size of audio data */
     5ca:	40 90 a7 01 	lds	r4, 0x01A7
     5ce:	50 90 a8 01 	lds	r5, 0x01A8
     5d2:	60 90 a9 01 	lds	r6, 0x01A9
     5d6:	70 90 aa 01 	lds	r7, 0x01AA

	LED_ON();
     5da:	c2 9a       	sbi	0x18, 2	; 24


static
void audio_on (void)	/* Enable audio output functions */
{
	if (!TCCR0B) {
     5dc:	83 b7       	in	r24, 0x33	; 51
     5de:	88 23       	and	r24, r24
     5e0:	99 f4       	brne	.+38     	; 0x608 <main+0x396>
		FifoCt = 0; FifoRi = 0; FifoWi = 0;		/* Reset audio FIFO */
     5e2:	10 92 90 01 	sts	0x0190, r1
     5e6:	10 92 65 00 	sts	0x0065, r1
     5ea:	10 92 64 00 	sts	0x0064, r1
		PLLCSR = 0b00000110;	/* Select PLL clock for TC1.ck */
     5ee:	66 e0       	ldi	r22, 0x06	; 6
     5f0:	69 bd       	out	0x29, r22	; 41
		TCCR1A = 0b10100011;	/* Start TC1 with OC1A/OC1B PWM enabled */
     5f2:	83 ea       	ldi	r24, 0xA3	; 163
     5f4:	80 bf       	out	0x30, r24	; 48
		TCCR1B = 0b00000001;
     5f6:	2f bc       	out	0x2f, r2	; 47
		ramp(1);				/* Ramp-up to center level */
     5f8:	81 e0       	ldi	r24, 0x01	; 1
     5fa:	90 e0       	ldi	r25, 0x00	; 0
     5fc:	17 de       	rcall	.-978    	; 0x22c <ramp>
		TCCR0A = 0b00000001;	/* Enable TC0.ck = 2MHz as interval timer */
     5fe:	25 ba       	out	0x15, r2	; 21
		TCCR0B = 0b00000010;
     600:	22 e0       	ldi	r18, 0x02	; 2
     602:	23 bf       	out	0x33, r18	; 51
		TIMSK = _BV(OCIE0A);
     604:	80 e1       	ldi	r24, 0x10	; 16
     606:	89 bf       	out	0x39, r24	; 57

	LED_ON();
	audio_on();		/* Enable audio output */

	for (;;) {
		if (pf_read(0, 512 - (Fs.fptr % 512), &rb) != FR_OK) {		/* Snip sector unaligned part */
     608:	80 91 a7 01 	lds	r24, 0x01A7
     60c:	90 91 a8 01 	lds	r25, 0x01A8
     610:	91 70       	andi	r25, 0x01	; 1
     612:	60 e0       	ldi	r22, 0x00	; 0
     614:	72 e0       	ldi	r23, 0x02	; 2
     616:	68 1b       	sub	r22, r24
     618:	79 0b       	sbc	r23, r25
     61a:	80 e0       	ldi	r24, 0x00	; 0
     61c:	90 e0       	ldi	r25, 0x00	; 0
     61e:	4c e7       	ldi	r20, 0x7C	; 124
     620:	50 e0       	ldi	r21, 0x00	; 0
     622:	e0 d5       	rcall	.+3008   	; 0x11e4 <pf_read>
     624:	89 2b       	or	r24, r25
     626:	09 f0       	breq	.+2      	; 0x62a <main+0x3b8>
     628:	6a c0       	rjmp	.+212    	; 0x6fe <main+0x48c>
			rc = 2; break;
		}
		sz -= rb;
     62a:	80 91 7c 00 	lds	r24, 0x007C
     62e:	90 91 7d 00 	lds	r25, 0x007D
     632:	a0 e0       	ldi	r26, 0x00	; 0
     634:	b0 e0       	ldi	r27, 0x00	; 0
     636:	57 01       	movw	r10, r14
     638:	68 01       	movw	r12, r16
     63a:	a8 1a       	sub	r10, r24
     63c:	b9 0a       	sbc	r11, r25
     63e:	ca 0a       	sbc	r12, r26
     640:	db 0a       	sbc	r13, r27
		do {
			/* Forward a bunch of the audio data to the FIFO */
			btr = (sz > 1024) ? 1024 : (WORD)sz;
     642:	61 e0       	ldi	r22, 0x01	; 1
     644:	a6 16       	cp	r10, r22
     646:	64 e0       	ldi	r22, 0x04	; 4
     648:	b6 06       	cpc	r11, r22
     64a:	60 e0       	ldi	r22, 0x00	; 0
     64c:	c6 06       	cpc	r12, r22
     64e:	60 e0       	ldi	r22, 0x00	; 0
     650:	d6 06       	cpc	r13, r22
     652:	18 f0       	brcs	.+6      	; 0x65a <main+0x3e8>
     654:	c0 e0       	ldi	r28, 0x00	; 0
     656:	d4 e0       	ldi	r29, 0x04	; 4
     658:	01 c0       	rjmp	.+2      	; 0x65c <main+0x3ea>
     65a:	e5 01       	movw	r28, r10
			pf_read(0, btr, &rb);
     65c:	80 e0       	ldi	r24, 0x00	; 0
     65e:	90 e0       	ldi	r25, 0x00	; 0
     660:	be 01       	movw	r22, r28
     662:	4c e7       	ldi	r20, 0x7C	; 124
     664:	50 e0       	ldi	r21, 0x00	; 0
     666:	be d5       	rcall	.+2940   	; 0x11e4 <pf_read>
			if (btr != rb) {
     668:	80 90 7c 00 	lds	r8, 0x007C
     66c:	90 90 7d 00 	lds	r9, 0x007D
     670:	c8 15       	cp	r28, r8
     672:	d9 05       	cpc	r29, r9
     674:	09 f0       	breq	.+2      	; 0x678 <main+0x406>
     676:	43 c0       	rjmp	.+134    	; 0x6fe <main+0x48c>
			}
			sz -= rb;

			/* Check input code change */
			rc = 0;
			if (chk_input()) {
     678:	ac dd       	rcall	.-1192   	; 0x1d2 <chk_input>
     67a:	88 23       	and	r24, r24
     67c:	29 f1       	breq	.+74     	; 0x6c8 <main+0x456>
				switch (InMode) {
     67e:	80 91 7e 00 	lds	r24, 0x007E
     682:	82 30       	cpi	r24, 0x02	; 2
     684:	a9 f0       	breq	.+42     	; 0x6b0 <main+0x43e>
     686:	83 30       	cpi	r24, 0x03	; 3
     688:	28 f4       	brcc	.+10     	; 0x694 <main+0x422>
     68a:	88 23       	and	r24, r24
     68c:	c9 f0       	breq	.+50     	; 0x6c0 <main+0x44e>
     68e:	81 30       	cpi	r24, 0x01	; 1
     690:	d9 f4       	brne	.+54     	; 0x6c8 <main+0x456>
     692:	11 c0       	rjmp	.+34     	; 0x6b6 <main+0x444>
     694:	83 30       	cpi	r24, 0x03	; 3
     696:	39 f0       	breq	.+14     	; 0x6a6 <main+0x434>
     698:	84 30       	cpi	r24, 0x04	; 4
     69a:	b1 f4       	brne	.+44     	; 0x6c8 <main+0x456>
				case 4:		/* Mode 4: Edge triggered (one-shot) */
					if (!Cmd) rc = 1;
     69c:	80 91 8f 01 	lds	r24, 0x018F
     6a0:	88 23       	and	r24, r24
     6a2:	79 f1       	breq	.+94     	; 0x702 <main+0x490>
     6a4:	11 c0       	rjmp	.+34     	; 0x6c8 <main+0x456>
					break;
				case 3: 	/* Mode 3: Edge triggered (retriggerable) */
					if (Cmd) rc = 1;	/* Restart by a code change but zero */
     6a6:	80 91 8f 01 	lds	r24, 0x018F
     6aa:	88 23       	and	r24, r24
     6ac:	51 f5       	brne	.+84     	; 0x702 <main+0x490>
     6ae:	0c c0       	rjmp	.+24     	; 0x6c8 <main+0x456>
					break;
				case 2:		/* Mode 2: Edge triggered */
					Cmd = 0;			/* Ignore code changes while playing */
     6b0:	10 92 8f 01 	sts	0x018F, r1
     6b4:	09 c0       	rjmp	.+18     	; 0x6c8 <main+0x456>
					break;
				case 1:		/* Mode 1: Level triggered (sustained to end of the file) */
					if (Cmd && Cmd != fn) rc = 1;	/* Restart by a code change but zero */
     6b6:	80 91 8f 01 	lds	r24, 0x018F
     6ba:	88 23       	and	r24, r24
     6bc:	29 f0       	breq	.+10     	; 0x6c8 <main+0x456>
     6be:	02 c0       	rjmp	.+4      	; 0x6c4 <main+0x452>
					break;
				case 0:	/* Mode 0: Level triggered */
					if (Cmd != fn) rc = 1;	/* Restart by a code change */
     6c0:	80 91 8f 01 	lds	r24, 0x018F
     6c4:	83 15       	cp	r24, r3
     6c6:	e9 f4       	brne	.+58     	; 0x702 <main+0x490>
				}
			}
		} while (!rc && rb == 1024);	/* Repeat until all data read or code change */
     6c8:	80 91 7c 00 	lds	r24, 0x007C
     6cc:	90 91 7d 00 	lds	r25, 0x007D
     6d0:	80 50       	subi	r24, 0x00	; 0
     6d2:	94 40       	sbci	r25, 0x04	; 4
     6d4:	21 f4       	brne	.+8      	; 0x6de <main+0x46c>
			btr = (sz > 1024) ? 1024 : (WORD)sz;
			pf_read(0, btr, &rb);
			if (btr != rb) {
				rc = 2; break;
			}
			sz -= rb;
     6d6:	c4 01       	movw	r24, r8
     6d8:	a0 e0       	ldi	r26, 0x00	; 0
     6da:	b0 e0       	ldi	r27, 0x00	; 0
     6dc:	ae cf       	rjmp	.-164    	; 0x63a <main+0x3c8>
					if (Cmd != fn) rc = 1;	/* Restart by a code change */
				}
			}
		} while (!rc && rb == 1024);	/* Repeat until all data read or code change */

		if (rc || !Cmd || InMode >= 2) break;
     6de:	80 91 8f 01 	lds	r24, 0x018F
     6e2:	88 23       	and	r24, r24
     6e4:	81 f0       	breq	.+32     	; 0x706 <main+0x494>
     6e6:	80 91 7e 00 	lds	r24, 0x007E
     6ea:	82 30       	cpi	r24, 0x02	; 2
     6ec:	60 f4       	brcc	.+24     	; 0x706 <main+0x494>
		if (pf_lseek(spa) != FR_OK) {	/* Return top of audio data */
     6ee:	c3 01       	movw	r24, r6
     6f0:	b2 01       	movw	r22, r4
     6f2:	20 d2       	rcall	.+1088   	; 0xb34 <pf_lseek>
     6f4:	89 2b       	or	r24, r25
     6f6:	09 f4       	brne	.+2      	; 0x6fa <main+0x488>
     6f8:	87 cf       	rjmp	.-242    	; 0x608 <main+0x396>
     6fa:	13 e0       	ldi	r17, 0x03	; 3
     6fc:	05 c0       	rjmp	.+10     	; 0x708 <main+0x496>
     6fe:	12 e0       	ldi	r17, 0x02	; 2
     700:	03 c0       	rjmp	.+6      	; 0x708 <main+0x496>
     702:	11 e0       	ldi	r17, 0x01	; 1
     704:	01 c0       	rjmp	.+2      	; 0x708 <main+0x496>
     706:	10 e0       	ldi	r17, 0x00	; 0
			rc = 3; break;
		}
		sz = sza;
	}

	while (FifoCt) ;			/* Wait for audio FIFO empty */
     708:	80 91 90 01 	lds	r24, 0x0190
     70c:	88 23       	and	r24, r24
     70e:	e1 f7       	brne	.-8      	; 0x708 <main+0x496>
	OCR1A = 0x80; OCR1B = 0x80;	/* Return DAC out to center */
     710:	60 e8       	ldi	r22, 0x80	; 128
     712:	6d bd       	out	0x2d, r22	; 45
     714:	6c bd       	out	0x2c, r22	; 44

	LED_OFF();
     716:	c2 98       	cbi	0x18, 2	; 24

			/* Main loop */
			do {
				wait_status();				/* Wait for any valid code */
				rc = play(Cmd);				/* Play corresponding audio file */
				if (rc >= 2) led_sign(rc);	/* Display if any error occured */
     718:	12 30       	cpi	r17, 0x02	; 2
     71a:	18 f0       	brcs	.+6      	; 0x722 <main+0x4b0>
     71c:	81 2f       	mov	r24, r17
     71e:	75 dd       	rcall	.-1302   	; 0x20a <led_sign>
     720:	04 c0       	rjmp	.+8      	; 0x72a <main+0x4b8>
				if (rc != 1) Cmd = 0;		/* Clear code when normal end or error */
     722:	11 30       	cpi	r17, 0x01	; 1
     724:	09 f4       	brne	.+2      	; 0x728 <main+0x4b6>
     726:	dc cd       	rjmp	.-1096   	; 0x2e0 <main+0x6e>
     728:	10 e0       	ldi	r17, 0x00	; 0
     72a:	10 92 8f 01 	sts	0x018F, r1
			} while (rc != 2);				/* Continue while no disk error */
     72e:	12 30       	cpi	r17, 0x02	; 2
     730:	09 f0       	breq	.+2      	; 0x734 <main+0x4c2>
     732:	d6 cd       	rjmp	.-1108   	; 0x2e0 <main+0x6e>

			audio_off();	/* Disable audio output */
     734:	94 dd       	rcall	.-1240   	; 0x25e <audio_off>
		}
		led_sign(2);	/* Disk error or Media mount failed */
     736:	82 e0       	ldi	r24, 0x02	; 2
     738:	68 dd       	rcall	.-1328   	; 0x20a <led_sign>
     73a:	b4 cd       	rjmp	.-1176   	; 0x2a4 <main+0x32>
	}
     73c:	92 e0       	ldi	r25, 0x02	; 2
     73e:	e9 2e       	mov	r14, r25
     740:	f1 2c       	mov	r15, r1
     742:	01 2d       	mov	r16, r1
     744:	11 2d       	mov	r17, r1
     746:	3f cf       	rjmp	.-386    	; 0x5c6 <main+0x354>
     748:	84 e0       	ldi	r24, 0x04	; 4
     74a:	e8 2e       	mov	r14, r24
     74c:	f1 2c       	mov	r15, r1
     74e:	01 2d       	mov	r16, r1
     750:	11 2d       	mov	r17, r1
     752:	39 cf       	rjmp	.-398    	; 0x5c6 <main+0x354>
     754:	12 e0       	ldi	r17, 0x02	; 2
     756:	e2 cf       	rjmp	.-60     	; 0x71c <main+0x4aa>

00000758 <dir_rewind>:

static
FRESULT dir_rewind (
	DIR *dj			/* Pointer to directory object */
)
{
     758:	a0 e0       	ldi	r26, 0x00	; 0
     75a:	b0 e0       	ldi	r27, 0x00	; 0
     75c:	e1 eb       	ldi	r30, 0xB1	; 177
     75e:	f3 e0       	ldi	r31, 0x03	; 3
     760:	ca c8       	rjmp	.-3692   	; 0xfffff8f6 <__eeprom_end+0xff7ef8f6>
     762:	6c 01       	movw	r12, r24
	CLUST clst;
	FATFS *fs = FatFs;
     764:	c0 91 62 00 	lds	r28, 0x0062
     768:	d0 91 63 00 	lds	r29, 0x0063


	dj->index = 0;
     76c:	fc 01       	movw	r30, r24
     76e:	11 82       	std	Z+1, r1	; 0x01
     770:	10 82       	st	Z, r1
	clst = dj->sclust;
     772:	24 81       	ldd	r18, Z+4	; 0x04
     774:	35 81       	ldd	r19, Z+5	; 0x05
     776:	46 81       	ldd	r20, Z+6	; 0x06
     778:	57 81       	ldd	r21, Z+7	; 0x07
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
     77a:	21 30       	cpi	r18, 0x01	; 1
     77c:	31 05       	cpc	r19, r1
     77e:	41 05       	cpc	r20, r1
     780:	51 05       	cpc	r21, r1
     782:	09 f4       	brne	.+2      	; 0x786 <dir_rewind+0x2e>
     784:	5b c0       	rjmp	.+182    	; 0x83c <dir_rewind+0xe4>
     786:	8e 81       	ldd	r24, Y+6	; 0x06
     788:	9f 81       	ldd	r25, Y+7	; 0x07
     78a:	a8 85       	ldd	r26, Y+8	; 0x08
     78c:	b9 85       	ldd	r27, Y+9	; 0x09
     78e:	28 17       	cp	r18, r24
     790:	39 07       	cpc	r19, r25
     792:	4a 07       	cpc	r20, r26
     794:	5b 07       	cpc	r21, r27
     796:	08 f0       	brcs	.+2      	; 0x79a <dir_rewind+0x42>
     798:	51 c0       	rjmp	.+162    	; 0x83c <dir_rewind+0xe4>
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
     79a:	21 15       	cp	r18, r1
     79c:	31 05       	cpc	r19, r1
     79e:	41 05       	cpc	r20, r1
     7a0:	51 05       	cpc	r21, r1
     7a2:	39 f4       	brne	.+14     	; 0x7b2 <dir_rewind+0x5a>
     7a4:	88 81       	ld	r24, Y
     7a6:	83 30       	cpi	r24, 0x03	; 3
     7a8:	21 f4       	brne	.+8      	; 0x7b2 <dir_rewind+0x5a>
		clst = (CLUST)fs->dirbase;
     7aa:	2e 85       	ldd	r18, Y+14	; 0x0e
     7ac:	3f 85       	ldd	r19, Y+15	; 0x0f
     7ae:	48 89       	ldd	r20, Y+16	; 0x10
     7b0:	59 89       	ldd	r21, Y+17	; 0x11
	dj->clust = clst;						/* Current cluster */
     7b2:	f6 01       	movw	r30, r12
     7b4:	20 87       	std	Z+8, r18	; 0x08
     7b6:	31 87       	std	Z+9, r19	; 0x09
     7b8:	42 87       	std	Z+10, r20	; 0x0a
     7ba:	53 87       	std	Z+11, r21	; 0x0b
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     7bc:	21 15       	cp	r18, r1
     7be:	31 05       	cpc	r19, r1
     7c0:	41 05       	cpc	r20, r1
     7c2:	51 05       	cpc	r21, r1
     7c4:	79 f1       	breq	.+94     	; 0x824 <dir_rewind+0xcc>
)
{
	FATFS *fs = FatFs;


	clst -= 2;
     7c6:	8e ef       	ldi	r24, 0xFE	; 254
     7c8:	e8 2e       	mov	r14, r24
     7ca:	8f ef       	ldi	r24, 0xFF	; 255
     7cc:	f8 2e       	mov	r15, r24
     7ce:	8f ef       	ldi	r24, 0xFF	; 255
     7d0:	08 2f       	mov	r16, r24
     7d2:	8f ef       	ldi	r24, 0xFF	; 255
     7d4:	18 2f       	mov	r17, r24
     7d6:	e2 0e       	add	r14, r18
     7d8:	f3 1e       	adc	r15, r19
     7da:	04 1f       	adc	r16, r20
     7dc:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     7de:	8e 81       	ldd	r24, Y+6	; 0x06
     7e0:	9f 81       	ldd	r25, Y+7	; 0x07
     7e2:	a8 85       	ldd	r26, Y+8	; 0x08
     7e4:	b9 85       	ldd	r27, Y+9	; 0x09
     7e6:	02 97       	sbiw	r24, 0x02	; 2
     7e8:	a1 09       	sbc	r26, r1
     7ea:	b1 09       	sbc	r27, r1
     7ec:	e8 16       	cp	r14, r24
     7ee:	f9 06       	cpc	r15, r25
     7f0:	0a 07       	cpc	r16, r26
     7f2:	1b 07       	cpc	r17, r27
     7f4:	28 f0       	brcs	.+10     	; 0x800 <dir_rewind+0xa8>
     7f6:	20 e0       	ldi	r18, 0x00	; 0
     7f8:	30 e0       	ldi	r19, 0x00	; 0
     7fa:	40 e0       	ldi	r20, 0x00	; 0
     7fc:	50 e0       	ldi	r21, 0x00	; 0
     7fe:	16 c0       	rjmp	.+44     	; 0x82c <dir_rewind+0xd4>
	return (DWORD)clst * fs->csize + fs->database;
     800:	2a 81       	ldd	r18, Y+2	; 0x02
     802:	30 e0       	ldi	r19, 0x00	; 0
     804:	40 e0       	ldi	r20, 0x00	; 0
     806:	50 e0       	ldi	r21, 0x00	; 0
     808:	c8 01       	movw	r24, r16
     80a:	b7 01       	movw	r22, r14
     80c:	23 d8       	rcall	.-4026   	; 0xfffff854 <__eeprom_end+0xff7ef854>
     80e:	9b 01       	movw	r18, r22
     810:	ac 01       	movw	r20, r24
     812:	8a 89       	ldd	r24, Y+18	; 0x12
     814:	9b 89       	ldd	r25, Y+19	; 0x13
     816:	ac 89       	ldd	r26, Y+20	; 0x14
     818:	bd 89       	ldd	r27, Y+21	; 0x15
     81a:	28 0f       	add	r18, r24
     81c:	39 1f       	adc	r19, r25
     81e:	4a 1f       	adc	r20, r26
     820:	5b 1f       	adc	r21, r27
     822:	04 c0       	rjmp	.+8      	; 0x82c <dir_rewind+0xd4>
	if (clst == 1 || clst >= fs->n_fatent)	/* Check start cluster range */
		return FR_DISK_ERR;
	if (_FS_FAT32 && !clst && fs->fs_type == FS_FAT32)	/* Replace cluster# 0 with root cluster# if in FAT32 */
		clst = (CLUST)fs->dirbase;
	dj->clust = clst;						/* Current cluster */
	dj->sect = clst ? clust2sect(clst) : fs->dirbase;	/* Current sector */
     824:	2e 85       	ldd	r18, Y+14	; 0x0e
     826:	3f 85       	ldd	r19, Y+15	; 0x0f
     828:	48 89       	ldd	r20, Y+16	; 0x10
     82a:	59 89       	ldd	r21, Y+17	; 0x11
     82c:	f6 01       	movw	r30, r12
     82e:	24 87       	std	Z+12, r18	; 0x0c
     830:	35 87       	std	Z+13, r19	; 0x0d
     832:	46 87       	std	Z+14, r20	; 0x0e
     834:	57 87       	std	Z+15, r21	; 0x0f
     836:	20 e0       	ldi	r18, 0x00	; 0
     838:	30 e0       	ldi	r19, 0x00	; 0
     83a:	02 c0       	rjmp	.+4      	; 0x840 <dir_rewind+0xe8>

	return FR_OK;	/* Seek succeeded */
     83c:	21 e0       	ldi	r18, 0x01	; 1
     83e:	30 e0       	ldi	r19, 0x00	; 0
}
     840:	c9 01       	movw	r24, r18
     842:	cd b7       	in	r28, 0x3d	; 61
     844:	de b7       	in	r29, 0x3e	; 62
     846:	e8 e0       	ldi	r30, 0x08	; 8
     848:	72 c8       	rjmp	.-3868   	; 0xfffff92e <__eeprom_end+0xff7ef92e>

0000084a <get_fat>:

static
CLUST get_fat (	/* 1:IO error, Else:Cluster status */
	CLUST clst	/* Cluster# to get the link information */
)
{
     84a:	a4 e0       	ldi	r26, 0x04	; 4
     84c:	b0 e0       	ldi	r27, 0x00	; 0
     84e:	ea e2       	ldi	r30, 0x2A	; 42
     850:	f4 e0       	ldi	r31, 0x04	; 4
     852:	4b c8       	rjmp	.-3946   	; 0xfffff8ea <__eeprom_end+0xff7ef8ea>
     854:	4b 01       	movw	r8, r22
     856:	5c 01       	movw	r10, r24
	WORD wc, bc, ofs;
	BYTE buf[4];
	FATFS *fs = FatFs;
     858:	60 90 62 00 	lds	r6, 0x0062
     85c:	70 90 63 00 	lds	r7, 0x0063


	if (clst < 2 || clst >= fs->n_fatent)	/* Range check */
     860:	82 e0       	ldi	r24, 0x02	; 2
     862:	88 16       	cp	r8, r24
     864:	91 04       	cpc	r9, r1
     866:	a1 04       	cpc	r10, r1
     868:	b1 04       	cpc	r11, r1
     86a:	08 f4       	brcc	.+2      	; 0x86e <get_fat+0x24>
     86c:	b0 c0       	rjmp	.+352    	; 0x9ce <get_fat+0x184>
     86e:	f3 01       	movw	r30, r6
     870:	86 81       	ldd	r24, Z+6	; 0x06
     872:	97 81       	ldd	r25, Z+7	; 0x07
     874:	a0 85       	ldd	r26, Z+8	; 0x08
     876:	b1 85       	ldd	r27, Z+9	; 0x09
     878:	88 16       	cp	r8, r24
     87a:	99 06       	cpc	r9, r25
     87c:	aa 06       	cpc	r10, r26
     87e:	bb 06       	cpc	r11, r27
     880:	08 f0       	brcs	.+2      	; 0x884 <get_fat+0x3a>
     882:	a5 c0       	rjmp	.+330    	; 0x9ce <get_fat+0x184>
		return 1;

	switch (fs->fs_type) {
     884:	80 81       	ld	r24, Z
     886:	82 30       	cpi	r24, 0x02	; 2
     888:	09 f4       	brne	.+2      	; 0x88c <get_fat+0x42>
     88a:	5d c0       	rjmp	.+186    	; 0x946 <get_fat+0xfc>
     88c:	83 30       	cpi	r24, 0x03	; 3
     88e:	09 f4       	brne	.+2      	; 0x892 <get_fat+0x48>
     890:	78 c0       	rjmp	.+240    	; 0x982 <get_fat+0x138>
     892:	81 30       	cpi	r24, 0x01	; 1
     894:	09 f0       	breq	.+2      	; 0x898 <get_fat+0x4e>
     896:	9b c0       	rjmp	.+310    	; 0x9ce <get_fat+0x184>
#if _FS_FAT12
	case FS_FAT12 :
		bc = (WORD)clst; bc += bc / 2;
     898:	c4 01       	movw	r24, r8
     89a:	96 95       	lsr	r25
     89c:	87 95       	ror	r24
     89e:	88 0d       	add	r24, r8
     8a0:	99 1d       	adc	r25, r9
		ofs = bc % 512; bc /= 512;
     8a2:	9c 01       	movw	r18, r24
     8a4:	31 70       	andi	r19, 0x01	; 1
     8a6:	89 2f       	mov	r24, r25
     8a8:	99 27       	eor	r25, r25
     8aa:	86 95       	lsr	r24
     8ac:	6c 01       	movw	r12, r24
     8ae:	ee 24       	eor	r14, r14
     8b0:	ff 24       	eor	r15, r15
     8b2:	f3 01       	movw	r30, r6
     8b4:	42 85       	ldd	r20, Z+10	; 0x0a
     8b6:	53 85       	ldd	r21, Z+11	; 0x0b
     8b8:	64 85       	ldd	r22, Z+12	; 0x0c
     8ba:	75 85       	ldd	r23, Z+13	; 0x0d
     8bc:	ce 01       	movw	r24, r28
     8be:	01 96       	adiw	r24, 0x01	; 1
		if (ofs != 511) {
     8c0:	f1 e0       	ldi	r31, 0x01	; 1
     8c2:	2f 3f       	cpi	r18, 0xFF	; 255
     8c4:	3f 07       	cpc	r19, r31
     8c6:	49 f0       	breq	.+18     	; 0x8da <get_fat+0x90>
			if (disk_readp(buf, fs->fatbase + bc, ofs, 2)) break;
     8c8:	c4 0e       	add	r12, r20
     8ca:	d5 1e       	adc	r13, r21
     8cc:	e6 1e       	adc	r14, r22
     8ce:	f7 1e       	adc	r15, r23
     8d0:	b7 01       	movw	r22, r14
     8d2:	a6 01       	movw	r20, r12
     8d4:	02 e0       	ldi	r16, 0x02	; 2
     8d6:	10 e0       	ldi	r17, 0x00	; 0
     8d8:	1d c0       	rjmp	.+58     	; 0x914 <get_fat+0xca>
		} else {
			if (disk_readp(buf, fs->fatbase + bc, 511, 1)) break;
     8da:	4c 0d       	add	r20, r12
     8dc:	5d 1d       	adc	r21, r13
     8de:	6e 1d       	adc	r22, r14
     8e0:	7f 1d       	adc	r23, r15
     8e2:	2f ef       	ldi	r18, 0xFF	; 255
     8e4:	31 e0       	ldi	r19, 0x01	; 1
     8e6:	01 e0       	ldi	r16, 0x01	; 1
     8e8:	10 e0       	ldi	r17, 0x00	; 0
     8ea:	e8 d6       	rcall	.+3536   	; 0x16bc <disk_readp>
     8ec:	89 2b       	or	r24, r25
     8ee:	09 f0       	breq	.+2      	; 0x8f2 <get_fat+0xa8>
     8f0:	6e c0       	rjmp	.+220    	; 0x9ce <get_fat+0x184>
			if (disk_readp(buf+1, fs->fatbase + bc + 1, 0, 1)) break;
     8f2:	f3 01       	movw	r30, r6
     8f4:	42 85       	ldd	r20, Z+10	; 0x0a
     8f6:	53 85       	ldd	r21, Z+11	; 0x0b
     8f8:	64 85       	ldd	r22, Z+12	; 0x0c
     8fa:	75 85       	ldd	r23, Z+13	; 0x0d
     8fc:	4f 5f       	subi	r20, 0xFF	; 255
     8fe:	5f 4f       	sbci	r21, 0xFF	; 255
     900:	6f 4f       	sbci	r22, 0xFF	; 255
     902:	7f 4f       	sbci	r23, 0xFF	; 255
     904:	4c 0d       	add	r20, r12
     906:	5d 1d       	adc	r21, r13
     908:	6e 1d       	adc	r22, r14
     90a:	7f 1d       	adc	r23, r15
     90c:	ce 01       	movw	r24, r28
     90e:	02 96       	adiw	r24, 0x02	; 2
     910:	20 e0       	ldi	r18, 0x00	; 0
     912:	30 e0       	ldi	r19, 0x00	; 0
     914:	d3 d6       	rcall	.+3494   	; 0x16bc <disk_readp>
     916:	89 2b       	or	r24, r25
     918:	09 f0       	breq	.+2      	; 0x91c <get_fat+0xd2>
     91a:	59 c0       	rjmp	.+178    	; 0x9ce <get_fat+0x184>
		}
		wc = LD_WORD(buf);
     91c:	69 81       	ldd	r22, Y+1	; 0x01
     91e:	7a 81       	ldd	r23, Y+2	; 0x02
		return (clst & 1) ? (wc >> 4) : (wc & 0xFFF);
     920:	c4 01       	movw	r24, r8
     922:	81 70       	andi	r24, 0x01	; 1
     924:	90 70       	andi	r25, 0x00	; 0
     926:	89 2b       	or	r24, r25
     928:	39 f0       	breq	.+14     	; 0x938 <get_fat+0xee>
     92a:	a4 e0       	ldi	r26, 0x04	; 4
     92c:	76 95       	lsr	r23
     92e:	67 95       	ror	r22
     930:	aa 95       	dec	r26
     932:	e1 f7       	brne	.-8      	; 0x92c <get_fat+0xe2>
     934:	9b 01       	movw	r18, r22
     936:	22 c0       	rjmp	.+68     	; 0x97c <get_fat+0x132>
     938:	9b 01       	movw	r18, r22
     93a:	40 e0       	ldi	r20, 0x00	; 0
     93c:	50 e0       	ldi	r21, 0x00	; 0
     93e:	3f 70       	andi	r19, 0x0F	; 15
     940:	40 70       	andi	r20, 0x00	; 0
     942:	50 70       	andi	r21, 0x00	; 0
     944:	48 c0       	rjmp	.+144    	; 0x9d6 <get_fat+0x18c>
#endif
	case FS_FAT16 :
		if (disk_readp(buf, fs->fatbase + clst / 256, (WORD)(((WORD)clst % 256) * 2), 2)) break;
     946:	77 27       	eor	r23, r23
     948:	6b 2d       	mov	r22, r11
     94a:	5a 2d       	mov	r21, r10
     94c:	49 2d       	mov	r20, r9
     94e:	f3 01       	movw	r30, r6
     950:	82 85       	ldd	r24, Z+10	; 0x0a
     952:	93 85       	ldd	r25, Z+11	; 0x0b
     954:	a4 85       	ldd	r26, Z+12	; 0x0c
     956:	b5 85       	ldd	r27, Z+13	; 0x0d
     958:	48 0f       	add	r20, r24
     95a:	59 1f       	adc	r21, r25
     95c:	6a 1f       	adc	r22, r26
     95e:	7b 1f       	adc	r23, r27
     960:	94 01       	movw	r18, r8
     962:	30 70       	andi	r19, 0x00	; 0
     964:	22 0f       	add	r18, r18
     966:	33 1f       	adc	r19, r19
     968:	ce 01       	movw	r24, r28
     96a:	01 96       	adiw	r24, 0x01	; 1
     96c:	02 e0       	ldi	r16, 0x02	; 2
     96e:	10 e0       	ldi	r17, 0x00	; 0
     970:	a5 d6       	rcall	.+3402   	; 0x16bc <disk_readp>
     972:	89 2b       	or	r24, r25
     974:	61 f5       	brne	.+88     	; 0x9ce <get_fat+0x184>
		return LD_WORD(buf);
     976:	89 81       	ldd	r24, Y+1	; 0x01
     978:	9a 81       	ldd	r25, Y+2	; 0x02
     97a:	9c 01       	movw	r18, r24
     97c:	40 e0       	ldi	r20, 0x00	; 0
     97e:	50 e0       	ldi	r21, 0x00	; 0
     980:	2a c0       	rjmp	.+84     	; 0x9d6 <get_fat+0x18c>
#if _FS_FAT32
	case FS_FAT32 :
		if (disk_readp(buf, fs->fatbase + clst / 128, (WORD)(((WORD)clst % 128) * 4), 4)) break;
     982:	b5 01       	movw	r22, r10
     984:	a4 01       	movw	r20, r8
     986:	27 e0       	ldi	r18, 0x07	; 7
     988:	76 95       	lsr	r23
     98a:	67 95       	ror	r22
     98c:	57 95       	ror	r21
     98e:	47 95       	ror	r20
     990:	2a 95       	dec	r18
     992:	d1 f7       	brne	.-12     	; 0x988 <get_fat+0x13e>
     994:	f3 01       	movw	r30, r6
     996:	82 85       	ldd	r24, Z+10	; 0x0a
     998:	93 85       	ldd	r25, Z+11	; 0x0b
     99a:	a4 85       	ldd	r26, Z+12	; 0x0c
     99c:	b5 85       	ldd	r27, Z+13	; 0x0d
     99e:	48 0f       	add	r20, r24
     9a0:	59 1f       	adc	r21, r25
     9a2:	6a 1f       	adc	r22, r26
     9a4:	7b 1f       	adc	r23, r27
     9a6:	94 01       	movw	r18, r8
     9a8:	2f 77       	andi	r18, 0x7F	; 127
     9aa:	30 70       	andi	r19, 0x00	; 0
     9ac:	22 0f       	add	r18, r18
     9ae:	33 1f       	adc	r19, r19
     9b0:	22 0f       	add	r18, r18
     9b2:	33 1f       	adc	r19, r19
     9b4:	ce 01       	movw	r24, r28
     9b6:	01 96       	adiw	r24, 0x01	; 1
     9b8:	04 e0       	ldi	r16, 0x04	; 4
     9ba:	10 e0       	ldi	r17, 0x00	; 0
     9bc:	7f d6       	rcall	.+3326   	; 0x16bc <disk_readp>
     9be:	89 2b       	or	r24, r25
     9c0:	31 f4       	brne	.+12     	; 0x9ce <get_fat+0x184>
		return LD_DWORD(buf) & 0x0FFFFFFF;
     9c2:	29 81       	ldd	r18, Y+1	; 0x01
     9c4:	3a 81       	ldd	r19, Y+2	; 0x02
     9c6:	4b 81       	ldd	r20, Y+3	; 0x03
     9c8:	5c 81       	ldd	r21, Y+4	; 0x04
     9ca:	5f 70       	andi	r21, 0x0F	; 15
     9cc:	04 c0       	rjmp	.+8      	; 0x9d6 <get_fat+0x18c>
     9ce:	21 e0       	ldi	r18, 0x01	; 1
     9d0:	30 e0       	ldi	r19, 0x00	; 0
     9d2:	40 e0       	ldi	r20, 0x00	; 0
     9d4:	50 e0       	ldi	r21, 0x00	; 0
#endif
	}

	return 1;	/* An error occured at the disk I/O layer */
}
     9d6:	b9 01       	movw	r22, r18
     9d8:	ca 01       	movw	r24, r20
     9da:	24 96       	adiw	r28, 0x04	; 4
     9dc:	ee e0       	ldi	r30, 0x0E	; 14
     9de:	a1 c7       	rjmp	.+3906   	; 0x1922 <__epilogue_restores__+0x8>

000009e0 <dir_next>:

static
FRESULT dir_next (	/* FR_OK:Succeeded, FR_NO_FILE:End of table */
	DIR *dj			/* Pointer to directory object */
)
{
     9e0:	a0 e0       	ldi	r26, 0x00	; 0
     9e2:	b0 e0       	ldi	r27, 0x00	; 0
     9e4:	e5 ef       	ldi	r30, 0xF5	; 245
     9e6:	f4 e0       	ldi	r31, 0x04	; 4
     9e8:	84 c7       	rjmp	.+3848   	; 0x18f2 <__prologue_saves__+0x10>
     9ea:	5c 01       	movw	r10, r24
	CLUST clst;
	WORD i;
	FATFS *fs = FatFs;
     9ec:	c0 91 62 00 	lds	r28, 0x0062
     9f0:	d0 91 63 00 	lds	r29, 0x0063


	i = dj->index + 1;
     9f4:	fc 01       	movw	r30, r24
     9f6:	c0 80       	ld	r12, Z
     9f8:	d1 80       	ldd	r13, Z+1	; 0x01
     9fa:	08 94       	sec
     9fc:	c1 1c       	adc	r12, r1
     9fe:	d1 1c       	adc	r13, r1
	if (!i || !dj->sect)	/* Report EOT when index has reached 65535 */
     a00:	c1 14       	cp	r12, r1
     a02:	d1 04       	cpc	r13, r1
     a04:	09 f4       	brne	.+2      	; 0xa08 <dir_next+0x28>
     a06:	8f c0       	rjmp	.+286    	; 0xb26 <dir_next+0x146>
     a08:	24 85       	ldd	r18, Z+12	; 0x0c
     a0a:	35 85       	ldd	r19, Z+13	; 0x0d
     a0c:	46 85       	ldd	r20, Z+14	; 0x0e
     a0e:	57 85       	ldd	r21, Z+15	; 0x0f
     a10:	21 15       	cp	r18, r1
     a12:	31 05       	cpc	r19, r1
     a14:	41 05       	cpc	r20, r1
     a16:	51 05       	cpc	r21, r1
     a18:	09 f4       	brne	.+2      	; 0xa1c <dir_next+0x3c>
     a1a:	85 c0       	rjmp	.+266    	; 0xb26 <dir_next+0x146>
		return FR_NO_FILE;

	if (!(i % 16)) {		/* Sector changed? */
     a1c:	c6 01       	movw	r24, r12
     a1e:	8f 70       	andi	r24, 0x0F	; 15
     a20:	90 70       	andi	r25, 0x00	; 0
     a22:	89 2b       	or	r24, r25
     a24:	09 f0       	breq	.+2      	; 0xa28 <dir_next+0x48>
     a26:	79 c0       	rjmp	.+242    	; 0xb1a <dir_next+0x13a>
		dj->sect++;			/* Next sector */
     a28:	2f 5f       	subi	r18, 0xFF	; 255
     a2a:	3f 4f       	sbci	r19, 0xFF	; 255
     a2c:	4f 4f       	sbci	r20, 0xFF	; 255
     a2e:	5f 4f       	sbci	r21, 0xFF	; 255
     a30:	24 87       	std	Z+12, r18	; 0x0c
     a32:	35 87       	std	Z+13, r19	; 0x0d
     a34:	46 87       	std	Z+14, r20	; 0x0e
     a36:	57 87       	std	Z+15, r21	; 0x0f

		if (dj->clust == 0) {	/* Static table */
     a38:	40 85       	ldd	r20, Z+8	; 0x08
     a3a:	51 85       	ldd	r21, Z+9	; 0x09
     a3c:	62 85       	ldd	r22, Z+10	; 0x0a
     a3e:	73 85       	ldd	r23, Z+11	; 0x0b
     a40:	41 15       	cp	r20, r1
     a42:	51 05       	cpc	r21, r1
     a44:	61 05       	cpc	r22, r1
     a46:	71 05       	cpc	r23, r1
     a48:	39 f4       	brne	.+14     	; 0xa58 <dir_next+0x78>
			if (i >= fs->n_rootdir)	/* Report EOT when end of table */
     a4a:	8c 81       	ldd	r24, Y+4	; 0x04
     a4c:	9d 81       	ldd	r25, Y+5	; 0x05
     a4e:	c8 16       	cp	r12, r24
     a50:	d9 06       	cpc	r13, r25
     a52:	08 f4       	brcc	.+2      	; 0xa56 <dir_next+0x76>
     a54:	62 c0       	rjmp	.+196    	; 0xb1a <dir_next+0x13a>
     a56:	67 c0       	rjmp	.+206    	; 0xb26 <dir_next+0x146>
				return FR_NO_FILE;
		}
		else {					/* Dynamic table */
			if (((i / 16) & (fs->csize-1)) == 0) {	/* Cluster changed? */
     a58:	8a 81       	ldd	r24, Y+2	; 0x02
     a5a:	90 e0       	ldi	r25, 0x00	; 0
     a5c:	01 97       	sbiw	r24, 0x01	; 1
     a5e:	96 01       	movw	r18, r12
     a60:	e4 e0       	ldi	r30, 0x04	; 4
     a62:	36 95       	lsr	r19
     a64:	27 95       	ror	r18
     a66:	ea 95       	dec	r30
     a68:	e1 f7       	brne	.-8      	; 0xa62 <dir_next+0x82>
     a6a:	82 23       	and	r24, r18
     a6c:	93 23       	and	r25, r19
     a6e:	89 2b       	or	r24, r25
     a70:	09 f0       	breq	.+2      	; 0xa74 <dir_next+0x94>
     a72:	53 c0       	rjmp	.+166    	; 0xb1a <dir_next+0x13a>
				clst = get_fat(dj->clust);		/* Get next cluster */
     a74:	cb 01       	movw	r24, r22
     a76:	ba 01       	movw	r22, r20
     a78:	e8 de       	rcall	.-560    	; 0x84a <get_fat>
     a7a:	9b 01       	movw	r18, r22
     a7c:	ac 01       	movw	r20, r24
				if (clst <= 1) return FR_DISK_ERR;
     a7e:	62 30       	cpi	r22, 0x02	; 2
     a80:	71 05       	cpc	r23, r1
     a82:	81 05       	cpc	r24, r1
     a84:	91 05       	cpc	r25, r1
     a86:	18 f4       	brcc	.+6      	; 0xa8e <dir_next+0xae>
     a88:	21 e0       	ldi	r18, 0x01	; 1
     a8a:	30 e0       	ldi	r19, 0x00	; 0
     a8c:	4e c0       	rjmp	.+156    	; 0xb2a <dir_next+0x14a>
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
     a8e:	8e 81       	ldd	r24, Y+6	; 0x06
     a90:	9f 81       	ldd	r25, Y+7	; 0x07
     a92:	a8 85       	ldd	r26, Y+8	; 0x08
     a94:	b9 85       	ldd	r27, Y+9	; 0x09
     a96:	28 17       	cp	r18, r24
     a98:	39 07       	cpc	r19, r25
     a9a:	4a 07       	cpc	r20, r26
     a9c:	5b 07       	cpc	r21, r27
     a9e:	08 f0       	brcs	.+2      	; 0xaa2 <dir_next+0xc2>
     aa0:	42 c0       	rjmp	.+132    	; 0xb26 <dir_next+0x146>
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
     aa2:	f5 01       	movw	r30, r10
     aa4:	20 87       	std	Z+8, r18	; 0x08
     aa6:	31 87       	std	Z+9, r19	; 0x09
     aa8:	42 87       	std	Z+10, r20	; 0x0a
     aaa:	53 87       	std	Z+11, r21	; 0x0b
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     aac:	c0 91 62 00 	lds	r28, 0x0062
     ab0:	d0 91 63 00 	lds	r29, 0x0063


	clst -= 2;
     ab4:	8e ef       	ldi	r24, 0xFE	; 254
     ab6:	e8 2e       	mov	r14, r24
     ab8:	8f ef       	ldi	r24, 0xFF	; 255
     aba:	f8 2e       	mov	r15, r24
     abc:	8f ef       	ldi	r24, 0xFF	; 255
     abe:	08 2f       	mov	r16, r24
     ac0:	8f ef       	ldi	r24, 0xFF	; 255
     ac2:	18 2f       	mov	r17, r24
     ac4:	e2 0e       	add	r14, r18
     ac6:	f3 1e       	adc	r15, r19
     ac8:	04 1f       	adc	r16, r20
     aca:	15 1f       	adc	r17, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     acc:	8e 81       	ldd	r24, Y+6	; 0x06
     ace:	9f 81       	ldd	r25, Y+7	; 0x07
     ad0:	a8 85       	ldd	r26, Y+8	; 0x08
     ad2:	b9 85       	ldd	r27, Y+9	; 0x09
     ad4:	02 97       	sbiw	r24, 0x02	; 2
     ad6:	a1 09       	sbc	r26, r1
     ad8:	b1 09       	sbc	r27, r1
     ada:	e8 16       	cp	r14, r24
     adc:	f9 06       	cpc	r15, r25
     ade:	0a 07       	cpc	r16, r26
     ae0:	1b 07       	cpc	r17, r27
     ae2:	28 f0       	brcs	.+10     	; 0xaee <dir_next+0x10e>
     ae4:	20 e0       	ldi	r18, 0x00	; 0
     ae6:	30 e0       	ldi	r19, 0x00	; 0
     ae8:	40 e0       	ldi	r20, 0x00	; 0
     aea:	50 e0       	ldi	r21, 0x00	; 0
     aec:	11 c0       	rjmp	.+34     	; 0xb10 <dir_next+0x130>
	return (DWORD)clst * fs->csize + fs->database;
     aee:	2a 81       	ldd	r18, Y+2	; 0x02
     af0:	30 e0       	ldi	r19, 0x00	; 0
     af2:	40 e0       	ldi	r20, 0x00	; 0
     af4:	50 e0       	ldi	r21, 0x00	; 0
     af6:	c8 01       	movw	r24, r16
     af8:	b7 01       	movw	r22, r14
     afa:	ac d6       	rcall	.+3416   	; 0x1854 <__mulsi3>
     afc:	9b 01       	movw	r18, r22
     afe:	ac 01       	movw	r20, r24
     b00:	8a 89       	ldd	r24, Y+18	; 0x12
     b02:	9b 89       	ldd	r25, Y+19	; 0x13
     b04:	ac 89       	ldd	r26, Y+20	; 0x14
     b06:	bd 89       	ldd	r27, Y+21	; 0x15
     b08:	28 0f       	add	r18, r24
     b0a:	39 1f       	adc	r19, r25
     b0c:	4a 1f       	adc	r20, r26
     b0e:	5b 1f       	adc	r21, r27
				clst = get_fat(dj->clust);		/* Get next cluster */
				if (clst <= 1) return FR_DISK_ERR;
				if (clst >= fs->n_fatent)		/* When it reached end of dynamic table */
					return FR_NO_FILE;			/* Report EOT */
				dj->clust = clst;				/* Initialize data for new cluster */
				dj->sect = clust2sect(clst);
     b10:	f5 01       	movw	r30, r10
     b12:	24 87       	std	Z+12, r18	; 0x0c
     b14:	35 87       	std	Z+13, r19	; 0x0d
     b16:	46 87       	std	Z+14, r20	; 0x0e
     b18:	57 87       	std	Z+15, r21	; 0x0f
			}
		}
	}

	dj->index = i;
     b1a:	f5 01       	movw	r30, r10
     b1c:	d1 82       	std	Z+1, r13	; 0x01
     b1e:	c0 82       	st	Z, r12
     b20:	20 e0       	ldi	r18, 0x00	; 0
     b22:	30 e0       	ldi	r19, 0x00	; 0
     b24:	02 c0       	rjmp	.+4      	; 0xb2a <dir_next+0x14a>

	return FR_OK;
     b26:	23 e0       	ldi	r18, 0x03	; 3
     b28:	30 e0       	ldi	r19, 0x00	; 0
}
     b2a:	c9 01       	movw	r24, r18
     b2c:	cd b7       	in	r28, 0x3d	; 61
     b2e:	de b7       	in	r29, 0x3e	; 62
     b30:	ea e0       	ldi	r30, 0x0A	; 10
     b32:	fb c6       	rjmp	.+3574   	; 0x192a <__epilogue_restores__+0x10>

00000b34 <pf_lseek>:
#if _USE_LSEEK

FRESULT pf_lseek (
	DWORD ofs		/* File pointer from top of file */
)
{
     b34:	a0 e0       	ldi	r26, 0x00	; 0
     b36:	b0 e0       	ldi	r27, 0x00	; 0
     b38:	ef e9       	ldi	r30, 0x9F	; 159
     b3a:	f5 e0       	ldi	r31, 0x05	; 5
     b3c:	d2 c6       	rjmp	.+3492   	; 0x18e2 <__prologue_saves__>
     b3e:	e8 2f       	mov	r30, r24
	CLUST clst;
	DWORD bcs, sect, ifptr;
	FATFS *fs = FatFs;
     b40:	c0 91 62 00 	lds	r28, 0x0062
     b44:	d0 91 63 00 	lds	r29, 0x0063


	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
     b48:	20 97       	sbiw	r28, 0x00	; 0
     b4a:	19 f4       	brne	.+6      	; 0xb52 <pf_lseek+0x1e>
     b4c:	26 e0       	ldi	r18, 0x06	; 6
     b4e:	30 e0       	ldi	r19, 0x00	; 0
     b50:	01 c1       	rjmp	.+514    	; 0xd54 <pf_lseek+0x220>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
     b52:	89 81       	ldd	r24, Y+1	; 0x01
     b54:	80 fd       	sbrc	r24, 0
     b56:	03 c0       	rjmp	.+6      	; 0xb5e <pf_lseek+0x2a>
     b58:	25 e0       	ldi	r18, 0x05	; 5
     b5a:	30 e0       	ldi	r19, 0x00	; 0
     b5c:	fb c0       	rjmp	.+502    	; 0xd54 <pf_lseek+0x220>
     b5e:	ea 8c       	ldd	r14, Y+26	; 0x1a
     b60:	fb 8c       	ldd	r15, Y+27	; 0x1b
     b62:	0c 8d       	ldd	r16, Y+28	; 0x1c
     b64:	1d 8d       	ldd	r17, Y+29	; 0x1d
     b66:	4e 2f       	mov	r20, r30
     b68:	59 2f       	mov	r21, r25
     b6a:	cb 01       	movw	r24, r22
     b6c:	da 01       	movw	r26, r20
     b6e:	3c 01       	movw	r6, r24
     b70:	4d 01       	movw	r8, r26
     b72:	e6 14       	cp	r14, r6
     b74:	f7 04       	cpc	r15, r7
     b76:	08 05       	cpc	r16, r8
     b78:	19 05       	cpc	r17, r9
     b7a:	10 f4       	brcc	.+4      	; 0xb80 <pf_lseek+0x4c>
     b7c:	37 01       	movw	r6, r14
     b7e:	48 01       	movw	r8, r16
			return FR_NOT_OPENED;

	if (ofs > fs->fsize) ofs = fs->fsize;	/* Clip offset with the file size */
	ifptr = fs->fptr;
     b80:	ee 88       	ldd	r14, Y+22	; 0x16
     b82:	ff 88       	ldd	r15, Y+23	; 0x17
     b84:	08 8d       	ldd	r16, Y+24	; 0x18
     b86:	19 8d       	ldd	r17, Y+25	; 0x19
	fs->fptr = 0;
     b88:	1e 8a       	std	Y+22, r1	; 0x16
     b8a:	1f 8a       	std	Y+23, r1	; 0x17
     b8c:	18 8e       	std	Y+24, r1	; 0x18
     b8e:	19 8e       	std	Y+25, r1	; 0x19
	if (ofs > 0) {
     b90:	61 14       	cp	r6, r1
     b92:	71 04       	cpc	r7, r1
     b94:	81 04       	cpc	r8, r1
     b96:	91 04       	cpc	r9, r1
     b98:	09 f4       	brne	.+2      	; 0xb9c <pf_lseek+0x68>
     b9a:	d6 c0       	rjmp	.+428    	; 0xd48 <pf_lseek+0x214>
		bcs = (DWORD)fs->csize * 512;	/* Cluster size (byte) */
     b9c:	8a 81       	ldd	r24, Y+2	; 0x02
     b9e:	a8 2e       	mov	r10, r24
     ba0:	bb 24       	eor	r11, r11
     ba2:	cc 24       	eor	r12, r12
     ba4:	dd 24       	eor	r13, r13
     ba6:	b9 e0       	ldi	r27, 0x09	; 9
     ba8:	aa 0c       	add	r10, r10
     baa:	bb 1c       	adc	r11, r11
     bac:	cc 1c       	adc	r12, r12
     bae:	dd 1c       	adc	r13, r13
     bb0:	ba 95       	dec	r27
     bb2:	d1 f7       	brne	.-12     	; 0xba8 <pf_lseek+0x74>
		if (ifptr > 0 &&
     bb4:	e1 14       	cp	r14, r1
     bb6:	f1 04       	cpc	r15, r1
     bb8:	01 05       	cpc	r16, r1
     bba:	11 05       	cpc	r17, r1
     bbc:	a1 f1       	breq	.+104    	; 0xc26 <pf_lseek+0xf2>
     bbe:	17 01       	movw	r2, r14
     bc0:	28 01       	movw	r4, r16
     bc2:	08 94       	sec
     bc4:	21 08       	sbc	r2, r1
     bc6:	31 08       	sbc	r3, r1
     bc8:	41 08       	sbc	r4, r1
     bca:	51 08       	sbc	r5, r1
     bcc:	c4 01       	movw	r24, r8
     bce:	b3 01       	movw	r22, r6
     bd0:	61 50       	subi	r22, 0x01	; 1
     bd2:	70 40       	sbci	r23, 0x00	; 0
     bd4:	80 40       	sbci	r24, 0x00	; 0
     bd6:	90 40       	sbci	r25, 0x00	; 0
     bd8:	a6 01       	movw	r20, r12
     bda:	95 01       	movw	r18, r10
     bdc:	60 d6       	rcall	.+3264   	; 0x189e <__udivmodsi4>
     bde:	79 01       	movw	r14, r18
     be0:	8a 01       	movw	r16, r20
     be2:	c2 01       	movw	r24, r4
     be4:	b1 01       	movw	r22, r2
     be6:	a6 01       	movw	r20, r12
     be8:	95 01       	movw	r18, r10
     bea:	59 d6       	rcall	.+3250   	; 0x189e <__udivmodsi4>
     bec:	e2 16       	cp	r14, r18
     bee:	f3 06       	cpc	r15, r19
     bf0:	04 07       	cpc	r16, r20
     bf2:	15 07       	cpc	r17, r21
     bf4:	c0 f0       	brcs	.+48     	; 0xc26 <pf_lseek+0xf2>
			(ofs - 1) / bcs >= (ifptr - 1) / bcs) {	/* When seek to same or following cluster, */
			fs->fptr = (ifptr - 1) & ~(bcs - 1);	/* start from the current cluster */
     bf6:	88 27       	eor	r24, r24
     bf8:	99 27       	eor	r25, r25
     bfa:	dc 01       	movw	r26, r24
     bfc:	8a 19       	sub	r24, r10
     bfe:	9b 09       	sbc	r25, r11
     c00:	ac 09       	sbc	r26, r12
     c02:	bd 09       	sbc	r27, r13
     c04:	82 21       	and	r24, r2
     c06:	93 21       	and	r25, r3
     c08:	a4 21       	and	r26, r4
     c0a:	b5 21       	and	r27, r5
     c0c:	8e 8b       	std	Y+22, r24	; 0x16
     c0e:	9f 8b       	std	Y+23, r25	; 0x17
     c10:	a8 8f       	std	Y+24, r26	; 0x18
     c12:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= fs->fptr;
     c14:	68 1a       	sub	r6, r24
     c16:	79 0a       	sbc	r7, r25
     c18:	8a 0a       	sbc	r8, r26
     c1a:	9b 0a       	sbc	r9, r27
			clst = fs->curr_clust;
     c1c:	2a a1       	ldd	r18, Y+34	; 0x22
     c1e:	3b a1       	ldd	r19, Y+35	; 0x23
     c20:	4c a1       	ldd	r20, Y+36	; 0x24
     c22:	5d a1       	ldd	r21, Y+37	; 0x25
     c24:	32 c0       	rjmp	.+100    	; 0xc8a <pf_lseek+0x156>
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
     c26:	2e 8d       	ldd	r18, Y+30	; 0x1e
     c28:	3f 8d       	ldd	r19, Y+31	; 0x1f
     c2a:	48 a1       	ldd	r20, Y+32	; 0x20
     c2c:	59 a1       	ldd	r21, Y+33	; 0x21
			fs->curr_clust = clst;
     c2e:	2a a3       	std	Y+34, r18	; 0x22
     c30:	3b a3       	std	Y+35, r19	; 0x23
     c32:	4c a3       	std	Y+36, r20	; 0x24
     c34:	5d a3       	std	Y+37, r21	; 0x25
     c36:	29 c0       	rjmp	.+82     	; 0xc8a <pf_lseek+0x156>
		}
		while (ofs > bcs) {				/* Cluster following loop */
			clst = get_fat(clst);		/* Follow cluster chain */
     c38:	ca 01       	movw	r24, r20
     c3a:	b9 01       	movw	r22, r18
     c3c:	06 de       	rcall	.-1012   	; 0x84a <get_fat>
     c3e:	9b 01       	movw	r18, r22
     c40:	ac 01       	movw	r20, r24
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
     c42:	62 30       	cpi	r22, 0x02	; 2
     c44:	71 05       	cpc	r23, r1
     c46:	81 05       	cpc	r24, r1
     c48:	91 05       	cpc	r25, r1
     c4a:	08 f4       	brcc	.+2      	; 0xc4e <pf_lseek+0x11a>
     c4c:	80 c0       	rjmp	.+256    	; 0xd4e <pf_lseek+0x21a>
     c4e:	8e 81       	ldd	r24, Y+6	; 0x06
     c50:	9f 81       	ldd	r25, Y+7	; 0x07
     c52:	a8 85       	ldd	r26, Y+8	; 0x08
     c54:	b9 85       	ldd	r27, Y+9	; 0x09
     c56:	28 17       	cp	r18, r24
     c58:	39 07       	cpc	r19, r25
     c5a:	4a 07       	cpc	r20, r26
     c5c:	5b 07       	cpc	r21, r27
     c5e:	08 f0       	brcs	.+2      	; 0xc62 <pf_lseek+0x12e>
     c60:	76 c0       	rjmp	.+236    	; 0xd4e <pf_lseek+0x21a>
			fs->curr_clust = clst;
     c62:	2a a3       	std	Y+34, r18	; 0x22
     c64:	3b a3       	std	Y+35, r19	; 0x23
     c66:	4c a3       	std	Y+36, r20	; 0x24
     c68:	5d a3       	std	Y+37, r21	; 0x25
			fs->fptr += bcs;
     c6a:	8e 89       	ldd	r24, Y+22	; 0x16
     c6c:	9f 89       	ldd	r25, Y+23	; 0x17
     c6e:	a8 8d       	ldd	r26, Y+24	; 0x18
     c70:	b9 8d       	ldd	r27, Y+25	; 0x19
     c72:	8a 0d       	add	r24, r10
     c74:	9b 1d       	adc	r25, r11
     c76:	ac 1d       	adc	r26, r12
     c78:	bd 1d       	adc	r27, r13
     c7a:	8e 8b       	std	Y+22, r24	; 0x16
     c7c:	9f 8b       	std	Y+23, r25	; 0x17
     c7e:	a8 8f       	std	Y+24, r26	; 0x18
     c80:	b9 8f       	std	Y+25, r27	; 0x19
			ofs -= bcs;
     c82:	6a 18       	sub	r6, r10
     c84:	7b 08       	sbc	r7, r11
     c86:	8c 08       	sbc	r8, r12
     c88:	9d 08       	sbc	r9, r13
			clst = fs->curr_clust;
		} else {							/* When seek to back cluster, */
			clst = fs->org_clust;			/* start from the first cluster */
			fs->curr_clust = clst;
		}
		while (ofs > bcs) {				/* Cluster following loop */
     c8a:	a6 14       	cp	r10, r6
     c8c:	b7 04       	cpc	r11, r7
     c8e:	c8 04       	cpc	r12, r8
     c90:	d9 04       	cpc	r13, r9
     c92:	90 f2       	brcs	.-92     	; 0xc38 <pf_lseek+0x104>
			if (clst <= 1 || clst >= fs->n_fatent) goto fe_abort;
			fs->curr_clust = clst;
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
     c94:	ee 88       	ldd	r14, Y+22	; 0x16
     c96:	ff 88       	ldd	r15, Y+23	; 0x17
     c98:	08 8d       	ldd	r16, Y+24	; 0x18
     c9a:	19 8d       	ldd	r17, Y+25	; 0x19
     c9c:	e6 0c       	add	r14, r6
     c9e:	f7 1c       	adc	r15, r7
     ca0:	08 1d       	adc	r16, r8
     ca2:	19 1d       	adc	r17, r9
     ca4:	ee 8a       	std	Y+22, r14	; 0x16
     ca6:	ff 8a       	std	Y+23, r15	; 0x17
     ca8:	08 8f       	std	Y+24, r16	; 0x18
     caa:	19 8f       	std	Y+25, r17	; 0x19
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
     cac:	80 90 62 00 	lds	r8, 0x0062
     cb0:	90 90 63 00 	lds	r9, 0x0063


	clst -= 2;
     cb4:	ae ef       	ldi	r26, 0xFE	; 254
     cb6:	aa 2e       	mov	r10, r26
     cb8:	af ef       	ldi	r26, 0xFF	; 255
     cba:	ba 2e       	mov	r11, r26
     cbc:	af ef       	ldi	r26, 0xFF	; 255
     cbe:	ca 2e       	mov	r12, r26
     cc0:	af ef       	ldi	r26, 0xFF	; 255
     cc2:	da 2e       	mov	r13, r26
     cc4:	a2 0e       	add	r10, r18
     cc6:	b3 1e       	adc	r11, r19
     cc8:	c4 1e       	adc	r12, r20
     cca:	d5 1e       	adc	r13, r21
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
     ccc:	f4 01       	movw	r30, r8
     cce:	86 81       	ldd	r24, Z+6	; 0x06
     cd0:	97 81       	ldd	r25, Z+7	; 0x07
     cd2:	a0 85       	ldd	r26, Z+8	; 0x08
     cd4:	b1 85       	ldd	r27, Z+9	; 0x09
     cd6:	02 97       	sbiw	r24, 0x02	; 2
     cd8:	a1 09       	sbc	r26, r1
     cda:	b1 09       	sbc	r27, r1
     cdc:	a8 16       	cp	r10, r24
     cde:	b9 06       	cpc	r11, r25
     ce0:	ca 06       	cpc	r12, r26
     ce2:	db 06       	cpc	r13, r27
     ce4:	a0 f5       	brcc	.+104    	; 0xd4e <pf_lseek+0x21a>
	return (DWORD)clst * fs->csize + fs->database;
     ce6:	22 81       	ldd	r18, Z+2	; 0x02
     ce8:	30 e0       	ldi	r19, 0x00	; 0
     cea:	40 e0       	ldi	r20, 0x00	; 0
     cec:	50 e0       	ldi	r21, 0x00	; 0
     cee:	c6 01       	movw	r24, r12
     cf0:	b5 01       	movw	r22, r10
     cf2:	b0 d5       	rcall	.+2912   	; 0x1854 <__mulsi3>
     cf4:	9b 01       	movw	r18, r22
     cf6:	ac 01       	movw	r20, r24
     cf8:	f4 01       	movw	r30, r8
     cfa:	82 89       	ldd	r24, Z+18	; 0x12
     cfc:	93 89       	ldd	r25, Z+19	; 0x13
     cfe:	a4 89       	ldd	r26, Z+20	; 0x14
     d00:	b5 89       	ldd	r27, Z+21	; 0x15
     d02:	28 0f       	add	r18, r24
     d04:	39 1f       	adc	r19, r25
     d06:	4a 1f       	adc	r20, r26
     d08:	5b 1f       	adc	r21, r27
			fs->fptr += bcs;
			ofs -= bcs;
		}
		fs->fptr += ofs;
		sect = clust2sect(clst);		/* Current sector */
		if (!sect) goto fe_abort;
     d0a:	21 15       	cp	r18, r1
     d0c:	31 05       	cpc	r19, r1
     d0e:	41 05       	cpc	r20, r1
     d10:	51 05       	cpc	r21, r1
     d12:	e9 f0       	breq	.+58     	; 0xd4e <pf_lseek+0x21a>
		fs->dsect = sect + (fs->fptr / 512 & (fs->csize - 1));
     d14:	f9 e0       	ldi	r31, 0x09	; 9
     d16:	16 95       	lsr	r17
     d18:	07 95       	ror	r16
     d1a:	f7 94       	ror	r15
     d1c:	e7 94       	ror	r14
     d1e:	fa 95       	dec	r31
     d20:	d1 f7       	brne	.-12     	; 0xd16 <pf_lseek+0x1e2>
     d22:	8a 81       	ldd	r24, Y+2	; 0x02
     d24:	90 e0       	ldi	r25, 0x00	; 0
     d26:	01 97       	sbiw	r24, 0x01	; 1
     d28:	aa 27       	eor	r26, r26
     d2a:	97 fd       	sbrc	r25, 7
     d2c:	a0 95       	com	r26
     d2e:	ba 2f       	mov	r27, r26
     d30:	e8 22       	and	r14, r24
     d32:	f9 22       	and	r15, r25
     d34:	0a 23       	and	r16, r26
     d36:	1b 23       	and	r17, r27
     d38:	2e 0d       	add	r18, r14
     d3a:	3f 1d       	adc	r19, r15
     d3c:	40 1f       	adc	r20, r16
     d3e:	51 1f       	adc	r21, r17
     d40:	2e a3       	std	Y+38, r18	; 0x26
     d42:	3f a3       	std	Y+39, r19	; 0x27
     d44:	48 a7       	std	Y+40, r20	; 0x28
     d46:	59 a7       	std	Y+41, r21	; 0x29
     d48:	20 e0       	ldi	r18, 0x00	; 0
     d4a:	30 e0       	ldi	r19, 0x00	; 0
     d4c:	03 c0       	rjmp	.+6      	; 0xd54 <pf_lseek+0x220>
	}

	return FR_OK;

fe_abort:
	fs->flag = 0;
     d4e:	19 82       	std	Y+1, r1	; 0x01
     d50:	21 e0       	ldi	r18, 0x01	; 1
     d52:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
     d54:	c9 01       	movw	r24, r18
     d56:	cd b7       	in	r28, 0x3d	; 61
     d58:	de b7       	in	r29, 0x3e	; 62
     d5a:	e2 e1       	ldi	r30, 0x12	; 18
     d5c:	de c5       	rjmp	.+3004   	; 0x191a <__epilogue_restores__>

00000d5e <pf_readdir>:

FRESULT pf_readdir (
	DIR *dj,			/* Pointer to the open directory object */
	FILINFO *fno		/* Pointer to file information to return */
)
{
     d5e:	ac e2       	ldi	r26, 0x2C	; 44
     d60:	b0 e0       	ldi	r27, 0x00	; 0
     d62:	e4 eb       	ldi	r30, 0xB4	; 180
     d64:	f6 e0       	ldi	r31, 0x06	; 6
     d66:	c5 c5       	rjmp	.+2954   	; 0x18f2 <__prologue_saves__+0x10>
     d68:	7c 01       	movw	r14, r24
     d6a:	6b 01       	movw	r12, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
     d6c:	80 91 62 00 	lds	r24, 0x0062
     d70:	90 91 63 00 	lds	r25, 0x0063
     d74:	89 2b       	or	r24, r25
     d76:	19 f4       	brne	.+6      	; 0xd7e <pf_readdir+0x20>
     d78:	26 e0       	ldi	r18, 0x06	; 6
     d7a:	30 e0       	ldi	r19, 0x00	; 0
     d7c:	b6 c0       	rjmp	.+364    	; 0xeea <pf_readdir+0x18c>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
     d7e:	ce 01       	movw	r24, r28
     d80:	01 96       	adiw	r24, 0x01	; 1
     d82:	d7 01       	movw	r26, r14
     d84:	13 96       	adiw	r26, 0x03	; 3
     d86:	9c 93       	st	X, r25
     d88:	8e 93       	st	-X, r24
     d8a:	12 97       	sbiw	r26, 0x02	; 2
		if (!fno) {
     d8c:	61 15       	cp	r22, r1
     d8e:	71 05       	cpc	r23, r1
     d90:	41 f0       	breq	.+16     	; 0xda2 <pf_readdir+0x44>
     d92:	23 e0       	ldi	r18, 0x03	; 3
     d94:	30 e0       	ldi	r19, 0x00	; 0
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     d96:	8d e0       	ldi	r24, 0x0D	; 13
     d98:	a8 2e       	mov	r10, r24
     d9a:	b1 2c       	mov	r11, r1
     d9c:	ac 0e       	add	r10, r28
     d9e:	bd 1e       	adc	r11, r29
     da0:	28 c0       	rjmp	.+80     	; 0xdf2 <pf_readdir+0x94>
	if (!fs) {				/* Check file system */
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
     da2:	c7 01       	movw	r24, r14
     da4:	d9 dc       	rcall	.-1614   	; 0x758 <dir_rewind>
     da6:	9c 01       	movw	r18, r24
     da8:	a0 c0       	rjmp	.+320    	; 0xeea <pf_readdir+0x18c>
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     daa:	f7 01       	movw	r30, r14
     dac:	20 81       	ld	r18, Z
     dae:	31 81       	ldd	r19, Z+1	; 0x01
     db0:	2f 70       	andi	r18, 0x0F	; 15
     db2:	30 70       	andi	r19, 0x00	; 0
     db4:	15 e0       	ldi	r17, 0x05	; 5
     db6:	22 0f       	add	r18, r18
     db8:	33 1f       	adc	r19, r19
     dba:	1a 95       	dec	r17
     dbc:	e1 f7       	brne	.-8      	; 0xdb6 <pf_readdir+0x58>
     dbe:	c5 01       	movw	r24, r10
     dc0:	00 e2       	ldi	r16, 0x20	; 32
     dc2:	10 e0       	ldi	r17, 0x00	; 0
     dc4:	7b d4       	rcall	.+2294   	; 0x16bc <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     dc6:	89 2b       	or	r24, r25
     dc8:	19 f0       	breq	.+6      	; 0xdd0 <pf_readdir+0x72>
     dca:	21 e0       	ldi	r18, 0x01	; 1
     dcc:	30 e0       	ldi	r19, 0x00	; 0
     dce:	20 c0       	rjmp	.+64     	; 0xe10 <pf_readdir+0xb2>
		c = dir[DIR_Name];
     dd0:	9d 85       	ldd	r25, Y+13	; 0x0d
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     dd2:	99 23       	and	r25, r25
     dd4:	09 f4       	brne	.+2      	; 0xdd8 <pf_readdir+0x7a>
     dd6:	8d c0       	rjmp	.+282    	; 0xef2 <pf_readdir+0x194>
		a = dir[DIR_Attr] & AM_MASK;
     dd8:	88 8d       	ldd	r24, Y+24	; 0x18
		if (c != 0xE5 && c != '.' && !(a & AM_VOL))	/* Is it a valid entry? */
     dda:	95 3e       	cpi	r25, 0xE5	; 229
     ddc:	29 f0       	breq	.+10     	; 0xde8 <pf_readdir+0x8a>
     dde:	9e 32       	cpi	r25, 0x2E	; 46
     de0:	19 f0       	breq	.+6      	; 0xde8 <pf_readdir+0x8a>
     de2:	8f 73       	andi	r24, 0x3F	; 63
     de4:	83 ff       	sbrs	r24, 3
     de6:	20 c0       	rjmp	.+64     	; 0xe28 <pf_readdir+0xca>
			break;
		res = dir_next(dj);			/* Next entry */
     de8:	c7 01       	movw	r24, r14
     dea:	fa dd       	rcall	.-1036   	; 0x9e0 <dir_next>
     dec:	9c 01       	movw	r18, r24
		if (res != FR_OK) break;
     dee:	00 97       	sbiw	r24, 0x00	; 0
     df0:	79 f4       	brne	.+30     	; 0xe10 <pf_readdir+0xb2>
	FRESULT res;
	BYTE a, c;


	res = FR_NO_FILE;
	while (dj->sect) {
     df2:	d7 01       	movw	r26, r14
     df4:	1c 96       	adiw	r26, 0x0c	; 12
     df6:	4d 91       	ld	r20, X+
     df8:	5d 91       	ld	r21, X+
     dfa:	6d 91       	ld	r22, X+
     dfc:	7c 91       	ld	r23, X
     dfe:	1f 97       	sbiw	r26, 0x0f	; 15
     e00:	41 15       	cp	r20, r1
     e02:	51 05       	cpc	r21, r1
     e04:	61 05       	cpc	r22, r1
     e06:	71 05       	cpc	r23, r1
     e08:	81 f6       	brne	.-96     	; 0xdaa <pf_readdir+0x4c>
			break;
		res = dir_next(dj);			/* Next entry */
		if (res != FR_OK) break;
	}

	if (res != FR_OK) dj->sect = 0;
     e0a:	21 15       	cp	r18, r1
     e0c:	31 05       	cpc	r19, r1
     e0e:	61 f0       	breq	.+24     	; 0xe28 <pf_readdir+0xca>
     e10:	f7 01       	movw	r30, r14
     e12:	14 86       	std	Z+12, r1	; 0x0c
     e14:	15 86       	std	Z+13, r1	; 0x0d
     e16:	16 86       	std	Z+14, r1	; 0x0e
     e18:	17 86       	std	Z+15, r1	; 0x0f
		dj->fn = sp;
		if (!fno) {
			res = dir_rewind(dj);
		} else {
			res = dir_read(dj, dir);
			if (res == FR_NO_FILE) {
     e1a:	23 30       	cpi	r18, 0x03	; 3
     e1c:	31 05       	cpc	r19, r1
     e1e:	21 f0       	breq	.+8      	; 0xe28 <pf_readdir+0xca>
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
     e20:	21 15       	cp	r18, r1
     e22:	31 05       	cpc	r19, r1
     e24:	09 f0       	breq	.+2      	; 0xe28 <pf_readdir+0xca>
     e26:	61 c0       	rjmp	.+194    	; 0xeea <pf_readdir+0x18c>
{
	BYTE i, c;
	char *p;


	p = fno->fname;
     e28:	96 01       	movw	r18, r12
     e2a:	27 5f       	subi	r18, 0xF7	; 247
     e2c:	3f 4f       	sbci	r19, 0xFF	; 255
	if (dj->sect) {
     e2e:	f7 01       	movw	r30, r14
     e30:	84 85       	ldd	r24, Z+12	; 0x0c
     e32:	95 85       	ldd	r25, Z+13	; 0x0d
     e34:	a6 85       	ldd	r26, Z+14	; 0x0e
     e36:	b7 85       	ldd	r27, Z+15	; 0x0f
     e38:	00 97       	sbiw	r24, 0x00	; 0
     e3a:	a1 05       	cpc	r26, r1
     e3c:	b1 05       	cpc	r27, r1
     e3e:	09 f4       	brne	.+2      	; 0xe42 <pf_readdir+0xe4>
     e40:	43 c0       	rjmp	.+134    	; 0xec8 <pf_readdir+0x16a>
     e42:	fe 01       	movw	r30, r28
     e44:	3d 96       	adiw	r30, 0x0d	; 13
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     e46:	ae 01       	movw	r20, r28
     e48:	4b 5e       	subi	r20, 0xEB	; 235
     e4a:	5f 4f       	sbci	r21, 0xFF	; 255
			c = dir[i];
     e4c:	80 81       	ld	r24, Z
			if (c == ' ') break;
     e4e:	80 32       	cpi	r24, 0x20	; 32
     e50:	51 f0       	breq	.+20     	; 0xe66 <pf_readdir+0x108>
			if (c == 0x05) c = 0xE5;
     e52:	85 30       	cpi	r24, 0x05	; 5
     e54:	09 f4       	brne	.+2      	; 0xe58 <pf_readdir+0xfa>
     e56:	85 ee       	ldi	r24, 0xE5	; 229
			*p++ = c;
     e58:	d9 01       	movw	r26, r18
     e5a:	8d 93       	st	X+, r24
     e5c:	9d 01       	movw	r18, r26
     e5e:	31 96       	adiw	r30, 0x01	; 1
	char *p;


	p = fno->fname;
	if (dj->sect) {
		for (i = 0; i < 8; i++) {	/* Copy file name body */
     e60:	e4 17       	cp	r30, r20
     e62:	f5 07       	cpc	r31, r21
     e64:	99 f7       	brne	.-26     	; 0xe4c <pf_readdir+0xee>
			c = dir[i];
			if (c == ' ') break;
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
     e66:	8d 89       	ldd	r24, Y+21	; 0x15
     e68:	80 32       	cpi	r24, 0x20	; 32
     e6a:	99 f0       	breq	.+38     	; 0xe92 <pf_readdir+0x134>
			*p++ = '.';
     e6c:	8e e2       	ldi	r24, 0x2E	; 46
     e6e:	f9 01       	movw	r30, r18
     e70:	81 93       	st	Z+, r24
     e72:	9f 01       	movw	r18, r30
     e74:	fe 01       	movw	r30, r28
     e76:	75 96       	adiw	r30, 0x15	; 21
			for (i = 8; i < 11; i++) {
     e78:	ae 01       	movw	r20, r28
     e7a:	48 5e       	subi	r20, 0xE8	; 232
     e7c:	5f 4f       	sbci	r21, 0xFF	; 255
				c = dir[i];
     e7e:	80 81       	ld	r24, Z
				if (c == ' ') break;
     e80:	80 32       	cpi	r24, 0x20	; 32
     e82:	39 f0       	breq	.+14     	; 0xe92 <pf_readdir+0x134>
				*p++ = c;
     e84:	d9 01       	movw	r26, r18
     e86:	8d 93       	st	X+, r24
     e88:	9d 01       	movw	r18, r26
     e8a:	31 96       	adiw	r30, 0x01	; 1
			if (c == 0x05) c = 0xE5;
			*p++ = c;
		}
		if (dir[8] != ' ') {		/* Copy file name extension */
			*p++ = '.';
			for (i = 8; i < 11; i++) {
     e8c:	e4 17       	cp	r30, r20
     e8e:	f5 07       	cpc	r31, r21
     e90:	b1 f7       	brne	.-20     	; 0xe7e <pf_readdir+0x120>
				c = dir[i];
				if (c == ' ') break;
				*p++ = c;
			}
		}
		fno->fattrib = dir[DIR_Attr];				/* Attribute */
     e92:	88 8d       	ldd	r24, Y+24	; 0x18
     e94:	f6 01       	movw	r30, r12
     e96:	80 87       	std	Z+8, r24	; 0x08
		fno->fsize = LD_DWORD(dir+DIR_FileSize);	/* Size */
     e98:	fe 01       	movw	r30, r28
     e9a:	3d 96       	adiw	r30, 0x0d	; 13
     e9c:	44 8d       	ldd	r20, Z+28	; 0x1c
     e9e:	55 8d       	ldd	r21, Z+29	; 0x1d
     ea0:	66 8d       	ldd	r22, Z+30	; 0x1e
     ea2:	77 8d       	ldd	r23, Z+31	; 0x1f
     ea4:	d6 01       	movw	r26, r12
     ea6:	4d 93       	st	X+, r20
     ea8:	5d 93       	st	X+, r21
     eaa:	6d 93       	st	X+, r22
     eac:	7c 93       	st	X, r23
     eae:	13 97       	sbiw	r26, 0x03	; 3
		fno->fdate = LD_WORD(dir+DIR_WrtDate);		/* Date */
     eb0:	80 8d       	ldd	r24, Z+24	; 0x18
     eb2:	91 8d       	ldd	r25, Z+25	; 0x19
     eb4:	15 96       	adiw	r26, 0x05	; 5
     eb6:	9c 93       	st	X, r25
     eb8:	8e 93       	st	-X, r24
     eba:	14 97       	sbiw	r26, 0x04	; 4
		fno->ftime = LD_WORD(dir+DIR_WrtTime);		/* Time */
     ebc:	86 89       	ldd	r24, Z+22	; 0x16
     ebe:	97 89       	ldd	r25, Z+23	; 0x17
     ec0:	17 96       	adiw	r26, 0x07	; 7
     ec2:	9c 93       	st	X, r25
     ec4:	8e 93       	st	-X, r24
     ec6:	16 97       	sbiw	r26, 0x06	; 6
	}
	*p = 0;
     ec8:	f9 01       	movw	r30, r18
     eca:	10 82       	st	Z, r1
				dj->sect = 0;
				res = FR_OK;
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
     ecc:	c7 01       	movw	r24, r14
     ece:	88 dd       	rcall	.-1264   	; 0x9e0 <dir_next>
     ed0:	9c 01       	movw	r18, r24
				if (res == FR_NO_FILE) {
     ed2:	83 30       	cpi	r24, 0x03	; 3
     ed4:	91 05       	cpc	r25, r1
     ed6:	49 f4       	brne	.+18     	; 0xeea <pf_readdir+0x18c>
					dj->sect = 0;
     ed8:	d7 01       	movw	r26, r14
     eda:	1c 96       	adiw	r26, 0x0c	; 12
     edc:	1d 92       	st	X+, r1
     ede:	1d 92       	st	X+, r1
     ee0:	1d 92       	st	X+, r1
     ee2:	1c 92       	st	X, r1
     ee4:	1f 97       	sbiw	r26, 0x0f	; 15
     ee6:	20 e0       	ldi	r18, 0x00	; 0
     ee8:	30 e0       	ldi	r19, 0x00	; 0
			}
		}
	}

	return res;
}
     eea:	c9 01       	movw	r24, r18
     eec:	ac 96       	adiw	r28, 0x2c	; 44
     eee:	ea e0       	ldi	r30, 0x0A	; 10
     ef0:	1c c5       	rjmp	.+2616   	; 0x192a <__epilogue_restores__+0x10>
			}
			if (res == FR_OK) {				/* A valid entry is found */
				get_fileinfo(dj, dir, fno);	/* Get the object information */
				res = dir_next(dj);			/* Increment index for next */
				if (res == FR_NO_FILE) {
					dj->sect = 0;
     ef2:	23 e0       	ldi	r18, 0x03	; 3
     ef4:	30 e0       	ldi	r19, 0x00	; 0
     ef6:	8c cf       	rjmp	.-232    	; 0xe10 <pf_readdir+0xb2>

00000ef8 <follow_path>:
FRESULT follow_path (	/* FR_OK(0): successful, !=0: error code */
	DIR *dj,			/* Directory object to return last directory and found object */
	BYTE *dir,			/* 32-byte working buffer */
	const char *path	/* Full-path string to find a file or directory */
)
{
     ef8:	a0 e0       	ldi	r26, 0x00	; 0
     efa:	b0 e0       	ldi	r27, 0x00	; 0
     efc:	e1 e8       	ldi	r30, 0x81	; 129
     efe:	f7 e0       	ldi	r31, 0x07	; 7
     f00:	f3 c4       	rjmp	.+2534   	; 0x18e8 <__prologue_saves__+0x6>
     f02:	7c 01       	movw	r14, r24
     f04:	5b 01       	movw	r10, r22
     f06:	6a 01       	movw	r12, r20
     f08:	03 c0       	rjmp	.+6      	; 0xf10 <follow_path+0x18>
	FRESULT res;


	while (*path == ' ') path++;		/* Skip leading spaces */
     f0a:	08 94       	sec
     f0c:	c1 1c       	adc	r12, r1
     f0e:	d1 1c       	adc	r13, r1
     f10:	d6 01       	movw	r26, r12
     f12:	8c 91       	ld	r24, X
     f14:	80 32       	cpi	r24, 0x20	; 32
     f16:	c9 f3       	breq	.-14     	; 0xf0a <follow_path+0x12>
	if (*path == '/') path++;			/* Strip heading separator */
     f18:	8f 32       	cpi	r24, 0x2F	; 47
     f1a:	19 f4       	brne	.+6      	; 0xf22 <follow_path+0x2a>
     f1c:	08 94       	sec
     f1e:	c1 1c       	adc	r12, r1
     f20:	d1 1c       	adc	r13, r1
	dj->sclust = 0;						/* Set start directory (always root dir) */
     f22:	f7 01       	movw	r30, r14
     f24:	14 82       	std	Z+4, r1	; 0x04
     f26:	15 82       	std	Z+5, r1	; 0x05
     f28:	16 82       	std	Z+6, r1	; 0x06
     f2a:	17 82       	std	Z+7, r1	; 0x07

	if ((BYTE)*path <= ' ') {			/* Null path means the root directory */
     f2c:	d6 01       	movw	r26, r12
     f2e:	8c 91       	ld	r24, X
     f30:	81 32       	cpi	r24, 0x21	; 33
     f32:	30 f4       	brcc	.+12     	; 0xf40 <follow_path+0x48>
		res = dir_rewind(dj);
     f34:	c7 01       	movw	r24, r14
     f36:	10 dc       	rcall	.-2016   	; 0x758 <dir_rewind>
     f38:	ec 01       	movw	r28, r24
		dir[0] = 0;
     f3a:	f5 01       	movw	r30, r10
     f3c:	10 82       	st	Z, r1
     f3e:	a6 c0       	rjmp	.+332    	; 0x108c <follow_path+0x194>

/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
	while (cnt--) *d++ = (char)val;
     f40:	a0 e2       	ldi	r26, 0x20	; 32
     f42:	5a 2e       	mov	r5, r26
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     f44:	66 24       	eor	r6, r6
     f46:	63 94       	inc	r6
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
     f48:	fb e0       	ldi	r31, 0x0B	; 11
     f4a:	8f 2e       	mov	r8, r31
     f4c:	91 2c       	mov	r9, r1
     f4e:	8a 0c       	add	r8, r10
     f50:	9b 1c       	adc	r9, r11
{
	BYTE c, d, ni, si, i, *sfn;
	const char *p;

	/* Create file name in directory form */
	sfn = dj->fn;
     f52:	f7 01       	movw	r30, r14
     f54:	a2 81       	ldd	r26, Z+2	; 0x02
     f56:	b3 81       	ldd	r27, Z+3	; 0x03


/* Fill memory */
static
void mem_set (void* dst, int val, int cnt) {
	char *d = (char*)dst;
     f58:	fd 01       	movw	r30, r26
	while (cnt--) *d++ = (char)val;
     f5a:	cd 01       	movw	r24, r26
     f5c:	0b 96       	adiw	r24, 0x0b	; 11
     f5e:	01 c0       	rjmp	.+2      	; 0xf62 <follow_path+0x6a>
     f60:	51 92       	st	Z+, r5
     f62:	e8 17       	cp	r30, r24
     f64:	f9 07       	cpc	r31, r25
     f66:	e1 f7       	brne	.-8      	; 0xf60 <follow_path+0x68>
     f68:	20 e0       	ldi	r18, 0x00	; 0
     f6a:	77 24       	eor	r7, r7
     f6c:	38 e0       	ldi	r19, 0x08	; 8
     f6e:	02 c0       	rjmp	.+4      	; 0xf74 <follow_path+0x7c>
     f70:	28 e0       	ldi	r18, 0x08	; 8
     f72:	3b e0       	ldi	r19, 0x0B	; 11
	sfn = dj->fn;
	mem_set(sfn, ' ', 11);
	si = i = 0; ni = 8;
	p = *path;
	for (;;) {
		c = p[si++];
     f74:	f6 01       	movw	r30, r12
     f76:	e7 0d       	add	r30, r7
     f78:	f1 1d       	adc	r31, r1
     f7a:	90 81       	ld	r25, Z
     f7c:	73 94       	inc	r7
		if (c <= ' ' || c == '/') break;	/* Break on end of segment */
     f7e:	91 32       	cpi	r25, 0x21	; 33
     f80:	b0 f0       	brcs	.+44     	; 0xfae <follow_path+0xb6>
     f82:	9f 32       	cpi	r25, 0x2F	; 47
     f84:	a1 f0       	breq	.+40     	; 0xfae <follow_path+0xb6>
		if (c == '.' || i >= ni) {
     f86:	9e 32       	cpi	r25, 0x2E	; 46
     f88:	11 f0       	breq	.+4      	; 0xf8e <follow_path+0x96>
     f8a:	23 17       	cp	r18, r19
     f8c:	28 f0       	brcs	.+10     	; 0xf98 <follow_path+0xa0>
			if (ni != 8 || c != '.') break;
     f8e:	38 30       	cpi	r19, 0x08	; 8
     f90:	71 f4       	brne	.+28     	; 0xfae <follow_path+0xb6>
     f92:	9e 32       	cpi	r25, 0x2E	; 46
     f94:	69 f3       	breq	.-38     	; 0xf70 <follow_path+0x78>
     f96:	0b c0       	rjmp	.+22     	; 0xfae <follow_path+0xb6>
		if (IsDBCS1(c) && i < ni - 1) {	/* DBC 1st byte? */
			d = p[si++];				/* Get 2nd byte */
			sfn[i++] = c;
			sfn[i++] = d;
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
     f98:	89 2f       	mov	r24, r25
     f9a:	81 56       	subi	r24, 0x61	; 97
     f9c:	8a 31       	cpi	r24, 0x1A	; 26
     f9e:	08 f4       	brcc	.+2      	; 0xfa2 <follow_path+0xaa>
     fa0:	90 52       	subi	r25, 0x20	; 32
			sfn[i++] = c;
     fa2:	fd 01       	movw	r30, r26
     fa4:	e2 0f       	add	r30, r18
     fa6:	f1 1d       	adc	r31, r1
     fa8:	90 83       	st	Z, r25
     faa:	2f 5f       	subi	r18, 0xFF	; 255
     fac:	e3 cf       	rjmp	.-58     	; 0xf74 <follow_path+0x7c>
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */

	sfn[11] = (c <= ' ') ? 1 : 0;		/* Set last segment flag if end of path */
     fae:	1b 96       	adiw	r26, 0x0b	; 11
     fb0:	1c 92       	st	X, r1
     fb2:	1b 97       	sbiw	r26, 0x0b	; 11
     fb4:	91 32       	cpi	r25, 0x21	; 33
     fb6:	10 f4       	brcc	.+4      	; 0xfbc <follow_path+0xc4>
     fb8:	1b 96       	adiw	r26, 0x0b	; 11
     fba:	6c 92       	st	X, r6
{
	FRESULT res;
	BYTE c;


	res = dir_rewind(dj);			/* Rewind directory object */
     fbc:	c7 01       	movw	r24, r14
     fbe:	cc db       	rcall	.-2152   	; 0x758 <dir_rewind>
     fc0:	ec 01       	movw	r28, r24
	if (res != FR_OK) return res;
     fc2:	00 97       	sbiw	r24, 0x00	; 0
     fc4:	b1 f5       	brne	.+108    	; 0x1032 <follow_path+0x13a>

	do {
		res = disk_readp(dir, dj->sect, (WORD)((dj->index % 16) * 32), 32)	/* Read an entry */
     fc6:	d7 01       	movw	r26, r14
     fc8:	1c 96       	adiw	r26, 0x0c	; 12
     fca:	4d 91       	ld	r20, X+
     fcc:	5d 91       	ld	r21, X+
     fce:	6d 91       	ld	r22, X+
     fd0:	7c 91       	ld	r23, X
     fd2:	1f 97       	sbiw	r26, 0x0f	; 15
     fd4:	2d 91       	ld	r18, X+
     fd6:	3c 91       	ld	r19, X
     fd8:	2f 70       	andi	r18, 0x0F	; 15
     fda:	30 70       	andi	r19, 0x00	; 0
     fdc:	e5 e0       	ldi	r30, 0x05	; 5
     fde:	22 0f       	add	r18, r18
     fe0:	33 1f       	adc	r19, r19
     fe2:	ea 95       	dec	r30
     fe4:	e1 f7       	brne	.-8      	; 0xfde <follow_path+0xe6>
     fe6:	c5 01       	movw	r24, r10
     fe8:	00 e2       	ldi	r16, 0x20	; 32
     fea:	10 e0       	ldi	r17, 0x00	; 0
     fec:	67 d3       	rcall	.+1742   	; 0x16bc <disk_readp>
			? FR_DISK_ERR : FR_OK;
		if (res != FR_OK) break;
     fee:	89 2b       	or	r24, r25
     ff0:	19 f0       	breq	.+6      	; 0xff8 <follow_path+0x100>
     ff2:	81 e0       	ldi	r24, 0x01	; 1
     ff4:	90 e0       	ldi	r25, 0x00	; 0
     ff6:	1c c0       	rjmp	.+56     	; 0x1030 <follow_path+0x138>
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
     ff8:	f5 01       	movw	r30, r10
     ffa:	80 81       	ld	r24, Z
     ffc:	88 23       	and	r24, r24
     ffe:	09 f4       	brne	.+2      	; 0x1002 <follow_path+0x10a>
    1000:	4a c0       	rjmp	.+148    	; 0x1096 <follow_path+0x19e>
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
    1002:	d4 01       	movw	r26, r8
    1004:	8c 91       	ld	r24, X
    1006:	83 fd       	sbrc	r24, 3
    1008:	0f c0       	rjmp	.+30     	; 0x1028 <follow_path+0x130>
}

/* Compare memory to memory */
static
int mem_cmp (const void* dst, const void* src, int cnt) {
	const char *d = (const char *)dst, *s = (const char *)src;
    100a:	f7 01       	movw	r30, r14
    100c:	a2 81       	ldd	r26, Z+2	; 0x02
    100e:	b3 81       	ldd	r27, Z+3	; 0x03
    1010:	f5 01       	movw	r30, r10
	int r = 0;
	while (cnt-- && (r = *d++ - *s++) == 0) ;
    1012:	e8 15       	cp	r30, r8
    1014:	f9 05       	cpc	r31, r9
    1016:	09 f4       	brne	.+2      	; 0x101a <follow_path+0x122>
    1018:	41 c0       	rjmp	.+130    	; 0x109c <follow_path+0x1a4>
    101a:	90 81       	ld	r25, Z
    101c:	8c 91       	ld	r24, X
    101e:	98 17       	cp	r25, r24
    1020:	19 f4       	brne	.+6      	; 0x1028 <follow_path+0x130>
    1022:	31 96       	adiw	r30, 0x01	; 1
    1024:	11 96       	adiw	r26, 0x01	; 1
    1026:	f5 cf       	rjmp	.-22     	; 0x1012 <follow_path+0x11a>
		if (res != FR_OK) break;
		c = dir[DIR_Name];	/* First character */
		if (c == 0) { res = FR_NO_FILE; break; }	/* Reached to end of table */
		if (!(dir[DIR_Attr] & AM_VOL) && !mem_cmp(dir, dj->fn, 11)) /* Is it a valid entry? */
			break;
		res = dir_next(dj);					/* Next entry */
    1028:	c7 01       	movw	r24, r14
    102a:	da dc       	rcall	.-1612   	; 0x9e0 <dir_next>
	} while (res == FR_OK);
    102c:	00 97       	sbiw	r24, 0x00	; 0
    102e:	59 f2       	breq	.-106    	; 0xfc6 <follow_path+0xce>
    1030:	ec 01       	movw	r28, r24
		for (;;) {
			res = create_name(dj, &path);	/* Get a segment */
			if (res != FR_OK) break;
			res = dir_find(dj, dir);		/* Find it */
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
    1032:	c3 30       	cpi	r28, 0x03	; 3
    1034:	d1 05       	cpc	r29, r1
    1036:	51 f5       	brne	.+84     	; 0x108c <follow_path+0x194>
    1038:	d7 01       	movw	r26, r14
    103a:	12 96       	adiw	r26, 0x02	; 2
    103c:	ed 91       	ld	r30, X+
    103e:	fc 91       	ld	r31, X
    1040:	13 97       	sbiw	r26, 0x03	; 3
    1042:	83 85       	ldd	r24, Z+11	; 0x0b
    1044:	88 23       	and	r24, r24
    1046:	01 f1       	breq	.+64     	; 0x1088 <follow_path+0x190>
    1048:	21 c0       	rjmp	.+66     	; 0x108c <follow_path+0x194>
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
    104a:	f4 01       	movw	r30, r8
    104c:	80 81       	ld	r24, Z
    104e:	84 ff       	sbrs	r24, 4
    1050:	1b c0       	rjmp	.+54     	; 0x1088 <follow_path+0x190>
		} else {						/* Single byte code */
			if (IsLower(c)) c -= 0x20;	/* toupper */
			sfn[i++] = c;
		}
	}
	*path = &p[si];						/* Rerurn pointer to the next segment */
    1052:	c7 0c       	add	r12, r7
    1054:	d1 1c       	adc	r13, r1
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
    1056:	d5 01       	movw	r26, r10
    1058:	54 96       	adiw	r26, 0x14	; 20
    105a:	8d 91       	ld	r24, X+
    105c:	9c 91       	ld	r25, X
    105e:	55 97       	sbiw	r26, 0x15	; 21
    1060:	a0 e0       	ldi	r26, 0x00	; 0
    1062:	b0 e0       	ldi	r27, 0x00	; 0
    1064:	dc 01       	movw	r26, r24
    1066:	99 27       	eor	r25, r25
    1068:	88 27       	eor	r24, r24
    106a:	f5 01       	movw	r30, r10
    106c:	22 8d       	ldd	r18, Z+26	; 0x1a
    106e:	33 8d       	ldd	r19, Z+27	; 0x1b
    1070:	40 e0       	ldi	r20, 0x00	; 0
    1072:	50 e0       	ldi	r21, 0x00	; 0
    1074:	82 2b       	or	r24, r18
    1076:	93 2b       	or	r25, r19
    1078:	a4 2b       	or	r26, r20
    107a:	b5 2b       	or	r27, r21
    107c:	f7 01       	movw	r30, r14
    107e:	84 83       	std	Z+4, r24	; 0x04
    1080:	95 83       	std	Z+5, r25	; 0x05
    1082:	a6 83       	std	Z+6, r26	; 0x06
    1084:	b7 83       	std	Z+7, r27	; 0x07
    1086:	65 cf       	rjmp	.-310    	; 0xf52 <follow_path+0x5a>
		}
    1088:	c4 e0       	ldi	r28, 0x04	; 4
    108a:	d0 e0       	ldi	r29, 0x00	; 0
	}

	return res;
}
    108c:	ce 01       	movw	r24, r28
    108e:	cd b7       	in	r28, 0x3d	; 61
    1090:	de b7       	in	r29, 0x3e	; 62
    1092:	ef e0       	ldi	r30, 0x0F	; 15
    1094:	45 c4       	rjmp	.+2186   	; 0x1920 <__epilogue_restores__+0x6>
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
			if (!(dir[DIR_Attr] & AM_DIR)) { /* Cannot follow because it is a file */
				res = FR_NO_PATH; break;
			}
			dj->sclust = LD_CLUST(dir);
		}
    1096:	c3 e0       	ldi	r28, 0x03	; 3
    1098:	d0 e0       	ldi	r29, 0x00	; 0
    109a:	cb cf       	rjmp	.-106    	; 0x1032 <follow_path+0x13a>
			if (res != FR_OK) {				/* Could not find the object */
				if (res == FR_NO_FILE && !*(dj->fn+11))
					res = FR_NO_PATH;
				break;
			}
			if (*(dj->fn+11)) break;		/* Last segment match. Function completed. */
    109c:	d7 01       	movw	r26, r14
    109e:	12 96       	adiw	r26, 0x02	; 2
    10a0:	ed 91       	ld	r30, X+
    10a2:	fc 91       	ld	r31, X
    10a4:	13 97       	sbiw	r26, 0x03	; 3
    10a6:	83 85       	ldd	r24, Z+11	; 0x0b
    10a8:	88 23       	and	r24, r24
    10aa:	79 f2       	breq	.-98     	; 0x104a <follow_path+0x152>
    10ac:	ef cf       	rjmp	.-34     	; 0x108c <follow_path+0x194>

000010ae <pf_opendir>:

FRESULT pf_opendir (
	DIR *dj,			/* Pointer to directory object to create */
	const char *path	/* Pointer to the directory path */
)
{
    10ae:	ac e2       	ldi	r26, 0x2C	; 44
    10b0:	b0 e0       	ldi	r27, 0x00	; 0
    10b2:	ec e5       	ldi	r30, 0x5C	; 92
    10b4:	f8 e0       	ldi	r31, 0x08	; 8
    10b6:	21 c4       	rjmp	.+2114   	; 0x18fa <__prologue_saves__+0x18>
    10b8:	8c 01       	movw	r16, r24
    10ba:	ab 01       	movw	r20, r22
	FRESULT res;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;


	if (!fs) {				/* Check file system */
    10bc:	80 91 62 00 	lds	r24, 0x0062
    10c0:	90 91 63 00 	lds	r25, 0x0063
    10c4:	89 2b       	or	r24, r25
    10c6:	19 f4       	brne	.+6      	; 0x10ce <pf_opendir+0x20>
    10c8:	26 e0       	ldi	r18, 0x06	; 6
    10ca:	30 e0       	ldi	r19, 0x00	; 0
    10cc:	33 c0       	rjmp	.+102    	; 0x1134 <pf_opendir+0x86>
		res = FR_NOT_ENABLED;
	} else {
		dj->fn = sp;
    10ce:	ce 01       	movw	r24, r28
    10d0:	01 96       	adiw	r24, 0x01	; 1
    10d2:	f8 01       	movw	r30, r16
    10d4:	93 83       	std	Z+3, r25	; 0x03
    10d6:	82 83       	std	Z+2, r24	; 0x02
		res = follow_path(dj, dir, path);		/* Follow the path to the directory */
    10d8:	3d e0       	ldi	r19, 0x0D	; 13
    10da:	e3 2e       	mov	r14, r19
    10dc:	f1 2c       	mov	r15, r1
    10de:	ec 0e       	add	r14, r28
    10e0:	fd 1e       	adc	r15, r29
    10e2:	c8 01       	movw	r24, r16
    10e4:	b7 01       	movw	r22, r14
    10e6:	08 df       	rcall	.-496    	; 0xef8 <follow_path>
    10e8:	9c 01       	movw	r18, r24
		if (res == FR_OK) {						/* Follow completed */
    10ea:	00 97       	sbiw	r24, 0x00	; 0
    10ec:	f1 f4       	brne	.+60     	; 0x112a <pf_opendir+0x7c>
			if (dir[0]) {						/* It is not the root dir */
    10ee:	8d 85       	ldd	r24, Y+13	; 0x0d
    10f0:	88 23       	and	r24, r24
    10f2:	c1 f0       	breq	.+48     	; 0x1124 <pf_opendir+0x76>
				if (dir[DIR_Attr] & AM_DIR)		/* The object is a directory */
    10f4:	88 8d       	ldd	r24, Y+24	; 0x18
    10f6:	84 ff       	sbrs	r24, 4
    10f8:	1b c0       	rjmp	.+54     	; 0x1130 <pf_opendir+0x82>
					dj->sclust = LD_CLUST(dir);
    10fa:	f7 01       	movw	r30, r14
    10fc:	84 89       	ldd	r24, Z+20	; 0x14
    10fe:	95 89       	ldd	r25, Z+21	; 0x15
    1100:	a0 e0       	ldi	r26, 0x00	; 0
    1102:	b0 e0       	ldi	r27, 0x00	; 0
    1104:	dc 01       	movw	r26, r24
    1106:	99 27       	eor	r25, r25
    1108:	88 27       	eor	r24, r24
    110a:	22 8d       	ldd	r18, Z+26	; 0x1a
    110c:	33 8d       	ldd	r19, Z+27	; 0x1b
    110e:	40 e0       	ldi	r20, 0x00	; 0
    1110:	50 e0       	ldi	r21, 0x00	; 0
    1112:	82 2b       	or	r24, r18
    1114:	93 2b       	or	r25, r19
    1116:	a4 2b       	or	r26, r20
    1118:	b5 2b       	or	r27, r21
    111a:	f8 01       	movw	r30, r16
    111c:	84 83       	std	Z+4, r24	; 0x04
    111e:	95 83       	std	Z+5, r25	; 0x05
    1120:	a6 83       	std	Z+6, r26	; 0x06
    1122:	b7 83       	std	Z+7, r27	; 0x07
				else							/* The object is not a directory */
					res = FR_NO_PATH;
			}
			if (res == FR_OK)
				res = dir_rewind(dj);			/* Rewind dir */
    1124:	c8 01       	movw	r24, r16
    1126:	18 db       	rcall	.-2512   	; 0x758 <dir_rewind>
    1128:	9c 01       	movw	r18, r24
		}
		if (res == FR_NO_FILE) res = FR_NO_PATH;
    112a:	23 30       	cpi	r18, 0x03	; 3
    112c:	31 05       	cpc	r19, r1
    112e:	11 f4       	brne	.+4      	; 0x1134 <pf_opendir+0x86>
    1130:	24 e0       	ldi	r18, 0x04	; 4
    1132:	30 e0       	ldi	r19, 0x00	; 0
	}

	return res;
}
    1134:	c9 01       	movw	r24, r18
    1136:	ac 96       	adiw	r28, 0x2c	; 44
    1138:	e6 e0       	ldi	r30, 0x06	; 6
    113a:	fb c3       	rjmp	.+2038   	; 0x1932 <__epilogue_restores__+0x18>

0000113c <pf_open>:
/*-----------------------------------------------------------------------*/

FRESULT pf_open (
	const char *path	/* Pointer to the file name */
)
{
    113c:	ac e3       	ldi	r26, 0x3C	; 60
    113e:	b0 e0       	ldi	r27, 0x00	; 0
    1140:	e3 ea       	ldi	r30, 0xA3	; 163
    1142:	f8 e0       	ldi	r31, 0x08	; 8
    1144:	da c3       	rjmp	.+1972   	; 0x18fa <__prologue_saves__+0x18>
    1146:	ac 01       	movw	r20, r24
	FRESULT res;
	DIR dj;
	BYTE sp[12], dir[32];
	FATFS *fs = FatFs;
    1148:	00 91 62 00 	lds	r16, 0x0062
    114c:	10 91 63 00 	lds	r17, 0x0063


	if (!fs)						/* Check file system */
    1150:	01 15       	cp	r16, r1
    1152:	11 05       	cpc	r17, r1
    1154:	19 f4       	brne	.+6      	; 0x115c <pf_open+0x20>
    1156:	66 e0       	ldi	r22, 0x06	; 6
    1158:	70 e0       	ldi	r23, 0x00	; 0
    115a:	40 c0       	rjmp	.+128    	; 0x11dc <pf_open+0xa0>
		return FR_NOT_ENABLED;

	fs->flag = 0;
    115c:	f8 01       	movw	r30, r16
    115e:	11 82       	std	Z+1, r1	; 0x01
	dj.fn = sp;
    1160:	ce 01       	movw	r24, r28
    1162:	01 96       	adiw	r24, 0x01	; 1
    1164:	98 8b       	std	Y+16, r25	; 0x10
    1166:	8f 87       	std	Y+15, r24	; 0x0f
	res = follow_path(&dj, dir, path);	/* Follow the file path */
    1168:	6d e1       	ldi	r22, 0x1D	; 29
    116a:	e6 2e       	mov	r14, r22
    116c:	f1 2c       	mov	r15, r1
    116e:	ec 0e       	add	r14, r28
    1170:	fd 1e       	adc	r15, r29
    1172:	ce 01       	movw	r24, r28
    1174:	0d 96       	adiw	r24, 0x0d	; 13
    1176:	b7 01       	movw	r22, r14
    1178:	bf de       	rcall	.-642    	; 0xef8 <follow_path>
    117a:	bc 01       	movw	r22, r24
	if (res != FR_OK) return res;		/* Follow failed */
    117c:	00 97       	sbiw	r24, 0x00	; 0
    117e:	71 f5       	brne	.+92     	; 0x11dc <pf_open+0xa0>
	if (!dir[0] || (dir[DIR_Attr] & AM_DIR))	/* It is a directory */
    1180:	8d 8d       	ldd	r24, Y+29	; 0x1d
    1182:	88 23       	and	r24, r24
    1184:	49 f1       	breq	.+82     	; 0x11d8 <pf_open+0x9c>
    1186:	88 a5       	ldd	r24, Y+40	; 0x28
    1188:	84 fd       	sbrc	r24, 4
    118a:	26 c0       	rjmp	.+76     	; 0x11d8 <pf_open+0x9c>
		return FR_NO_FILE;

	fs->org_clust = LD_CLUST(dir);			/* File start cluster */
    118c:	f7 01       	movw	r30, r14
    118e:	84 89       	ldd	r24, Z+20	; 0x14
    1190:	95 89       	ldd	r25, Z+21	; 0x15
    1192:	a0 e0       	ldi	r26, 0x00	; 0
    1194:	b0 e0       	ldi	r27, 0x00	; 0
    1196:	dc 01       	movw	r26, r24
    1198:	99 27       	eor	r25, r25
    119a:	88 27       	eor	r24, r24
    119c:	22 8d       	ldd	r18, Z+26	; 0x1a
    119e:	33 8d       	ldd	r19, Z+27	; 0x1b
    11a0:	40 e0       	ldi	r20, 0x00	; 0
    11a2:	50 e0       	ldi	r21, 0x00	; 0
    11a4:	82 2b       	or	r24, r18
    11a6:	93 2b       	or	r25, r19
    11a8:	a4 2b       	or	r26, r20
    11aa:	b5 2b       	or	r27, r21
    11ac:	f8 01       	movw	r30, r16
    11ae:	86 8f       	std	Z+30, r24	; 0x1e
    11b0:	97 8f       	std	Z+31, r25	; 0x1f
    11b2:	a0 a3       	std	Z+32, r26	; 0x20
    11b4:	b1 a3       	std	Z+33, r27	; 0x21
	fs->fsize = LD_DWORD(dir+DIR_FileSize);	/* File size */
    11b6:	f7 01       	movw	r30, r14
    11b8:	84 8d       	ldd	r24, Z+28	; 0x1c
    11ba:	95 8d       	ldd	r25, Z+29	; 0x1d
    11bc:	a6 8d       	ldd	r26, Z+30	; 0x1e
    11be:	b7 8d       	ldd	r27, Z+31	; 0x1f
    11c0:	f8 01       	movw	r30, r16
    11c2:	82 8f       	std	Z+26, r24	; 0x1a
    11c4:	93 8f       	std	Z+27, r25	; 0x1b
    11c6:	a4 8f       	std	Z+28, r26	; 0x1c
    11c8:	b5 8f       	std	Z+29, r27	; 0x1d
	fs->fptr = 0;						/* File pointer */
    11ca:	16 8a       	std	Z+22, r1	; 0x16
    11cc:	17 8a       	std	Z+23, r1	; 0x17
    11ce:	10 8e       	std	Z+24, r1	; 0x18
    11d0:	11 8e       	std	Z+25, r1	; 0x19
	fs->flag = FA_OPENED;
    11d2:	81 e0       	ldi	r24, 0x01	; 1
    11d4:	81 83       	std	Z+1, r24	; 0x01
    11d6:	02 c0       	rjmp	.+4      	; 0x11dc <pf_open+0xa0>

	return FR_OK;
    11d8:	63 e0       	ldi	r22, 0x03	; 3
    11da:	70 e0       	ldi	r23, 0x00	; 0
}
    11dc:	cb 01       	movw	r24, r22
    11de:	ec 96       	adiw	r28, 0x3c	; 60
    11e0:	e6 e0       	ldi	r30, 0x06	; 6
    11e2:	a7 c3       	rjmp	.+1870   	; 0x1932 <__epilogue_restores__+0x18>

000011e4 <pf_read>:
FRESULT pf_read (
	void* buff,		/* Pointer to the read buffer (NULL:Forward data to the stream)*/
	WORD btr,		/* Number of bytes to read */
	WORD* br		/* Pointer to number of bytes read */
)
{
    11e4:	a0 e0       	ldi	r26, 0x00	; 0
    11e6:	b0 e0       	ldi	r27, 0x00	; 0
    11e8:	e7 ef       	ldi	r30, 0xF7	; 247
    11ea:	f8 e0       	ldi	r31, 0x08	; 8
    11ec:	7c c3       	rjmp	.+1784   	; 0x18e6 <__prologue_saves__+0x4>
    11ee:	3c 01       	movw	r6, r24
    11f0:	6b 01       	movw	r12, r22
    11f2:	4a 01       	movw	r8, r20
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
	FATFS *fs = FatFs;
    11f4:	c0 91 62 00 	lds	r28, 0x0062
    11f8:	d0 91 63 00 	lds	r29, 0x0063


	*br = 0;
    11fc:	fa 01       	movw	r30, r20
    11fe:	11 82       	std	Z+1, r1	; 0x01
    1200:	10 82       	st	Z, r1
	if (!fs) return FR_NOT_ENABLED;		/* Check file system */
    1202:	20 97       	sbiw	r28, 0x00	; 0
    1204:	19 f4       	brne	.+6      	; 0x120c <pf_read+0x28>
    1206:	26 e0       	ldi	r18, 0x06	; 6
    1208:	30 e0       	ldi	r19, 0x00	; 0
    120a:	ca c0       	rjmp	.+404    	; 0x13a0 <pf_read+0x1bc>
	if (!(fs->flag & FA_OPENED))		/* Check if opened */
    120c:	89 81       	ldd	r24, Y+1	; 0x01
    120e:	80 fd       	sbrc	r24, 0
    1210:	03 c0       	rjmp	.+6      	; 0x1218 <pf_read+0x34>
    1212:	25 e0       	ldi	r18, 0x05	; 5
    1214:	30 e0       	ldi	r19, 0x00	; 0
    1216:	c4 c0       	rjmp	.+392    	; 0x13a0 <pf_read+0x1bc>
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
    1218:	2a 8d       	ldd	r18, Y+26	; 0x1a
    121a:	3b 8d       	ldd	r19, Y+27	; 0x1b
    121c:	4c 8d       	ldd	r20, Y+28	; 0x1c
    121e:	5d 8d       	ldd	r21, Y+29	; 0x1d
    1220:	8e 89       	ldd	r24, Y+22	; 0x16
    1222:	9f 89       	ldd	r25, Y+23	; 0x17
    1224:	a8 8d       	ldd	r26, Y+24	; 0x18
    1226:	b9 8d       	ldd	r27, Y+25	; 0x19
    1228:	28 1b       	sub	r18, r24
    122a:	39 0b       	sbc	r19, r25
    122c:	4a 0b       	sbc	r20, r26
    122e:	5b 0b       	sbc	r21, r27
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */
    1230:	cb 01       	movw	r24, r22
    1232:	a0 e0       	ldi	r26, 0x00	; 0
    1234:	b0 e0       	ldi	r27, 0x00	; 0
    1236:	28 17       	cp	r18, r24
    1238:	39 07       	cpc	r19, r25
    123a:	4a 07       	cpc	r20, r26
    123c:	5b 07       	cpc	r21, r27
    123e:	08 f4       	brcc	.+2      	; 0x1242 <pf_read+0x5e>
    1240:	69 01       	movw	r12, r18
{
	DRESULT dr;
	CLUST clst;
	DWORD sect, remain;
	WORD rcnt;
	BYTE cs, *rbuff = buff;
    1242:	53 01       	movw	r10, r6
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
			fs->dsect = sect + cs;
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1244:	41 2c       	mov	r4, r1
    1246:	e2 e0       	ldi	r30, 0x02	; 2
    1248:	5e 2e       	mov	r5, r30
    124a:	a0 c0       	rjmp	.+320    	; 0x138c <pf_read+0x1a8>

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
		if ((fs->fptr % 512) == 0) {				/* On the sector boundary? */
    124c:	2e 89       	ldd	r18, Y+22	; 0x16
    124e:	3f 89       	ldd	r19, Y+23	; 0x17
    1250:	48 8d       	ldd	r20, Y+24	; 0x18
    1252:	59 8d       	ldd	r21, Y+25	; 0x19
    1254:	da 01       	movw	r26, r20
    1256:	c9 01       	movw	r24, r18
    1258:	91 70       	andi	r25, 0x01	; 1
    125a:	a0 70       	andi	r26, 0x00	; 0
    125c:	b0 70       	andi	r27, 0x00	; 0
    125e:	00 97       	sbiw	r24, 0x00	; 0
    1260:	a1 05       	cpc	r26, r1
    1262:	b1 05       	cpc	r27, r1
    1264:	09 f0       	breq	.+2      	; 0x1268 <pf_read+0x84>
    1266:	5e c0       	rjmp	.+188    	; 0x1324 <pf_read+0x140>
			cs = (BYTE)(fs->fptr / 512 & (fs->csize - 1));	/* Sector offset in the cluster */
    1268:	da 01       	movw	r26, r20
    126a:	c9 01       	movw	r24, r18
    126c:	79 e0       	ldi	r23, 0x09	; 9
    126e:	b6 95       	lsr	r27
    1270:	a7 95       	ror	r26
    1272:	97 95       	ror	r25
    1274:	87 95       	ror	r24
    1276:	7a 95       	dec	r23
    1278:	d1 f7       	brne	.-12     	; 0x126e <pf_read+0x8a>
    127a:	fa 80       	ldd	r15, Y+2	; 0x02
    127c:	fa 94       	dec	r15
    127e:	f8 22       	and	r15, r24
			if (!cs) {								/* On the cluster boundary? */
    1280:	c9 f4       	brne	.+50     	; 0x12b4 <pf_read+0xd0>
				clst = (fs->fptr == 0) ?			/* On the top of the file? */
    1282:	21 15       	cp	r18, r1
    1284:	31 05       	cpc	r19, r1
    1286:	41 05       	cpc	r20, r1
    1288:	51 05       	cpc	r21, r1
    128a:	29 f4       	brne	.+10     	; 0x1296 <pf_read+0xb2>
    128c:	6e 8d       	ldd	r22, Y+30	; 0x1e
    128e:	7f 8d       	ldd	r23, Y+31	; 0x1f
    1290:	88 a1       	ldd	r24, Y+32	; 0x20
    1292:	99 a1       	ldd	r25, Y+33	; 0x21
    1294:	05 c0       	rjmp	.+10     	; 0x12a0 <pf_read+0xbc>
    1296:	6a a1       	ldd	r22, Y+34	; 0x22
    1298:	7b a1       	ldd	r23, Y+35	; 0x23
    129a:	8c a1       	ldd	r24, Y+36	; 0x24
    129c:	9d a1       	ldd	r25, Y+37	; 0x25
    129e:	d5 da       	rcall	.-2646   	; 0x84a <get_fat>
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
    12a0:	62 30       	cpi	r22, 0x02	; 2
    12a2:	71 05       	cpc	r23, r1
    12a4:	81 05       	cpc	r24, r1
    12a6:	91 05       	cpc	r25, r1
    12a8:	08 f4       	brcc	.+2      	; 0x12ac <pf_read+0xc8>
    12aa:	77 c0       	rjmp	.+238    	; 0x139a <pf_read+0x1b6>
				fs->curr_clust = clst;				/* Update current cluster */
    12ac:	6a a3       	std	Y+34, r22	; 0x22
    12ae:	7b a3       	std	Y+35, r23	; 0x23
    12b0:	8c a3       	std	Y+36, r24	; 0x24
    12b2:	9d a3       	std	Y+37, r25	; 0x25
static
DWORD clust2sect (	/* !=0: Sector number, 0: Failed - invalid cluster# */
	CLUST clst		/* Cluster# to be converted */
)
{
	FATFS *fs = FatFs;
    12b4:	00 91 62 00 	lds	r16, 0x0062
    12b8:	10 91 63 00 	lds	r17, 0x0063


	clst -= 2;
    12bc:	2a a1       	ldd	r18, Y+34	; 0x22
    12be:	3b a1       	ldd	r19, Y+35	; 0x23
    12c0:	4c a1       	ldd	r20, Y+36	; 0x24
    12c2:	5d a1       	ldd	r21, Y+37	; 0x25
    12c4:	22 50       	subi	r18, 0x02	; 2
    12c6:	30 40       	sbci	r19, 0x00	; 0
    12c8:	40 40       	sbci	r20, 0x00	; 0
    12ca:	50 40       	sbci	r21, 0x00	; 0
	if (clst >= (fs->n_fatent - 2)) return 0;		/* Invalid cluster# */
    12cc:	f8 01       	movw	r30, r16
    12ce:	86 81       	ldd	r24, Z+6	; 0x06
    12d0:	97 81       	ldd	r25, Z+7	; 0x07
    12d2:	a0 85       	ldd	r26, Z+8	; 0x08
    12d4:	b1 85       	ldd	r27, Z+9	; 0x09
    12d6:	02 97       	sbiw	r24, 0x02	; 2
    12d8:	a1 09       	sbc	r26, r1
    12da:	b1 09       	sbc	r27, r1
    12dc:	28 17       	cp	r18, r24
    12de:	39 07       	cpc	r19, r25
    12e0:	4a 07       	cpc	r20, r26
    12e2:	5b 07       	cpc	r21, r27
    12e4:	08 f0       	brcs	.+2      	; 0x12e8 <pf_read+0x104>
    12e6:	59 c0       	rjmp	.+178    	; 0x139a <pf_read+0x1b6>
	return (DWORD)clst * fs->csize + fs->database;
    12e8:	62 81       	ldd	r22, Z+2	; 0x02
    12ea:	70 e0       	ldi	r23, 0x00	; 0
    12ec:	80 e0       	ldi	r24, 0x00	; 0
    12ee:	90 e0       	ldi	r25, 0x00	; 0
    12f0:	b1 d2       	rcall	.+1378   	; 0x1854 <__mulsi3>
    12f2:	9b 01       	movw	r18, r22
    12f4:	ac 01       	movw	r20, r24
    12f6:	f8 01       	movw	r30, r16
    12f8:	82 89       	ldd	r24, Z+18	; 0x12
    12fa:	93 89       	ldd	r25, Z+19	; 0x13
    12fc:	a4 89       	ldd	r26, Z+20	; 0x14
    12fe:	b5 89       	ldd	r27, Z+21	; 0x15
    1300:	28 0f       	add	r18, r24
    1302:	39 1f       	adc	r19, r25
    1304:	4a 1f       	adc	r20, r26
    1306:	5b 1f       	adc	r21, r27
					fs->org_clust : get_fat(fs->curr_clust);
				if (clst <= 1) goto fr_abort;
				fs->curr_clust = clst;				/* Update current cluster */
			}
			sect = clust2sect(fs->curr_clust);		/* Get current sector */
			if (!sect) goto fr_abort;
    1308:	21 15       	cp	r18, r1
    130a:	31 05       	cpc	r19, r1
    130c:	41 05       	cpc	r20, r1
    130e:	51 05       	cpc	r21, r1
    1310:	09 f4       	brne	.+2      	; 0x1314 <pf_read+0x130>
    1312:	43 c0       	rjmp	.+134    	; 0x139a <pf_read+0x1b6>
			fs->dsect = sect + cs;
    1314:	2f 0d       	add	r18, r15
    1316:	31 1d       	adc	r19, r1
    1318:	41 1d       	adc	r20, r1
    131a:	51 1d       	adc	r21, r1
    131c:	2e a3       	std	Y+38, r18	; 0x26
    131e:	3f a3       	std	Y+39, r19	; 0x27
    1320:	48 a7       	std	Y+40, r20	; 0x28
    1322:	59 a7       	std	Y+41, r21	; 0x29
		}
		rcnt = (WORD)(512 - (fs->fptr % 512));		/* Get partial sector data from sector buffer */
    1324:	2e 89       	ldd	r18, Y+22	; 0x16
    1326:	3f 89       	ldd	r19, Y+23	; 0x17
    1328:	31 70       	andi	r19, 0x01	; 1
    132a:	c2 01       	movw	r24, r4
    132c:	82 1b       	sub	r24, r18
    132e:	93 0b       	sbc	r25, r19
    1330:	76 01       	movw	r14, r12
    1332:	8c 15       	cp	r24, r12
    1334:	9d 05       	cpc	r25, r13
    1336:	08 f4       	brcc	.+2      	; 0x133a <pf_read+0x156>
    1338:	7c 01       	movw	r14, r24
		if (rcnt > btr) rcnt = btr;
		dr = disk_readp(!buff ? 0 : rbuff, fs->dsect, (WORD)(fs->fptr % 512), rcnt);
    133a:	61 14       	cp	r6, r1
    133c:	71 04       	cpc	r7, r1
    133e:	19 f4       	brne	.+6      	; 0x1346 <pf_read+0x162>
    1340:	80 e0       	ldi	r24, 0x00	; 0
    1342:	90 e0       	ldi	r25, 0x00	; 0
    1344:	01 c0       	rjmp	.+2      	; 0x1348 <pf_read+0x164>
    1346:	c5 01       	movw	r24, r10
    1348:	4e a1       	ldd	r20, Y+38	; 0x26
    134a:	5f a1       	ldd	r21, Y+39	; 0x27
    134c:	68 a5       	ldd	r22, Y+40	; 0x28
    134e:	79 a5       	ldd	r23, Y+41	; 0x29
    1350:	87 01       	movw	r16, r14
    1352:	b4 d1       	rcall	.+872    	; 0x16bc <disk_readp>
		if (dr) goto fr_abort;
    1354:	89 2b       	or	r24, r25
    1356:	09 f5       	brne	.+66     	; 0x139a <pf_read+0x1b6>
		fs->fptr += rcnt; rbuff += rcnt;			/* Update pointers and counters */
    1358:	c7 01       	movw	r24, r14
    135a:	a0 e0       	ldi	r26, 0x00	; 0
    135c:	b0 e0       	ldi	r27, 0x00	; 0
    135e:	2e 89       	ldd	r18, Y+22	; 0x16
    1360:	3f 89       	ldd	r19, Y+23	; 0x17
    1362:	48 8d       	ldd	r20, Y+24	; 0x18
    1364:	59 8d       	ldd	r21, Y+25	; 0x19
    1366:	28 0f       	add	r18, r24
    1368:	39 1f       	adc	r19, r25
    136a:	4a 1f       	adc	r20, r26
    136c:	5b 1f       	adc	r21, r27
    136e:	2e 8b       	std	Y+22, r18	; 0x16
    1370:	3f 8b       	std	Y+23, r19	; 0x17
    1372:	48 8f       	std	Y+24, r20	; 0x18
    1374:	59 8f       	std	Y+25, r21	; 0x19
    1376:	ae 0c       	add	r10, r14
    1378:	bf 1c       	adc	r11, r15
		btr -= rcnt; *br += rcnt;
    137a:	ce 18       	sub	r12, r14
    137c:	df 08       	sbc	r13, r15
    137e:	f4 01       	movw	r30, r8
    1380:	80 81       	ld	r24, Z
    1382:	91 81       	ldd	r25, Z+1	; 0x01
    1384:	8e 0d       	add	r24, r14
    1386:	9f 1d       	adc	r25, r15
    1388:	91 83       	std	Z+1, r25	; 0x01
    138a:	80 83       	st	Z, r24
		return FR_NOT_OPENED;

	remain = fs->fsize - fs->fptr;
	if (btr > remain) btr = (WORD)remain;			/* Truncate btr by remaining bytes */

	while (btr)	{									/* Repeat until all data transferred */
    138c:	c1 14       	cp	r12, r1
    138e:	d1 04       	cpc	r13, r1
    1390:	09 f0       	breq	.+2      	; 0x1394 <pf_read+0x1b0>
    1392:	5c cf       	rjmp	.-328    	; 0x124c <pf_read+0x68>
    1394:	20 e0       	ldi	r18, 0x00	; 0
    1396:	30 e0       	ldi	r19, 0x00	; 0
    1398:	03 c0       	rjmp	.+6      	; 0x13a0 <pf_read+0x1bc>
	}

	return FR_OK;

fr_abort:
	fs->flag = 0;
    139a:	19 82       	std	Y+1, r1	; 0x01
    139c:	21 e0       	ldi	r18, 0x01	; 1
    139e:	30 e0       	ldi	r19, 0x00	; 0
	return FR_DISK_ERR;
}
    13a0:	c9 01       	movw	r24, r18
    13a2:	cd b7       	in	r28, 0x3d	; 61
    13a4:	de b7       	in	r29, 0x3e	; 62
    13a6:	e0 e1       	ldi	r30, 0x10	; 16
    13a8:	ba c2       	rjmp	.+1396   	; 0x191e <__epilogue_restores__+0x4>

000013aa <check_fs>:
static
BYTE check_fs (	/* 0:The FAT boot record, 1:Valid boot record but not an FAT, 2:Not a boot record, 3:Error */
	BYTE *buf,	/* Working buffer */
	DWORD sect	/* Sector# (lba) to check if it is an FAT boot record or not */
)
{
    13aa:	a0 e0       	ldi	r26, 0x00	; 0
    13ac:	b0 e0       	ldi	r27, 0x00	; 0
    13ae:	ea ed       	ldi	r30, 0xDA	; 218
    13b0:	f9 e0       	ldi	r31, 0x09	; 9
    13b2:	9f c2       	rjmp	.+1342   	; 0x18f2 <__prologue_saves__+0x10>
    13b4:	b8 2e       	mov	r11, r24
    13b6:	a9 2e       	mov	r10, r25
    13b8:	6a 01       	movw	r12, r20
    13ba:	7b 01       	movw	r14, r22
	if (disk_readp(buf, sect, 510, 2))		/* Read the boot sector */
    13bc:	2e ef       	ldi	r18, 0xFE	; 254
    13be:	31 e0       	ldi	r19, 0x01	; 1
    13c0:	02 e0       	ldi	r16, 0x02	; 2
    13c2:	10 e0       	ldi	r17, 0x00	; 0
    13c4:	7b d1       	rcall	.+758    	; 0x16bc <disk_readp>
    13c6:	89 2b       	or	r24, r25
    13c8:	11 f0       	breq	.+4      	; 0x13ce <check_fs+0x24>
    13ca:	23 e0       	ldi	r18, 0x03	; 3
    13cc:	31 c0       	rjmp	.+98     	; 0x1430 <check_fs+0x86>
		return 3;
	if (LD_WORD(buf) != 0xAA55)				/* Check record signature */
    13ce:	cb 2d       	mov	r28, r11
    13d0:	da 2d       	mov	r29, r10
    13d2:	88 81       	ld	r24, Y
    13d4:	99 81       	ldd	r25, Y+1	; 0x01
    13d6:	85 55       	subi	r24, 0x55	; 85
    13d8:	9a 4a       	sbci	r25, 0xAA	; 170
    13da:	11 f0       	breq	.+4      	; 0x13e0 <check_fs+0x36>
    13dc:	22 e0       	ldi	r18, 0x02	; 2
    13de:	28 c0       	rjmp	.+80     	; 0x1430 <check_fs+0x86>
		return 2;

	if (!disk_readp(buf, sect, BS_FilSysType, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT12/16 */
    13e0:	8b 2d       	mov	r24, r11
    13e2:	9a 2d       	mov	r25, r10
    13e4:	b7 01       	movw	r22, r14
    13e6:	a6 01       	movw	r20, r12
    13e8:	26 e3       	ldi	r18, 0x36	; 54
    13ea:	30 e0       	ldi	r19, 0x00	; 0
    13ec:	02 e0       	ldi	r16, 0x02	; 2
    13ee:	10 e0       	ldi	r17, 0x00	; 0
    13f0:	65 d1       	rcall	.+714    	; 0x16bc <disk_readp>
    13f2:	89 2b       	or	r24, r25
    13f4:	39 f4       	brne	.+14     	; 0x1404 <check_fs+0x5a>
    13f6:	88 81       	ld	r24, Y
    13f8:	99 81       	ldd	r25, Y+1	; 0x01
    13fa:	86 54       	subi	r24, 0x46	; 70
    13fc:	91 44       	sbci	r25, 0x41	; 65
    13fe:	11 f4       	brne	.+4      	; 0x1404 <check_fs+0x5a>
    1400:	20 e0       	ldi	r18, 0x00	; 0
    1402:	16 c0       	rjmp	.+44     	; 0x1430 <check_fs+0x86>
		return 0;
	if (_FS_FAT32 && !disk_readp(buf, sect, BS_FilSysType32, 2) && LD_WORD(buf) == 0x4146)	/* Check FAT32 */
    1404:	8b 2d       	mov	r24, r11
    1406:	9a 2d       	mov	r25, r10
    1408:	b7 01       	movw	r22, r14
    140a:	a6 01       	movw	r20, r12
    140c:	22 e5       	ldi	r18, 0x52	; 82
    140e:	30 e0       	ldi	r19, 0x00	; 0
    1410:	02 e0       	ldi	r16, 0x02	; 2
    1412:	10 e0       	ldi	r17, 0x00	; 0
    1414:	53 d1       	rcall	.+678    	; 0x16bc <disk_readp>
    1416:	89 2b       	or	r24, r25
    1418:	11 f0       	breq	.+4      	; 0x141e <check_fs+0x74>
    141a:	21 e0       	ldi	r18, 0x01	; 1
    141c:	09 c0       	rjmp	.+18     	; 0x1430 <check_fs+0x86>
    141e:	20 e0       	ldi	r18, 0x00	; 0
    1420:	88 81       	ld	r24, Y
    1422:	99 81       	ldd	r25, Y+1	; 0x01
    1424:	86 54       	subi	r24, 0x46	; 70
    1426:	91 44       	sbci	r25, 0x41	; 65
    1428:	09 f4       	brne	.+2      	; 0x142c <check_fs+0x82>
    142a:	21 e0       	ldi	r18, 0x01	; 1
    142c:	81 e0       	ldi	r24, 0x01	; 1
    142e:	28 27       	eor	r18, r24
		return 0;
	return 1;
}
    1430:	82 2f       	mov	r24, r18
    1432:	cd b7       	in	r28, 0x3d	; 61
    1434:	de b7       	in	r29, 0x3e	; 62
    1436:	ea e0       	ldi	r30, 0x0A	; 10
    1438:	78 c2       	rjmp	.+1264   	; 0x192a <__epilogue_restores__+0x10>

0000143a <pf_mount>:
/*-----------------------------------------------------------------------*/

FRESULT pf_mount (
	FATFS *fs		/* Pointer to new file system object (NULL: Unmount) */
)
{
    143a:	a4 e2       	ldi	r26, 0x24	; 36
    143c:	b0 e0       	ldi	r27, 0x00	; 0
    143e:	e2 e2       	ldi	r30, 0x22	; 34
    1440:	fa e0       	ldi	r31, 0x0A	; 10
    1442:	53 c2       	rjmp	.+1190   	; 0x18ea <__prologue_saves__+0x8>
    1444:	5c 01       	movw	r10, r24
	BYTE fmt, buf[36];
	DWORD bsect, fsize, tsect, mclst;


	FatFs = 0;
    1446:	10 92 63 00 	sts	0x0063, r1
    144a:	10 92 62 00 	sts	0x0062, r1
	if (!fs) return FR_OK;				/* Unregister fs object */
    144e:	00 97       	sbiw	r24, 0x00	; 0
    1450:	09 f4       	brne	.+2      	; 0x1454 <pf_mount+0x1a>
    1452:	e6 c0       	rjmp	.+460    	; 0x1620 <pf_mount+0x1e6>

	if (disk_initialize() & STA_NOINIT)	/* Check if the drive is ready or not */
    1454:	63 d1       	rcall	.+710    	; 0x171c <disk_initialize>
    1456:	80 ff       	sbrs	r24, 0
    1458:	03 c0       	rjmp	.+6      	; 0x1460 <pf_mount+0x26>
    145a:	22 e0       	ldi	r18, 0x02	; 2
    145c:	30 e0       	ldi	r19, 0x00	; 0
    145e:	e8 c0       	rjmp	.+464    	; 0x1630 <pf_mount+0x1f6>
		return FR_NOT_READY;

	/* Search FAT partition on the drive */
	bsect = 0;
	fmt = check_fs(buf, bsect);			/* Check sector 0 as an SFD format */
    1460:	4e 01       	movw	r8, r28
    1462:	08 94       	sec
    1464:	81 1c       	adc	r8, r1
    1466:	91 1c       	adc	r9, r1
    1468:	c4 01       	movw	r24, r8
    146a:	40 e0       	ldi	r20, 0x00	; 0
    146c:	50 e0       	ldi	r21, 0x00	; 0
    146e:	60 e0       	ldi	r22, 0x00	; 0
    1470:	70 e0       	ldi	r23, 0x00	; 0
    1472:	9b df       	rcall	.-202    	; 0x13aa <check_fs>
	if (fmt == 1) {						/* Not an FAT boot record, it may be FDISK format */
    1474:	81 30       	cpi	r24, 0x01	; 1
    1476:	21 f0       	breq	.+8      	; 0x1480 <pf_mount+0x46>
    1478:	cc 24       	eor	r12, r12
    147a:	dd 24       	eor	r13, r13
    147c:	76 01       	movw	r14, r12
    147e:	19 c0       	rjmp	.+50     	; 0x14b2 <pf_mount+0x78>
		/* Check a partition listed in top of the partition table */
		if (disk_readp(buf, bsect, MBR_Table, 16)) {	/* 1st partition entry */
    1480:	c4 01       	movw	r24, r8
    1482:	40 e0       	ldi	r20, 0x00	; 0
    1484:	50 e0       	ldi	r21, 0x00	; 0
    1486:	60 e0       	ldi	r22, 0x00	; 0
    1488:	70 e0       	ldi	r23, 0x00	; 0
    148a:	2e eb       	ldi	r18, 0xBE	; 190
    148c:	31 e0       	ldi	r19, 0x01	; 1
    148e:	00 e1       	ldi	r16, 0x10	; 16
    1490:	10 e0       	ldi	r17, 0x00	; 0
    1492:	14 d1       	rcall	.+552    	; 0x16bc <disk_readp>
    1494:	89 2b       	or	r24, r25
    1496:	09 f0       	breq	.+2      	; 0x149a <pf_mount+0x60>
    1498:	c6 c0       	rjmp	.+396    	; 0x1626 <pf_mount+0x1ec>
			fmt = 3;
		} else {
			if (buf[4]) {					/* Is the partition existing? */
    149a:	8d 81       	ldd	r24, Y+5	; 0x05
    149c:	88 23       	and	r24, r24
    149e:	09 f4       	brne	.+2      	; 0x14a2 <pf_mount+0x68>
    14a0:	c5 c0       	rjmp	.+394    	; 0x162c <pf_mount+0x1f2>
				bsect = LD_DWORD(&buf[8]);	/* Partition offset in LBA */
    14a2:	c9 84       	ldd	r12, Y+9	; 0x09
    14a4:	da 84       	ldd	r13, Y+10	; 0x0a
    14a6:	eb 84       	ldd	r14, Y+11	; 0x0b
    14a8:	fc 84       	ldd	r15, Y+12	; 0x0c
				fmt = check_fs(buf, bsect);	/* Check the partition */
    14aa:	c4 01       	movw	r24, r8
    14ac:	b7 01       	movw	r22, r14
    14ae:	a6 01       	movw	r20, r12
    14b0:	7c df       	rcall	.-264    	; 0x13aa <check_fs>
			}
		}
	}
	if (fmt == 3) return FR_DISK_ERR;
    14b2:	83 30       	cpi	r24, 0x03	; 3
    14b4:	09 f4       	brne	.+2      	; 0x14b8 <pf_mount+0x7e>
    14b6:	b7 c0       	rjmp	.+366    	; 0x1626 <pf_mount+0x1ec>
	if (fmt) return FR_NO_FILESYSTEM;	/* No valid FAT patition is found */
    14b8:	88 23       	and	r24, r24
    14ba:	09 f0       	breq	.+2      	; 0x14be <pf_mount+0x84>
    14bc:	b7 c0       	rjmp	.+366    	; 0x162c <pf_mount+0x1f2>

	/* Initialize the file system object */
	if (disk_readp(buf, bsect, 13, sizeof(buf))) return FR_DISK_ERR;
    14be:	ce 01       	movw	r24, r28
    14c0:	01 96       	adiw	r24, 0x01	; 1
    14c2:	b7 01       	movw	r22, r14
    14c4:	a6 01       	movw	r20, r12
    14c6:	2d e0       	ldi	r18, 0x0D	; 13
    14c8:	30 e0       	ldi	r19, 0x00	; 0
    14ca:	04 e2       	ldi	r16, 0x24	; 36
    14cc:	10 e0       	ldi	r17, 0x00	; 0
    14ce:	f6 d0       	rcall	.+492    	; 0x16bc <disk_readp>
    14d0:	89 2b       	or	r24, r25
    14d2:	09 f0       	breq	.+2      	; 0x14d6 <pf_mount+0x9c>
    14d4:	a8 c0       	rjmp	.+336    	; 0x1626 <pf_mount+0x1ec>

	fsize = LD_WORD(buf+BPB_FATSz16-13);				/* Number of sectors per FAT */
    14d6:	8a 85       	ldd	r24, Y+10	; 0x0a
    14d8:	9b 85       	ldd	r25, Y+11	; 0x0b
    14da:	bc 01       	movw	r22, r24
    14dc:	80 e0       	ldi	r24, 0x00	; 0
    14de:	90 e0       	ldi	r25, 0x00	; 0
	if (!fsize) fsize = LD_DWORD(buf+BPB_FATSz32-13);
    14e0:	61 15       	cp	r22, r1
    14e2:	71 05       	cpc	r23, r1
    14e4:	81 05       	cpc	r24, r1
    14e6:	91 05       	cpc	r25, r1
    14e8:	21 f4       	brne	.+8      	; 0x14f2 <pf_mount+0xb8>
    14ea:	68 8d       	ldd	r22, Y+24	; 0x18
    14ec:	79 8d       	ldd	r23, Y+25	; 0x19
    14ee:	8a 8d       	ldd	r24, Y+26	; 0x1a
    14f0:	9b 8d       	ldd	r25, Y+27	; 0x1b

	fsize *= buf[BPB_NumFATs-13];						/* Number of sectors in FAT area */
    14f2:	2c 81       	ldd	r18, Y+4	; 0x04
    14f4:	30 e0       	ldi	r19, 0x00	; 0
    14f6:	40 e0       	ldi	r20, 0x00	; 0
    14f8:	50 e0       	ldi	r21, 0x00	; 0
    14fa:	ac d1       	rcall	.+856    	; 0x1854 <__mulsi3>
    14fc:	3b 01       	movw	r6, r22
    14fe:	4c 01       	movw	r8, r24
	fs->fatbase = bsect + LD_WORD(buf+BPB_RsvdSecCnt-13); /* FAT start sector (lba) */
    1500:	8a 81       	ldd	r24, Y+2	; 0x02
    1502:	9b 81       	ldd	r25, Y+3	; 0x03
    1504:	a0 e0       	ldi	r26, 0x00	; 0
    1506:	b0 e0       	ldi	r27, 0x00	; 0
    1508:	c8 0e       	add	r12, r24
    150a:	d9 1e       	adc	r13, r25
    150c:	ea 1e       	adc	r14, r26
    150e:	fb 1e       	adc	r15, r27
    1510:	f5 01       	movw	r30, r10
    1512:	c2 86       	std	Z+10, r12	; 0x0a
    1514:	d3 86       	std	Z+11, r13	; 0x0b
    1516:	e4 86       	std	Z+12, r14	; 0x0c
    1518:	f5 86       	std	Z+13, r15	; 0x0d
	fs->csize = buf[BPB_SecPerClus-13];					/* Number of sectors per cluster */
    151a:	89 81       	ldd	r24, Y+1	; 0x01
    151c:	82 83       	std	Z+2, r24	; 0x02
	fs->n_rootdir = LD_WORD(buf+BPB_RootEntCnt-13);		/* Nmuber of root directory entries */
    151e:	2d 81       	ldd	r18, Y+5	; 0x05
    1520:	3e 81       	ldd	r19, Y+6	; 0x06
    1522:	35 83       	std	Z+5, r19	; 0x05
    1524:	24 83       	std	Z+4, r18	; 0x04
	tsect = LD_WORD(buf+BPB_TotSec16-13);				/* Number of sectors on the file system */
    1526:	8f 81       	ldd	r24, Y+7	; 0x07
    1528:	98 85       	ldd	r25, Y+8	; 0x08
    152a:	7c 01       	movw	r14, r24
    152c:	00 e0       	ldi	r16, 0x00	; 0
    152e:	10 e0       	ldi	r17, 0x00	; 0
	if (!tsect) tsect = LD_DWORD(buf+BPB_TotSec32-13);
    1530:	e1 14       	cp	r14, r1
    1532:	f1 04       	cpc	r15, r1
    1534:	01 05       	cpc	r16, r1
    1536:	11 05       	cpc	r17, r1
    1538:	21 f4       	brne	.+8      	; 0x1542 <pf_mount+0x108>
    153a:	ec 88       	ldd	r14, Y+20	; 0x14
    153c:	fd 88       	ldd	r15, Y+21	; 0x15
    153e:	0e 89       	ldd	r16, Y+22	; 0x16
    1540:	1f 89       	ldd	r17, Y+23	; 0x17
	mclst = (tsect						/* Last cluster# + 1 */
    1542:	8a 81       	ldd	r24, Y+2	; 0x02
    1544:	9b 81       	ldd	r25, Y+3	; 0x03
    1546:	a0 e0       	ldi	r26, 0x00	; 0
    1548:	b0 e0       	ldi	r27, 0x00	; 0
    154a:	e8 1a       	sub	r14, r24
    154c:	f9 0a       	sbc	r15, r25
    154e:	0a 0b       	sbc	r16, r26
    1550:	1b 0b       	sbc	r17, r27
    1552:	e6 18       	sub	r14, r6
    1554:	f7 08       	sbc	r15, r7
    1556:	08 09       	sbc	r16, r8
    1558:	19 09       	sbc	r17, r9
    155a:	b4 e0       	ldi	r27, 0x04	; 4
    155c:	36 95       	lsr	r19
    155e:	27 95       	ror	r18
    1560:	ba 95       	dec	r27
    1562:	e1 f7       	brne	.-8      	; 0x155c <pf_mount+0x122>
    1564:	c9 01       	movw	r24, r18
    1566:	a0 e0       	ldi	r26, 0x00	; 0
    1568:	b0 e0       	ldi	r27, 0x00	; 0
    156a:	e8 1a       	sub	r14, r24
    156c:	f9 0a       	sbc	r15, r25
    156e:	0a 0b       	sbc	r16, r26
    1570:	1b 0b       	sbc	r17, r27
    1572:	f5 01       	movw	r30, r10
    1574:	22 81       	ldd	r18, Z+2	; 0x02
    1576:	30 e0       	ldi	r19, 0x00	; 0
    1578:	40 e0       	ldi	r20, 0x00	; 0
    157a:	50 e0       	ldi	r21, 0x00	; 0
    157c:	c8 01       	movw	r24, r16
    157e:	b7 01       	movw	r22, r14
    1580:	8e d1       	rcall	.+796    	; 0x189e <__udivmodsi4>
    1582:	2e 5f       	subi	r18, 0xFE	; 254
    1584:	3f 4f       	sbci	r19, 0xFF	; 255
    1586:	4f 4f       	sbci	r20, 0xFF	; 255
    1588:	5f 4f       	sbci	r21, 0xFF	; 255
		- LD_WORD(buf+BPB_RsvdSecCnt-13) - fsize - fs->n_rootdir / 16
		) / fs->csize + 2;
	fs->n_fatent = (CLUST)mclst;
    158a:	f5 01       	movw	r30, r10
    158c:	26 83       	std	Z+6, r18	; 0x06
    158e:	37 83       	std	Z+7, r19	; 0x07
    1590:	40 87       	std	Z+8, r20	; 0x08
    1592:	51 87       	std	Z+9, r21	; 0x09

	fmt = FS_FAT16;							/* Determine the FAT sub type */
	if (mclst < 0xFF7) 						/* Number of clusters < 0xFF5 */
    1594:	27 3f       	cpi	r18, 0xF7	; 247
    1596:	ff e0       	ldi	r31, 0x0F	; 15
    1598:	3f 07       	cpc	r19, r31
    159a:	f0 e0       	ldi	r31, 0x00	; 0
    159c:	4f 07       	cpc	r20, r31
    159e:	f0 e0       	ldi	r31, 0x00	; 0
    15a0:	5f 07       	cpc	r21, r31
    15a2:	10 f4       	brcc	.+4      	; 0x15a8 <pf_mount+0x16e>
    15a4:	81 e0       	ldi	r24, 0x01	; 1
    15a6:	01 c0       	rjmp	.+2      	; 0x15aa <pf_mount+0x170>
    15a8:	82 e0       	ldi	r24, 0x02	; 2
#if _FS_FAT12
		fmt = FS_FAT12;
#else
		return FR_NO_FILESYSTEM;
#endif
	if (mclst >= 0xFFF7)					/* Number of clusters >= 0xFFF5 */
    15aa:	27 5f       	subi	r18, 0xF7	; 247
    15ac:	3f 4f       	sbci	r19, 0xFF	; 255
    15ae:	40 40       	sbci	r20, 0x00	; 0
    15b0:	50 40       	sbci	r21, 0x00	; 0
    15b2:	08 f0       	brcs	.+2      	; 0x15b6 <pf_mount+0x17c>
    15b4:	83 e0       	ldi	r24, 0x03	; 3
		fmt = FS_FAT32;
#else
		return FR_NO_FILESYSTEM;
#endif

	fs->fs_type = fmt;		/* FAT sub-type */
    15b6:	f5 01       	movw	r30, r10
    15b8:	80 83       	st	Z, r24
	if (_FS_FAT32 && fmt == FS_FAT32)
    15ba:	83 30       	cpi	r24, 0x03	; 3
    15bc:	29 f4       	brne	.+10     	; 0x15c8 <pf_mount+0x18e>
		fs->dirbase = LD_DWORD(buf+(BPB_RootClus-13));	/* Root directory start cluster */
    15be:	88 a1       	ldd	r24, Y+32	; 0x20
    15c0:	99 a1       	ldd	r25, Y+33	; 0x21
    15c2:	aa a1       	ldd	r26, Y+34	; 0x22
    15c4:	bb a1       	ldd	r27, Y+35	; 0x23
    15c6:	09 c0       	rjmp	.+18     	; 0x15da <pf_mount+0x1a0>
	else
		fs->dirbase = fs->fatbase + fsize;				/* Root directory start sector (lba) */
    15c8:	f5 01       	movw	r30, r10
    15ca:	82 85       	ldd	r24, Z+10	; 0x0a
    15cc:	93 85       	ldd	r25, Z+11	; 0x0b
    15ce:	a4 85       	ldd	r26, Z+12	; 0x0c
    15d0:	b5 85       	ldd	r27, Z+13	; 0x0d
    15d2:	86 0d       	add	r24, r6
    15d4:	97 1d       	adc	r25, r7
    15d6:	a8 1d       	adc	r26, r8
    15d8:	b9 1d       	adc	r27, r9
    15da:	86 87       	std	Z+14, r24	; 0x0e
    15dc:	97 87       	std	Z+15, r25	; 0x0f
    15de:	a0 8b       	std	Z+16, r26	; 0x10
    15e0:	b1 8b       	std	Z+17, r27	; 0x11
	fs->database = fs->fatbase + fsize + fs->n_rootdir / 16;	/* Data start sector (lba) */
    15e2:	f5 01       	movw	r30, r10
    15e4:	84 81       	ldd	r24, Z+4	; 0x04
    15e6:	95 81       	ldd	r25, Z+5	; 0x05
    15e8:	a4 e0       	ldi	r26, 0x04	; 4
    15ea:	96 95       	lsr	r25
    15ec:	87 95       	ror	r24
    15ee:	aa 95       	dec	r26
    15f0:	e1 f7       	brne	.-8      	; 0x15ea <pf_mount+0x1b0>
    15f2:	a0 e0       	ldi	r26, 0x00	; 0
    15f4:	b0 e0       	ldi	r27, 0x00	; 0
    15f6:	22 85       	ldd	r18, Z+10	; 0x0a
    15f8:	33 85       	ldd	r19, Z+11	; 0x0b
    15fa:	44 85       	ldd	r20, Z+12	; 0x0c
    15fc:	55 85       	ldd	r21, Z+13	; 0x0d
    15fe:	82 0f       	add	r24, r18
    1600:	93 1f       	adc	r25, r19
    1602:	a4 1f       	adc	r26, r20
    1604:	b5 1f       	adc	r27, r21
    1606:	86 0d       	add	r24, r6
    1608:	97 1d       	adc	r25, r7
    160a:	a8 1d       	adc	r26, r8
    160c:	b9 1d       	adc	r27, r9
    160e:	82 8b       	std	Z+18, r24	; 0x12
    1610:	93 8b       	std	Z+19, r25	; 0x13
    1612:	a4 8b       	std	Z+20, r26	; 0x14
    1614:	b5 8b       	std	Z+21, r27	; 0x15

	fs->flag = 0;
    1616:	11 82       	std	Z+1, r1	; 0x01
	FatFs = fs;
    1618:	b0 92 63 00 	sts	0x0063, r11
    161c:	a0 92 62 00 	sts	0x0062, r10
    1620:	20 e0       	ldi	r18, 0x00	; 0
    1622:	30 e0       	ldi	r19, 0x00	; 0
    1624:	05 c0       	rjmp	.+10     	; 0x1630 <pf_mount+0x1f6>

	return FR_OK;
    1626:	21 e0       	ldi	r18, 0x01	; 1
    1628:	30 e0       	ldi	r19, 0x00	; 0
    162a:	02 c0       	rjmp	.+4      	; 0x1630 <pf_mount+0x1f6>
    162c:	27 e0       	ldi	r18, 0x07	; 7
    162e:	30 e0       	ldi	r19, 0x00	; 0
}
    1630:	c9 01       	movw	r24, r18
    1632:	a4 96       	adiw	r28, 0x24	; 36
    1634:	ee e0       	ldi	r30, 0x0E	; 14
    1636:	75 c1       	rjmp	.+746    	; 0x1922 <__epilogue_restores__+0x8>

00001638 <send_cmd>:
static
BYTE send_cmd (
	BYTE cmd,		/* Command byte */
	DWORD arg		/* Argument */
)
{
    1638:	df 92       	push	r13
    163a:	ef 92       	push	r14
    163c:	ff 92       	push	r15
    163e:	0f 93       	push	r16
    1640:	1f 93       	push	r17
    1642:	d8 2e       	mov	r13, r24
    1644:	7a 01       	movw	r14, r20
    1646:	8b 01       	movw	r16, r22
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
    1648:	87 ff       	sbrs	r24, 7
    164a:	0a c0       	rjmp	.+20     	; 0x1660 <send_cmd+0x28>
		cmd &= 0x7F;
		res = send_cmd(CMD55, 0);
    164c:	87 e7       	ldi	r24, 0x77	; 119
    164e:	40 e0       	ldi	r20, 0x00	; 0
    1650:	50 e0       	ldi	r21, 0x00	; 0
    1652:	60 e0       	ldi	r22, 0x00	; 0
    1654:	70 e0       	ldi	r23, 0x00	; 0
    1656:	f0 df       	rcall	.-32     	; 0x1638 <send_cmd>
		if (res > 1) return res;
    1658:	82 30       	cpi	r24, 0x02	; 2
    165a:	50 f5       	brcc	.+84     	; 0x16b0 <send_cmd+0x78>
{
	BYTE n, res;


	if (cmd & 0x80) {	/* ACMD<n> is the command sequense of CMD55-CMD<n> */
		cmd &= 0x7F;
    165c:	8f e7       	ldi	r24, 0x7F	; 127
    165e:	d8 22       	and	r13, r24
		res = send_cmd(CMD55, 0);
		if (res > 1) return res;
	}

	/* Select the card and wait for ready */
	DESELECT();
    1660:	c0 9a       	sbi	0x18, 0	; 24
	rcv_spi();
    1662:	09 d5       	rcall	.+2578   	; 0x2076 <_etext+0x714>
	SELECT();
    1664:	c0 98       	cbi	0x18, 0	; 24
	rcv_spi();
    1666:	07 d5       	rcall	.+2574   	; 0x2076 <_etext+0x714>

	/* Send command packet */
	xmit_spi(cmd);						/* Start + Command index */
    1668:	8d 2d       	mov	r24, r13
    166a:	19 d5       	rcall	.+2610   	; 0x209e <_etext+0x73c>
	xmit_spi((BYTE)(arg >> 24));		/* Argument[31..24] */
    166c:	81 2f       	mov	r24, r17
    166e:	99 27       	eor	r25, r25
    1670:	aa 27       	eor	r26, r26
    1672:	bb 27       	eor	r27, r27
    1674:	14 d5       	rcall	.+2600   	; 0x209e <_etext+0x73c>
	xmit_spi((BYTE)(arg >> 16));		/* Argument[23..16] */
    1676:	c8 01       	movw	r24, r16
    1678:	aa 27       	eor	r26, r26
    167a:	bb 27       	eor	r27, r27
    167c:	10 d5       	rcall	.+2592   	; 0x209e <_etext+0x73c>
	xmit_spi((BYTE)(arg >> 8));			/* Argument[15..8] */
    167e:	bb 27       	eor	r27, r27
    1680:	a1 2f       	mov	r26, r17
    1682:	90 2f       	mov	r25, r16
    1684:	8f 2d       	mov	r24, r15
    1686:	0b d5       	rcall	.+2582   	; 0x209e <_etext+0x73c>
	xmit_spi((BYTE)arg);				/* Argument[7..0] */
    1688:	8e 2d       	mov	r24, r14
    168a:	09 d5       	rcall	.+2578   	; 0x209e <_etext+0x73c>
	n = 0x01;							/* Dummy CRC + Stop */
	if (cmd == CMD0) n = 0x95;			/* Valid CRC for CMD0(0) */
    168c:	80 e4       	ldi	r24, 0x40	; 64
    168e:	d8 16       	cp	r13, r24
    1690:	11 f4       	brne	.+4      	; 0x1696 <send_cmd+0x5e>
    1692:	85 e9       	ldi	r24, 0x95	; 149
    1694:	06 c0       	rjmp	.+12     	; 0x16a2 <send_cmd+0x6a>
	if (cmd == CMD8) n = 0x87;			/* Valid CRC for CMD8(0x1AA) */
    1696:	88 e4       	ldi	r24, 0x48	; 72
    1698:	d8 16       	cp	r13, r24
    169a:	11 f4       	brne	.+4      	; 0x16a0 <send_cmd+0x68>
    169c:	87 e8       	ldi	r24, 0x87	; 135
    169e:	01 c0       	rjmp	.+2      	; 0x16a2 <send_cmd+0x6a>
    16a0:	81 e0       	ldi	r24, 0x01	; 1
	xmit_spi(n);
    16a2:	fd d4       	rcall	.+2554   	; 0x209e <_etext+0x73c>
    16a4:	1a e0       	ldi	r17, 0x0A	; 10

	/* Receive command response */
	n = 10;								/* Wait for a valid response in timeout of 10 attempts */
	do {
		res = rcv_spi();
    16a6:	e7 d4       	rcall	.+2510   	; 0x2076 <_etext+0x714>
	} while ((res & 0x80) && --n);
    16a8:	87 ff       	sbrs	r24, 7
    16aa:	02 c0       	rjmp	.+4      	; 0x16b0 <send_cmd+0x78>
    16ac:	11 50       	subi	r17, 0x01	; 1
    16ae:	d9 f7       	brne	.-10     	; 0x16a6 <send_cmd+0x6e>

	return res;			/* Return with the response value */
}
    16b0:	1f 91       	pop	r17
    16b2:	0f 91       	pop	r16
    16b4:	ff 90       	pop	r15
    16b6:	ef 90       	pop	r14
    16b8:	df 90       	pop	r13
    16ba:	08 95       	ret

000016bc <disk_readp>:
	void *dest,		/* Pointer to the destination object to put data */
	DWORD lba,		/* Start sector number (LBA) */
	WORD ofs,		/* Byte offset in the sector (0..511) */
	WORD cnt		/* Byte count (1..512), b15:destination flag */
)
{
    16bc:	a0 e0       	ldi	r26, 0x00	; 0
    16be:	b0 e0       	ldi	r27, 0x00	; 0
    16c0:	e3 e6       	ldi	r30, 0x63	; 99
    16c2:	fb e0       	ldi	r31, 0x0B	; 11
    16c4:	18 c1       	rjmp	.+560    	; 0x18f6 <__prologue_saves__+0x14>
    16c6:	6c 01       	movw	r12, r24
    16c8:	79 01       	movw	r14, r18
	DRESULT res;
	BYTE rc;
	WORD t;


	if (!(CardType & CT_BLOCK)) lba *= 512;		/* Convert LBA to BA if needed */
    16ca:	80 91 bb 01 	lds	r24, 0x01BB
    16ce:	83 fd       	sbrc	r24, 3
    16d0:	07 c0       	rjmp	.+14     	; 0x16e0 <disk_readp+0x24>
    16d2:	39 e0       	ldi	r19, 0x09	; 9
    16d4:	44 0f       	add	r20, r20
    16d6:	55 1f       	adc	r21, r21
    16d8:	66 1f       	adc	r22, r22
    16da:	77 1f       	adc	r23, r23
    16dc:	3a 95       	dec	r19
    16de:	d1 f7       	brne	.-12     	; 0x16d4 <disk_readp+0x18>

	res = RES_ERROR;
	if (send_cmd(CMD17, lba) == 0) {		/* READ_SINGLE_BLOCK */
    16e0:	81 e5       	ldi	r24, 0x51	; 81
    16e2:	aa df       	rcall	.-172    	; 0x1638 <send_cmd>
    16e4:	88 23       	and	r24, r24
    16e6:	89 f4       	brne	.+34     	; 0x170a <disk_readp+0x4e>
    16e8:	c0 e3       	ldi	r28, 0x30	; 48
    16ea:	d5 e7       	ldi	r29, 0x75	; 117

		t = 30000;
		do {							/* Wait for data packet in timeout of 100ms */
			rc = rcv_spi();
    16ec:	c4 d4       	rcall	.+2440   	; 0x2076 <_etext+0x714>
		} while (rc == 0xFF && --t);
    16ee:	8f 3f       	cpi	r24, 0xFF	; 255
    16f0:	19 f4       	brne	.+6      	; 0x16f8 <disk_readp+0x3c>
    16f2:	21 97       	sbiw	r28, 0x01	; 1
    16f4:	d9 f7       	brne	.-10     	; 0x16ec <disk_readp+0x30>
    16f6:	09 c0       	rjmp	.+18     	; 0x170a <disk_readp+0x4e>

		if (rc == 0xFE) {
    16f8:	8e 3f       	cpi	r24, 0xFE	; 254
    16fa:	39 f4       	brne	.+14     	; 0x170a <disk_readp+0x4e>
			fwd_blk_part(dest, ofs, cnt);
    16fc:	c6 01       	movw	r24, r12
    16fe:	b7 01       	movw	r22, r14
    1700:	a8 01       	movw	r20, r16
    1702:	da d4       	rcall	.+2484   	; 0x20b8 <_etext+0x756>
    1704:	00 e0       	ldi	r16, 0x00	; 0
    1706:	10 e0       	ldi	r17, 0x00	; 0
    1708:	02 c0       	rjmp	.+4      	; 0x170e <disk_readp+0x52>
    170a:	01 e0       	ldi	r16, 0x01	; 1
    170c:	10 e0       	ldi	r17, 0x00	; 0
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    170e:	c0 9a       	sbi	0x18, 0	; 24
	rcv_spi();
    1710:	b2 d4       	rcall	.+2404   	; 0x2076 <_etext+0x714>
	}

	release_spi();

	return res;
}
    1712:	c8 01       	movw	r24, r16
    1714:	cd b7       	in	r28, 0x3d	; 61
    1716:	de b7       	in	r29, 0x3e	; 62
    1718:	e8 e0       	ldi	r30, 0x08	; 8
    171a:	09 c1       	rjmp	.+530    	; 0x192e <__epilogue_restores__+0x14>

0000171c <disk_initialize>:
/*-----------------------------------------------------------------------*/
/* Initialize Disk Drive                                                 */
/*-----------------------------------------------------------------------*/

DSTATUS disk_initialize (void)
{
    171c:	a4 e0       	ldi	r26, 0x04	; 4
    171e:	b0 e0       	ldi	r27, 0x00	; 0
    1720:	e3 e9       	ldi	r30, 0x93	; 147
    1722:	fb e0       	ldi	r31, 0x0B	; 11
    1724:	e8 c0       	rjmp	.+464    	; 0x18f6 <__prologue_saves__+0x14>
	BYTE n, cmd, ty, ocr[4];
	WORD t;


	USIPP = 0b00000001;	/* Attach USI to PORTA */
    1726:	81 e0       	ldi	r24, 0x01	; 1
    1728:	81 bb       	out	0x11, r24	; 17
	USICR = 0b00001000;	/* Enable the USI. DO pin is controlled by software */
    172a:	88 e0       	ldi	r24, 0x08	; 8
    172c:	8d b9       	out	0x0d, r24	; 13
    172e:	0a e0       	ldi	r16, 0x0A	; 10
    1730:	10 e0       	ldi	r17, 0x00	; 0

	for (t = 10; t; t--) rcv_spi();	/* Dummy clocks */
    1732:	a1 d4       	rcall	.+2370   	; 0x2076 <_etext+0x714>
    1734:	01 50       	subi	r16, 0x01	; 1
    1736:	10 40       	sbci	r17, 0x00	; 0
    1738:	e1 f7       	brne	.-8      	; 0x1732 <disk_initialize+0x16>
	SELECT();
    173a:	c0 98       	cbi	0x18, 0	; 24
    173c:	08 e5       	ldi	r16, 0x58	; 88
    173e:	12 e0       	ldi	r17, 0x02	; 2
	for (t = 600; t; t--) rcv_spi();	/* Dummy clocks */
    1740:	9a d4       	rcall	.+2356   	; 0x2076 <_etext+0x714>
    1742:	01 50       	subi	r16, 0x01	; 1
    1744:	10 40       	sbci	r17, 0x00	; 0
    1746:	e1 f7       	brne	.-8      	; 0x1740 <disk_initialize+0x24>

	ty = 0;
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
    1748:	80 e4       	ldi	r24, 0x40	; 64
    174a:	40 e0       	ldi	r20, 0x00	; 0
    174c:	50 e0       	ldi	r21, 0x00	; 0
    174e:	60 e0       	ldi	r22, 0x00	; 0
    1750:	70 e0       	ldi	r23, 0x00	; 0
    1752:	72 df       	rcall	.-284    	; 0x1638 <send_cmd>
    1754:	81 30       	cpi	r24, 0x01	; 1
    1756:	09 f0       	breq	.+2      	; 0x175a <disk_initialize+0x3e>
    1758:	5e c0       	rjmp	.+188    	; 0x1816 <disk_initialize+0xfa>
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
    175a:	88 e4       	ldi	r24, 0x48	; 72
    175c:	4a ea       	ldi	r20, 0xAA	; 170
    175e:	51 e0       	ldi	r21, 0x01	; 1
    1760:	60 e0       	ldi	r22, 0x00	; 0
    1762:	70 e0       	ldi	r23, 0x00	; 0
    1764:	69 df       	rcall	.-302    	; 0x1638 <send_cmd>
    1766:	81 30       	cpi	r24, 0x01	; 1
    1768:	b1 f5       	brne	.+108    	; 0x17d6 <disk_initialize+0xba>
    176a:	6e 01       	movw	r12, r28
    176c:	08 94       	sec
    176e:	c1 1c       	adc	r12, r1
    1770:	d1 1c       	adc	r13, r1
    1772:	76 01       	movw	r14, r12
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
    1774:	8e 01       	movw	r16, r28
    1776:	0b 5f       	subi	r16, 0xFB	; 251
    1778:	1f 4f       	sbci	r17, 0xFF	; 255
    177a:	7d d4       	rcall	.+2298   	; 0x2076 <_etext+0x714>
    177c:	f7 01       	movw	r30, r14
    177e:	81 93       	st	Z+, r24
    1780:	7f 01       	movw	r14, r30
    1782:	e0 17       	cp	r30, r16
    1784:	f1 07       	cpc	r31, r17
    1786:	c9 f7       	brne	.-14     	; 0x177a <disk_initialize+0x5e>
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
    1788:	8b 81       	ldd	r24, Y+3	; 0x03
    178a:	81 30       	cpi	r24, 0x01	; 1
    178c:	09 f0       	breq	.+2      	; 0x1790 <disk_initialize+0x74>
    178e:	43 c0       	rjmp	.+134    	; 0x1816 <disk_initialize+0xfa>
    1790:	8c 81       	ldd	r24, Y+4	; 0x04
    1792:	8a 3a       	cpi	r24, 0xAA	; 170
    1794:	09 f0       	breq	.+2      	; 0x1798 <disk_initialize+0x7c>
    1796:	3f c0       	rjmp	.+126    	; 0x1816 <disk_initialize+0xfa>
    1798:	08 ea       	ldi	r16, 0xA8	; 168
    179a:	11 e6       	ldi	r17, 0x61	; 97
    179c:	03 c0       	rjmp	.+6      	; 0x17a4 <disk_initialize+0x88>
				for (t = 25000; t && send_cmd(ACMD41, 1UL << 30); t--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
    179e:	01 50       	subi	r16, 0x01	; 1
    17a0:	10 40       	sbci	r17, 0x00	; 0
    17a2:	c9 f1       	breq	.+114    	; 0x1816 <disk_initialize+0xfa>
    17a4:	89 ee       	ldi	r24, 0xE9	; 233
    17a6:	40 e0       	ldi	r20, 0x00	; 0
    17a8:	50 e0       	ldi	r21, 0x00	; 0
    17aa:	60 e0       	ldi	r22, 0x00	; 0
    17ac:	70 e4       	ldi	r23, 0x40	; 64
    17ae:	44 df       	rcall	.-376    	; 0x1638 <send_cmd>
    17b0:	88 23       	and	r24, r24
    17b2:	a9 f7       	brne	.-22     	; 0x179e <disk_initialize+0x82>
    17b4:	3c c0       	rjmp	.+120    	; 0x182e <disk_initialize+0x112>
				if (t && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
					for (n = 0; n < 4; n++) ocr[n] = rcv_spi();
    17b6:	5f d4       	rcall	.+2238   	; 0x2076 <_etext+0x714>
    17b8:	f6 01       	movw	r30, r12
    17ba:	81 93       	st	Z+, r24
    17bc:	6f 01       	movw	r12, r30
    17be:	ee 15       	cp	r30, r14
    17c0:	ff 05       	cpc	r31, r15
    17c2:	c9 f7       	brne	.-14     	; 0x17b6 <disk_initialize+0x9a>
					ty = (ocr[0] & 0x40) ? CT_SD2 | CT_BLOCK : CT_SD2;	/* SDv2 */
    17c4:	89 81       	ldd	r24, Y+1	; 0x01
    17c6:	86 fd       	sbrc	r24, 6
    17c8:	03 c0       	rjmp	.+6      	; 0x17d0 <disk_initialize+0xb4>
    17ca:	e4 e0       	ldi	r30, 0x04	; 4
    17cc:	fe 2e       	mov	r15, r30
    17ce:	24 c0       	rjmp	.+72     	; 0x1818 <disk_initialize+0xfc>
    17d0:	7c e0       	ldi	r23, 0x0C	; 12
    17d2:	f7 2e       	mov	r15, r23
    17d4:	21 c0       	rjmp	.+66     	; 0x1818 <disk_initialize+0xfc>
				}
			}
		} else {							/* SDv1 or MMC */
			if (send_cmd(ACMD41, 0) <= 1) 	{
    17d6:	89 ee       	ldi	r24, 0xE9	; 233
    17d8:	40 e0       	ldi	r20, 0x00	; 0
    17da:	50 e0       	ldi	r21, 0x00	; 0
    17dc:	60 e0       	ldi	r22, 0x00	; 0
    17de:	70 e0       	ldi	r23, 0x00	; 0
    17e0:	2b df       	rcall	.-426    	; 0x1638 <send_cmd>
    17e2:	82 30       	cpi	r24, 0x02	; 2
    17e4:	28 f0       	brcs	.+10     	; 0x17f0 <disk_initialize+0xd4>
    17e6:	61 e4       	ldi	r22, 0x41	; 65
    17e8:	e6 2e       	mov	r14, r22
    17ea:	ff 24       	eor	r15, r15
    17ec:	f3 94       	inc	r15
    17ee:	04 c0       	rjmp	.+8      	; 0x17f8 <disk_initialize+0xdc>
    17f0:	59 ee       	ldi	r21, 0xE9	; 233
    17f2:	e5 2e       	mov	r14, r21
    17f4:	42 e0       	ldi	r20, 0x02	; 2
    17f6:	f4 2e       	mov	r15, r20
    17f8:	08 ea       	ldi	r16, 0xA8	; 168
    17fa:	11 e6       	ldi	r17, 0x61	; 97
    17fc:	03 c0       	rjmp	.+6      	; 0x1804 <disk_initialize+0xe8>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (t = 25000; t && send_cmd(cmd, 0); t--) ;	/* Wait for leaving idle state */
    17fe:	01 50       	subi	r16, 0x01	; 1
    1800:	10 40       	sbci	r17, 0x00	; 0
    1802:	49 f0       	breq	.+18     	; 0x1816 <disk_initialize+0xfa>
    1804:	8e 2d       	mov	r24, r14
    1806:	40 e0       	ldi	r20, 0x00	; 0
    1808:	50 e0       	ldi	r21, 0x00	; 0
    180a:	60 e0       	ldi	r22, 0x00	; 0
    180c:	70 e0       	ldi	r23, 0x00	; 0
    180e:	14 df       	rcall	.-472    	; 0x1638 <send_cmd>
    1810:	88 23       	and	r24, r24
    1812:	a9 f7       	brne	.-22     	; 0x17fe <disk_initialize+0xe2>
    1814:	16 c0       	rjmp	.+44     	; 0x1842 <disk_initialize+0x126>
    1816:	ff 24       	eor	r15, r15
			if (!t || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
				ty = 0;
			}
		}
	}
	CardType = ty;
    1818:	f0 92 bb 01 	sts	0x01BB, r15
/*-----------------------------------------------------------------------*/

static
void release_spi (void)
{
	DESELECT();
    181c:	c0 9a       	sbi	0x18, 0	; 24
	rcv_spi();
    181e:	2b d4       	rcall	.+2134   	; 0x2076 <_etext+0x714>
    1820:	80 e0       	ldi	r24, 0x00	; 0
    1822:	ff 20       	and	r15, r15
    1824:	09 f4       	brne	.+2      	; 0x1828 <disk_initialize+0x10c>
    1826:	81 e0       	ldi	r24, 0x01	; 1
	}
	CardType = ty;
	release_spi();

	return ty ? 0 : STA_NOINIT;
}
    1828:	24 96       	adiw	r28, 0x04	; 4
    182a:	e8 e0       	ldi	r30, 0x08	; 8
    182c:	80 c0       	rjmp	.+256    	; 0x192e <__epilogue_restores__+0x14>
	if (send_cmd(CMD0, 0) == 1) {			/* Enter Idle state */
		if (send_cmd(CMD8, 0x1AA) == 1) {	/* SDv2 */
			for (n = 0; n < 4; n++) ocr[n] = rcv_spi();		/* Get trailing return value of R7 resp */
			if (ocr[2] == 0x01 && ocr[3] == 0xAA) {				/* The card can work at vdd range of 2.7-3.6V */
				for (t = 25000; t && send_cmd(ACMD41, 1UL << 30); t--) ;	/* Wait for leaving idle state (ACMD41 with HCS bit) */
				if (t && send_cmd(CMD58, 0) == 0) {		/* Check CCS bit in the OCR */
    182e:	8a e7       	ldi	r24, 0x7A	; 122
    1830:	40 e0       	ldi	r20, 0x00	; 0
    1832:	50 e0       	ldi	r21, 0x00	; 0
    1834:	60 e0       	ldi	r22, 0x00	; 0
    1836:	70 e0       	ldi	r23, 0x00	; 0
    1838:	ff de       	rcall	.-514    	; 0x1638 <send_cmd>
    183a:	88 23       	and	r24, r24
    183c:	09 f4       	brne	.+2      	; 0x1840 <disk_initialize+0x124>
    183e:	bb cf       	rjmp	.-138    	; 0x17b6 <disk_initialize+0x9a>
    1840:	ea cf       	rjmp	.-44     	; 0x1816 <disk_initialize+0xfa>
				ty = CT_SD1; cmd = ACMD41;	/* SDv1 */
			} else {
				ty = CT_MMC; cmd = CMD1;	/* MMCv3 */
			}
			for (t = 25000; t && send_cmd(cmd, 0); t--) ;	/* Wait for leaving idle state */
			if (!t || send_cmd(CMD16, 512) != 0) {			/* Set R/W block length to 512 */
    1842:	80 e5       	ldi	r24, 0x50	; 80
    1844:	40 e0       	ldi	r20, 0x00	; 0
    1846:	52 e0       	ldi	r21, 0x02	; 2
    1848:	60 e0       	ldi	r22, 0x00	; 0
    184a:	70 e0       	ldi	r23, 0x00	; 0
    184c:	f5 de       	rcall	.-534    	; 0x1638 <send_cmd>
    184e:	88 23       	and	r24, r24
    1850:	11 f7       	brne	.-60     	; 0x1816 <disk_initialize+0xfa>
    1852:	e2 cf       	rjmp	.-60     	; 0x1818 <disk_initialize+0xfc>

00001854 <__mulsi3>:
    1854:	ff 27       	eor	r31, r31
    1856:	ee 27       	eor	r30, r30
    1858:	bb 27       	eor	r27, r27
    185a:	aa 27       	eor	r26, r26

0000185c <__mulsi3_loop>:
    185c:	60 ff       	sbrs	r22, 0
    185e:	04 c0       	rjmp	.+8      	; 0x1868 <__mulsi3_skip1>
    1860:	a2 0f       	add	r26, r18
    1862:	b3 1f       	adc	r27, r19
    1864:	e4 1f       	adc	r30, r20
    1866:	f5 1f       	adc	r31, r21

00001868 <__mulsi3_skip1>:
    1868:	22 0f       	add	r18, r18
    186a:	33 1f       	adc	r19, r19
    186c:	44 1f       	adc	r20, r20
    186e:	55 1f       	adc	r21, r21
    1870:	96 95       	lsr	r25
    1872:	87 95       	ror	r24
    1874:	77 95       	ror	r23
    1876:	67 95       	ror	r22
    1878:	89 f7       	brne	.-30     	; 0x185c <__mulsi3_loop>
    187a:	00 97       	sbiw	r24, 0x00	; 0
    187c:	76 07       	cpc	r23, r22
    187e:	71 f7       	brne	.-36     	; 0x185c <__mulsi3_loop>

00001880 <__mulsi3_exit>:
    1880:	cf 01       	movw	r24, r30
    1882:	bd 01       	movw	r22, r26
    1884:	08 95       	ret

00001886 <__udivmodqi4>:
    1886:	99 1b       	sub	r25, r25
    1888:	79 e0       	ldi	r23, 0x09	; 9
    188a:	04 c0       	rjmp	.+8      	; 0x1894 <__udivmodqi4_ep>

0000188c <__udivmodqi4_loop>:
    188c:	99 1f       	adc	r25, r25
    188e:	96 17       	cp	r25, r22
    1890:	08 f0       	brcs	.+2      	; 0x1894 <__udivmodqi4_ep>
    1892:	96 1b       	sub	r25, r22

00001894 <__udivmodqi4_ep>:
    1894:	88 1f       	adc	r24, r24
    1896:	7a 95       	dec	r23
    1898:	c9 f7       	brne	.-14     	; 0x188c <__udivmodqi4_loop>
    189a:	80 95       	com	r24
    189c:	08 95       	ret

0000189e <__udivmodsi4>:
    189e:	a1 e2       	ldi	r26, 0x21	; 33
    18a0:	1a 2e       	mov	r1, r26
    18a2:	aa 1b       	sub	r26, r26
    18a4:	bb 1b       	sub	r27, r27
    18a6:	fd 01       	movw	r30, r26
    18a8:	0d c0       	rjmp	.+26     	; 0x18c4 <__udivmodsi4_ep>

000018aa <__udivmodsi4_loop>:
    18aa:	aa 1f       	adc	r26, r26
    18ac:	bb 1f       	adc	r27, r27
    18ae:	ee 1f       	adc	r30, r30
    18b0:	ff 1f       	adc	r31, r31
    18b2:	a2 17       	cp	r26, r18
    18b4:	b3 07       	cpc	r27, r19
    18b6:	e4 07       	cpc	r30, r20
    18b8:	f5 07       	cpc	r31, r21
    18ba:	20 f0       	brcs	.+8      	; 0x18c4 <__udivmodsi4_ep>
    18bc:	a2 1b       	sub	r26, r18
    18be:	b3 0b       	sbc	r27, r19
    18c0:	e4 0b       	sbc	r30, r20
    18c2:	f5 0b       	sbc	r31, r21

000018c4 <__udivmodsi4_ep>:
    18c4:	66 1f       	adc	r22, r22
    18c6:	77 1f       	adc	r23, r23
    18c8:	88 1f       	adc	r24, r24
    18ca:	99 1f       	adc	r25, r25
    18cc:	1a 94       	dec	r1
    18ce:	69 f7       	brne	.-38     	; 0x18aa <__udivmodsi4_loop>
    18d0:	60 95       	com	r22
    18d2:	70 95       	com	r23
    18d4:	80 95       	com	r24
    18d6:	90 95       	com	r25
    18d8:	9b 01       	movw	r18, r22
    18da:	ac 01       	movw	r20, r24
    18dc:	bd 01       	movw	r22, r26
    18de:	cf 01       	movw	r24, r30
    18e0:	08 95       	ret

000018e2 <__prologue_saves__>:
    18e2:	2f 92       	push	r2
    18e4:	3f 92       	push	r3
    18e6:	4f 92       	push	r4
    18e8:	5f 92       	push	r5
    18ea:	6f 92       	push	r6
    18ec:	7f 92       	push	r7
    18ee:	8f 92       	push	r8
    18f0:	9f 92       	push	r9
    18f2:	af 92       	push	r10
    18f4:	bf 92       	push	r11
    18f6:	cf 92       	push	r12
    18f8:	df 92       	push	r13
    18fa:	ef 92       	push	r14
    18fc:	ff 92       	push	r15
    18fe:	0f 93       	push	r16
    1900:	1f 93       	push	r17
    1902:	cf 93       	push	r28
    1904:	df 93       	push	r29
    1906:	cd b7       	in	r28, 0x3d	; 61
    1908:	de b7       	in	r29, 0x3e	; 62
    190a:	ca 1b       	sub	r28, r26
    190c:	db 0b       	sbc	r29, r27
    190e:	0f b6       	in	r0, 0x3f	; 63
    1910:	f8 94       	cli
    1912:	de bf       	out	0x3e, r29	; 62
    1914:	0f be       	out	0x3f, r0	; 63
    1916:	cd bf       	out	0x3d, r28	; 61
    1918:	09 94       	ijmp

0000191a <__epilogue_restores__>:
    191a:	2a 88       	ldd	r2, Y+18	; 0x12
    191c:	39 88       	ldd	r3, Y+17	; 0x11
    191e:	48 88       	ldd	r4, Y+16	; 0x10
    1920:	5f 84       	ldd	r5, Y+15	; 0x0f
    1922:	6e 84       	ldd	r6, Y+14	; 0x0e
    1924:	7d 84       	ldd	r7, Y+13	; 0x0d
    1926:	8c 84       	ldd	r8, Y+12	; 0x0c
    1928:	9b 84       	ldd	r9, Y+11	; 0x0b
    192a:	aa 84       	ldd	r10, Y+10	; 0x0a
    192c:	b9 84       	ldd	r11, Y+9	; 0x09
    192e:	c8 84       	ldd	r12, Y+8	; 0x08
    1930:	df 80       	ldd	r13, Y+7	; 0x07
    1932:	ee 80       	ldd	r14, Y+6	; 0x06
    1934:	fd 80       	ldd	r15, Y+5	; 0x05
    1936:	0c 81       	ldd	r16, Y+4	; 0x04
    1938:	1b 81       	ldd	r17, Y+3	; 0x03
    193a:	aa 81       	ldd	r26, Y+2	; 0x02
    193c:	b9 81       	ldd	r27, Y+1	; 0x01
    193e:	ce 0f       	add	r28, r30
    1940:	d1 1d       	adc	r29, r1
    1942:	0f b6       	in	r0, 0x3f	; 63
    1944:	f8 94       	cli
    1946:	de bf       	out	0x3e, r29	; 62
    1948:	0f be       	out	0x3f, r0	; 63
    194a:	cd bf       	out	0x3d, r28	; 61
    194c:	ed 01       	movw	r28, r26
    194e:	08 95       	ret

00001950 <strcpy_P>:
    1950:	fb 01       	movw	r30, r22
    1952:	dc 01       	movw	r26, r24
    1954:	05 90       	lpm	r0, Z+
    1956:	0d 92       	st	X+, r0
    1958:	00 20       	and	r0, r0
    195a:	e1 f7       	brne	.-8      	; 0x1954 <strcpy_P+0x4>
    195c:	08 95       	ret

0000195e <_exit>:
    195e:	f8 94       	cli

00001960 <__stop_program>:
    1960:	ff cf       	rjmp	.-2      	; 0x1960 <__stop_program>
